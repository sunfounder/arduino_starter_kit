.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez plus profond√©ment dans l'univers du Raspberry Pi, d'Arduino et d'ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez et partagez** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos nouveaux produits.
    - **Promotions festives et concours** : Participez √† des concours et des promotions pendant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

11. Contr√¥le de Matrices de LED avec un Potentiom√®tre
==========================================================

Bienvenue dans cette le√ßon, o√π nous allons explorer comment ma√Ætriser les instructions conditionnelles pour contr√¥ler dynamiquement des matrices de LED. En s'appuyant sur nos connaissances des circuits LED simples, cette le√ßon vous introduit √† une logique conditionnelle plus complexe, permettant aux LEDs de r√©agir √† diff√©rents niveaux d'entr√©e d'un potentiom√®tre. Ce cours est id√©al pour les d√©butants qui d√©couvrent les instructions conditionnelles, ainsi que pour les programmeurs exp√©riment√©s souhaitant approfondir leur compr√©hension des structures if-else if-else.

√Ä la fin de cette le√ßon, vous saurez non seulement programmer les LEDs pour s'allumer en s√©quence, mais vous comprendrez aussi comment utiliser ces sch√©mas lumineux pour repr√©senter visuellement diff√©rents seuils d'entr√©e.

.. raw:: html

    <video controls style = "max-width:90%">
        <source src="_static/video/11_control_leds.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>


Construction du Circuit
------------------------------------

**Composants N√©cessaires**

.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 3 * LED rouges
     - 3 * R√©sistance de 220Œ©
     - 1 * Potentiom√®tre
   * - |list_uno_r3| 
     - |list_red_led| 
     - |list_220ohm| 
     - |list_potentiometer| 
   * - 1 * C√¢ble USB
     - 1 * Breadboard
     - Fils de connexion
     - 1 * Multim√®tre
   * - |list_usb_cable| 
     - |list_breadboard| 
     - |list_wire| 
     - |list_meter|


**√âtapes de Construction**

Suivez le sch√©ma de c√¢blage ou les √©tapes ci-dessous pour construire votre circuit.

.. image:: img/11_conditional_led_control_p9.png
    :width: 500
    :align: center

1. Connectez un potentiom√®tre √† la breadboard. Ins√©rez ses trois broches dans les trous 30G, 29F, 28G.

.. note::
    Le potentiom√®tre est √©tiquet√© "P 103", indiquant sa plage de r√©sistance. Ins√©rez-le dans la breadboard comme indiqu√©, avec le c√¥t√© √©tiquet√© face √† vous.

.. image:: img/11_dimmer_test_pot.png
    :width: 500
    :align: center

2. Ins√©rez un fil de connexion dans le trou 28J et connectez-le √† la borne n√©gative de la breadboard.

.. image:: img/11_conditional_led_control_pot_gnd.png
    :width: 500
    :align: center

3. Ensuite, ins√©rez un fil de connexion entre le trou 29J et la pin A0 de l'Arduino Uno R3.

.. image:: img/11_conditional_led_control_a0.png
    :width: 500
    :align: center

4. Enfin, connectez le potentiom√®tre au 5V en ins√©rant un fil de connexion entre le trou 30J de la breadboard et la pin 5V de l'Arduino Uno R3.

.. image:: img/11_conditional_led_control_5v.png
    :width: 500
    :align: center

5. Connectez la pin GND de l'Arduino Uno R3 √† la borne n√©gative de la breadboard √† l'aide d'un long fil de connexion.

.. image:: img/11_conditional_led_control_gnd.png
    :width: 500
    :align: center

6. Prenez trois LEDs de n'importe quelle couleur. Ins√©rez leurs anodes (broches les plus longues) dans les trous 15A, 11A, et 7A respectivement, et leurs cathodes (broches les plus courtes) dans la borne n√©gative de la breadboard.

.. image:: img/11_conditional_led_control_3led.png
    :width: 500
    :align: center

7. Placez une r√©sistance de 220 ohms entre les trous 15E et 15G.

.. image:: img/11_conditional_led_control_1resistor.png
    :width: 500
    :align: center

8. De la m√™me mani√®re, ins√©rez une r√©sistance de 220 ohms entre les trous 11E et 11G, puis une autre entre les trous 7E et 7G.

.. image:: img/11_conditional_led_control_2resistor.png
    :width: 500
    :align: center

9. Connectez le trou 15J de la breadboard √† la pin 11 de l'Arduino Uno R3 √† l'aide d'un fil.

.. image:: img/11_conditional_led_control_p11.png
    :width: 500
    :align: center

10. Connectez le trou 11J de la breadboard √† la pin 10 de l'Arduino Uno R3 √† l'aide d'un fil.

.. image:: img/11_conditional_led_control_p10.png
    :width: 500
    :align: center

11. Connectez le trou 7J de la breadboard √† la pin 9 de l'Arduino Uno R3 √† l'aide d'un fil. Votre circuit est maintenant termin√©.

.. image:: img/11_conditional_led_control_p9.png
    :width: 500
    :align: center

Cr√©ation du Code
-----------------------

**√âcrire un pseudocode**

1. Le pseudocode sert de croquis de programme, √©crit dans un langage simple pour en faciliter la compr√©hension. Votre t√¢che consiste √† cr√©er un pseudocode pour un tableau de LEDs qui r√©agit √† un potentiom√®tre. √Ä mesure que la valeur du potentiom√®tre augmente, plus de LEDs s'allumeront. Avant de r√©diger le pseudocode, r√©pondez √† ces questions :

.. code-block::

    - Comment l'Arduino lit-il la valeur du potentiom√®tre ?
    - Comment chaque LED peut-elle √™tre contr√¥l√©e individuellement ?
    - En combien de plages les valeurs du potentiom√®tre doivent-elles √™tre divis√©es ?
    - Que doit afficher chaque LED en fonction de ces plages ?

2. R√©digez votre pseudocode pour le tableau de LEDs dans la section vierge de votre manuel.

**Imprimer les Valeurs du Potentiom√®tre**

3. Pour transformer votre pseudocode en un sketch fonctionnel, ouvrez l'IDE Arduino et d√©marrez un nouveau projet en s√©lectionnant ¬´ Nouveau Sketch ¬ª dans le menu ¬´ Fichier ¬ª.
4. Sauvegardez votre sketch sous le nom de ``Lesson11_LED_Array`` en utilisant ``Ctrl + S`` ou en cliquant sur ¬´ Enregistrer ¬ª.

5. Comme dans les le√ßons pr√©c√©dentes, cr√©ez une variable avant la fonction ``void setup()`` pour stocker la valeur du potentiom√®tre, et n'oubliez pas d'annoter votre code pour correspondre √† sa fonctionnalit√©.

.. code-block:: Arduino
    :emphasize-lines: 1

    int potValue = 0;            // Variable pour stocker la valeur lue du potentiom√®tre

    void setup() {
        // Code √† ex√©cuter une seule fois :

    }

6. Comme les LEDs sont des dispositifs de sortie, vous devrez configurer les pins num√©riques 9, 10 et 11 comme sorties (OUTPUT). N'oubliez pas d'ajouter des commentaires.

.. code-block:: Arduino
    :emphasize-lines: 5,6,7

    int potValue = 0;            // Variable pour stocker la valeur lue du potentiom√®tre

    void setup() {
        // Code √† ex√©cuter une seule fois :
        pinMode(9, OUTPUT);  // Configurer la pin 9 comme sortie
        pinMode(10, OUTPUT); // Configurer la pin 10 comme sortie
        pinMode(11, OUTPUT); // Configurer la pin 11 comme sortie
    }

7. D√©marrez la communication s√©rie en d√©finissant le d√©bit en bauds √† 9600.

.. code-block:: Arduino
    :emphasize-lines: 8

    int potValue = 0;            // Variable pour stocker la valeur lue du potentiom√®tre

    void setup() {
        // Code √† ex√©cuter une seule fois :
        pinMode(9, OUTPUT);  // Configurer la pin 9 comme sortie
        pinMode(10, OUTPUT); // Configurer la pin 10 comme sortie
        pinMode(11, OUTPUT); // Configurer la pin 11 comme sortie
        Serial.begin(9600);  // D√©marrer la communication s√©rie √† 9600 bauds
    }

8. Dans la fonction ``void loop()``, apr√®s avoir lu la valeur du potentiom√®tre, stockez-la dans la variable ``potValue`` et affichez-la dans le moniteur s√©rie.

.. code-block:: Arduino
    :emphasize-lines: 12-15

    int potValue = 0;            // Variable pour stocker la valeur lue du potentiom√®tre

    void setup() {
        pinMode(9, OUTPUT);  // Configurer la pin 9 comme sortie
        pinMode(10, OUTPUT); // Configurer la pin 10 comme sortie
        pinMode(11, OUTPUT); // Configurer la pin 11 comme sortie
        Serial.begin(9600);  // D√©marrer la communication s√©rie √† 9600 bauds
    }

    void loop() {
        // Code principal √† ex√©cuter en boucle :
        potValue = analogRead(A0);     // Lire la valeur du potentiom√®tre
        Serial.print("Valeur Pot : ");  // Afficher la lecture
        Serial.println(potValue);      // Imprimer la valeur du potentiom√®tre
        delay(100);
    }

9. Validez et compilez votre code si n√©cessaire.

10. Une fois le code t√©l√©vers√© sur l'Arduino Uno R3, vous remarquerez que faire tourner le potentiom√®tre fait varier la valeur affich√©e dans le moniteur s√©rie entre 0 et 1023. Cette plage est id√©ale, mais en raison des variations de fabrication, votre potentiom√®tre pourrait afficher une plage de 50 √† 1000. Gardez simplement cette plage en r√©f√©rence.

**Contr√¥ler les LEDs avec les Valeurs du Potentiom√®tre**

Pour allumer successivement chaque LED en fonction de la valeur du potentiom√®tre, vous aurez besoin de plusieurs conditions. Vous pouvez utiliser ``if`` pour sp√©cifier des actions pour diff√©rentes plages de valeurs du potentiom√®tre :
  
  - Moins de 200 : √âteindre toutes les LEDs.
  - Entre 200 et 600 : Allumer la premi√®re LED.
  - Entre 600 et 1000 : Allumer deux LEDs.
  - Au-dessus de 1000 : Allumer toutes les LEDs.

Cependant, g√©rer ces conditions s√©par√©ment peut √™tre inefficace, car l'Arduino doit v√©rifier chaque condition √† chaque cycle de boucle.

Pour optimiser cela, utilisez la structure ``if-else if`` :

.. code-block:: Arduino

    if (condition 1) {
        // Ex√©cuter si la condition 1 est vraie
    }
    else if (condition 2) {
        // Ex√©cuter si la condition 2 est vraie
    }
    else if (condition 3) {
        // Ex√©cuter si la condition 3 est vraie
    }
    else {
        // Ex√©cuter si aucune des conditions n'est vraie
    }

.. image:: img/if_else_if.png
    :width: 500
    :align: center

Dans une structure ``if-else if``, la premi√®re condition est test√©e. Si elle est vraie, les commandes associ√©es sont ex√©cut√©es, et toutes les autres conditions sont ignor√©es (m√™me si certaines sont vraies). Si la premi√®re condition est fausse, la deuxi√®me condition est test√©e. Si cette condition est vraie, les commandes associ√©es √† cette condition sont ex√©cut√©es, puis les autres sont ignor√©es. Si elle est fausse, la troisi√®me condition est test√©e, et ainsi de suite. Dans certains cas, plusieurs conditions peuvent √™tre vraies. Par cons√©quent, l'ordre des conditions est important. Seule la premi√®re condition vraie aura ses commandes ex√©cut√©es.

11. Tout d'abord, √©teignez les trois LEDs si la valeur du potentiom√®tre est inf√©rieure √† 200. Ajoutez une instruction if et utilisez ensuite la fonction digitalWrite() pour d√©finir les pins 9, 10 et 11 sur LOW afin d'√©teindre les LEDs.

.. code-block:: Arduino
    :emphasize-lines: 7-11 

    void loop() {
        // put your main code here, to run repeatedly:
        potValue = analogRead(A0);    // Read value from potentiometer
        Serial.print("Pot Value: ");  // Prompt for the read value
        Serial.println(potValue);     // Print the potentiometer value
        delay(100);
        if (potValue < 200) {     // If potValue less than 200
            digitalWrite(9, LOW);   // Switch off the LED on pin 9
            digitalWrite(10, LOW);  // Switch off the LED on pin 10
            digitalWrite(11, LOW);  // Switch off the LED on pin 11
        }
    }

 
12. Ajoutez une instruction ``else if`` pour allumer la premi√®re LED lorsque la valeur analogique du potentiom√®tre est inf√©rieure √† 600.

 
.. code-block:: Arduino
    :emphasize-lines: 5-9 
    
    if (potValue < 200) {         // Si potValue est inf√©rieur √† 200
        digitalWrite(9, LOW);       // √âteindre la LED sur la pin 9
        digitalWrite(10, LOW);      // √âteindre la LED sur la pin 10
        digitalWrite(11, LOW);      // √âteindre la LED sur la pin 11
    } else if (potValue < 600) {  // Si potValue est inf√©rieur √† 600
        digitalWrite(9, HIGH);      // Allumer la LED sur la pin 9
        digitalWrite(10, LOW);      // √âteindre la LED sur la pin 10
        digitalWrite(11, LOW);      // √âteindre la LED sur la pin 11
    }

13. Pour allumer deux LEDs lorsque la valeur est inf√©rieure √† 1000, ins√©rez une autre condition ``else if`` comme ceci :

.. code-block:: Arduino
    :emphasize-lines: 10-14 
    
    if (potValue < 200) {         // Si potValue est inf√©rieur √† 200
        digitalWrite(9, LOW);       // √âteindre la LED sur la pin 9
        digitalWrite(10, LOW);      // √âteindre la LED sur la pin 10
        digitalWrite(11, LOW);      // √âteindre la LED sur la pin 11
    } else if (potValue < 600) {  // Si potValue est inf√©rieur √† 600
        digitalWrite(9, HIGH);      // Allumer la LED sur la pin 9
        digitalWrite(10, LOW);      // √âteindre la LED sur la pin 10
        digitalWrite(11, LOW);      // √âteindre la LED sur la pin 11
    }
    else if (potValue < 1000) {  // Si potValue est inf√©rieur √† 1000
        digitalWrite(9, HIGH);     // Allumer la LED sur la pin 9
        digitalWrite(10, HIGH);    // Allumer la LED sur la pin 10
        digitalWrite(11, LOW);     // √âteindre la LED sur la pin 11
    }    

14. Enfin, modifiez les commandes √† l'int√©rieur du bloc ``else`` pour allumer les trois LEDs √† l'aide de ``digitalWrite()``. Ce bloc contient les commandes qui s'ex√©cutent lorsque les autres conditions ne sont pas remplies. En d'autres termes, si la valeur du potentiom√®tre ``potValue`` est sup√©rieure ou √©gale √† 1000, les commandes dans ``else {}`` s'ex√©cuteront. Votre bloc ``else`` devrait ressembler √† ceci :

.. code-block:: Arduino
    :emphasize-lines: 6-8 

    else if (potValue < 1000) {  // Si potValue est inf√©rieur √† 1000
        digitalWrite(9, HIGH);     // Allumer la LED sur la pin 9
        digitalWrite(10, HIGH);    // Allumer la LED sur la pin 10
        digitalWrite(11, LOW);     // √âteindre la LED sur la pin 11
    } else {
        digitalWrite(9, HIGH);   // Allumer la LED sur la pin 9
        digitalWrite(10, HIGH);  // Allumer la LED sur la pin 10
        digitalWrite(11, HIGH);  // Allumer la LED sur la pin 11
    }

15. Voici votre code complet. Cliquez sur "T√©l√©verser" pour envoyer le code √† votre Arduino Uno R3.

.. code-block:: Arduino

    int potValue = 0;  // Variable pour stocker la valeur lue du potentiom√®tre

    void setup() {
        pinMode(9, OUTPUT);   // Configurer la pin 9 comme sortie
        pinMode(10, OUTPUT);  // Configurer la pin 10 comme sortie
        pinMode(11, OUTPUT);  // Configurer la pin 11 comme sortie
        Serial.begin(9600);   // D√©marrer la communication s√©rie √† 9600 bauds
    }

    void loop() {
        // Code principal √† ex√©cuter en boucle :
        potValue = analogRead(A0);    // Lire la valeur du potentiom√®tre
        Serial.print("Valeur Pot : ");  // Afficher la valeur lue
        Serial.println(potValue);     // Imprimer la valeur du potentiom√®tre
        delay(100);
        if (potValue < 200) {          // Si potValue est inf√©rieur √† 200
            digitalWrite(9, LOW);        // √âteindre la LED sur la pin 9
            digitalWrite(10, LOW);       // √âteindre la LED sur la pin 10
            digitalWrite(11, LOW);       // √âteindre la LED sur la pin 11
        } else if (potValue < 600) {   // Si potValue est inf√©rieur √† 600
            digitalWrite(9, HIGH);       // Allumer la LED sur la pin 9
            digitalWrite(10, LOW);       // √âteindre la LED sur la pin 10
            digitalWrite(11, LOW);       // √âteindre la LED sur la pin 11
        } else if (potValue < 1000) {  // Si potValue est inf√©rieur √† 1000
            digitalWrite(9, HIGH);       // Allumer la LED sur la pin 9
            digitalWrite(10, HIGH);      // Allumer la LED sur la pin 10
            digitalWrite(11, LOW);       // √âteindre la LED sur la pin 11
        } else {
            digitalWrite(9, HIGH);   // Allumer la LED sur la pin 9
            digitalWrite(10, HIGH);  // Allumer la LED sur la pin 10
            digitalWrite(11, HIGH);  // Allumer la LED sur la pin 11
        }
    }

16. Tournez le potentiom√®tre pour voir si le tableau de LEDs fonctionne comme pr√©vu :

   - Si la valeur du potentiom√®tre est inf√©rieure √† 200, toutes les LEDs doivent √™tre √©teintes.
   - Si la valeur est comprise entre 200 et 600, la premi√®re LED doit √™tre allum√©e.
   - Si la valeur est comprise entre 600 et 1000, les deux premi√®res LEDs doivent √™tre allum√©es.
   - Si la valeur d√©passe 1000, toutes les LEDs doivent √™tre allum√©es.

**Question**

Dans le code, nous d√©terminons le nombre de LEDs √† allumer en fonction de la valeur du potentiom√®tre. Comment pouvons-nous modifier le code pour que, tout en allumant les LEDs, leur luminosit√© change en fonction du potentiom√®tre ?

**R√©sum√©**

Dans cette le√ßon compl√®te, vous avez appris √† cr√©er un affichage interactif de LEDs qui r√©agit √† un potentiom√®tre. En commen√ßant par la construction du circuit, vous avez assembl√© un syst√®me int√©grant plusieurs LEDs contr√¥l√©es via des pins num√©riques, li√©es √† un potentiom√®tre qui ajuste leur √©tat en fonction de ses lectures. Gr√¢ce √† des instructions √©tape par √©tape, vous avez r√©ussi √† programmer votre Arduino pour g√©rer diff√©rents sc√©narios d'√©clairage en fonction de seuils pr√©cis du potentiom√®tre, renfor√ßant ainsi votre compr√©hension des interactions entre mat√©riel et logiciel.

Ce cours vous a permis d'acqu√©rir les comp√©tences n√©cessaires pour √©crire des structures conditionnelles efficaces, permettant √† vos projets de r√©agir √† des changements pr√©cis dans les entr√©es des capteurs. En exp√©rimentant avec diff√©rentes conditions, vous avez vu comment l'ordre et la structure de votre code affectent la sortie et l'efficacit√© de vos projets √©lectroniques.

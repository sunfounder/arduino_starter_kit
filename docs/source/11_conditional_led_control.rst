.. note::

    ¬°Hola! Bienvenido a la comunidad de entusiastas de SunFounder Raspberry Pi, Arduino y ESP32 en Facebook. Sum√©rgete en el mundo de Raspberry Pi, Arduino y ESP32 junto a otros entusiastas.

    **¬øPor qu√© unirte?**

    - **Soporte de expertos**: Resuelve problemas post-venta y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Vistas previas exclusivas**: Obt√©n acceso anticipado a anuncios y adelantos de nuevos productos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones y sorteos festivos**: Participa en sorteos y promociones especiales durante las festividades.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo.

11. Control de Arrays de LEDs con Potenci√≥metro
===================================================

¬°Bienvenido a esta lecci√≥n! Aqu√≠ exploraremos c√≥mo dominar las sentencias condicionales para controlar arrays de LEDs de manera din√°mica. Bas√°ndonos en nuestros conocimientos previos sobre circuitos simples de LEDs, esta lecci√≥n te introduce a la l√≥gica condicional m√°s compleja, permitiendo que los LEDs respondan a diferentes niveles de entrada desde un potenci√≥metro. Este curso es ideal tanto para principiantes que est√°n aprendiendo a programar sentencias condicionales como para programadores experimentados que desean profundizar su comprensi√≥n de las estructuras if-else if-else.

Al final de esta lecci√≥n, no solo sabr√°s c√≥mo programar los LEDs para que se enciendan en secuencia, sino que tambi√©n comprender√°s c√≥mo usar estos patrones de iluminaci√≥n para representar visualmente diferentes umbrales de entrada.

.. raw:: html

    <video controls style = "max-width:90%">
        <source src="_static/video/11_control_leds.mp4" type="video/mp4">
        Tu navegador no soporta la etiqueta de video.
    </video>


Construir el Circuito
------------------------------------

**Componentes necesarios**


.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 3 * LEDs rojos
     - 3 * Resistencias de 220Œ©
     - 1 * Potenci√≥metro
   * - |list_uno_r3| 
     - |list_red_led| 
     - |list_220ohm| 
     - |list_potentiometer| 
   * - 1 * Cable USB
     - 1 * Protoboard
     - Cables jumper
     - 1 * Mult√≠metro
   * - |list_usb_cable| 
     - |list_breadboard| 
     - |list_wire| 
     - |list_meter|


**Pasos de Construcci√≥n**

Sigue el diagrama de cableado o los pasos a continuaci√≥n para armar tu circuito.

.. image:: img/11_conditional_led_control_p9.png
    :width: 500
    :align: center

1. Conecta un potenci√≥metro a la protoboard. Inserta sus tres pines en los agujeros 30G, 29F, 28G.

.. note::
    El potenci√≥metro tiene una etiqueta "P 103", que indica su rango de resistencia. Inserta el potenci√≥metro en la protoboard como se muestra, con el lado etiquetado hacia ti.

.. image:: img/11_dimmer_test_pot.png
    :width: 500
    :align: center

2. Inserta un cable jumper en el agujero 28J y con√©ctalo al terminal negativo de la protoboard.

.. image:: img/11_conditional_led_control_pot_gnd.png
    :width: 500
    :align: center

3. Luego, inserta un cable jumper entre el agujero 29J y el pin A0 del Arduino Uno R3.

.. image:: img/11_conditional_led_control_a0.png
    :width: 500
    :align: center

4. Finalmente, conecta el potenci√≥metro a 5V insertando un cable jumper entre el agujero 30J de la protoboard y el pin de 5V del Arduino Uno R3.

.. image:: img/11_conditional_led_control_5v.png
    :width: 500
    :align: center

5. Conecta el pin GND del Arduino Uno R3 al terminal negativo de la protoboard utilizando un cable jumper largo.

.. image:: img/11_conditional_led_control_gnd.png
    :width: 500
    :align: center

6. Saca tres LEDs de cualquier color. Inserta sus √°nodos (pines m√°s largos) en los agujeros 15A, 11A y 7A respectivamente, y sus c√°todos (pines m√°s cortos) en el terminal negativo de la protoboard.

.. image:: img/11_conditional_led_control_3led.png
    :width: 500
    :align: center

7. Coloca una resistencia de 220 ohmios entre los agujeros 15E y 15G.

.. image:: img/11_conditional_led_control_1resistor.png
    :width: 500
    :align: center

8. De manera similar, inserta una resistencia de 220 ohmios entre los agujeros 11E y 11G, y otra entre los agujeros 7E y 7G.

.. image:: img/11_conditional_led_control_2resistor.png
    :width: 500
    :align: center

9. Conecta el agujero 15J de la protoboard al pin 11 del Arduino Uno R3 con un cable.

.. image:: img/11_conditional_led_control_p11.png
    :width: 500
    :align: center

10. Conecta el agujero 11J de la protoboard al pin 10 del Arduino Uno R3 con un cable.

.. image:: img/11_conditional_led_control_p10.png
    :width: 500
    :align: center

11. Conecta el agujero 7J de la protoboard al pin 9 del Arduino Uno R3 con un cable. Tu circuito ahora est√° completo.

.. image:: img/11_conditional_led_control_p9.png
    :width: 500
    :align: center

    
Creaci√≥n de C√≥digo
-----------------------

**Escribir Pseudoc√≥digo**

1. El pseudoc√≥digo sirve como un boceto del programa, escrito en lenguaje sencillo para facilitar la comprensi√≥n. Tu tarea es crear un pseudoc√≥digo para un array de LEDs que reaccione a un potenci√≥metro. A medida que aumenta el valor del potenci√≥metro, se encender√°n m√°s LEDs. Antes de escribir el pseudoc√≥digo, responde estas preguntas:

.. code-block::

    - ¬øC√≥mo lee el Arduino el valor del potenci√≥metro?
    - ¬øC√≥mo se puede controlar cada LED individualmente?
    - ¬øEn cu√°ntos rangos deber√≠a dividirse el valor del potenci√≥metro?
    - ¬øQu√© deber√≠a mostrar cada LED en estos rangos?

2. Escribe tu pseudoc√≥digo para el array de LEDs en la secci√≥n en blanco provista en tu manual.

**Imprimir los valores del potenci√≥metro**

3. Para convertir tu pseudoc√≥digo en un sketch funcional, abre el IDE de Arduino y comienza un nuevo proyecto seleccionando ‚ÄúNuevo Sketch‚Äù en el men√∫ ‚ÄúArchivo‚Äù.
4. Guarda tu sketch como ``Lesson11_LED_Array`` usando ``Ctrl + S`` o haciendo clic en ‚ÄúGuardar‚Äù.

5. Al igual que en lecciones anteriores, crea una variable antes del ``void setup()`` para almacenar el valor del potenci√≥metro y recuerda agregar comentarios que coincidan con la funcionalidad del c√≥digo.

.. code-block:: Arduino
    :emphasize-lines: 1

    int potValue = 0;            // Variable para almacenar el valor le√≠do del potenci√≥metro

    void setup() {
        // C√≥digo que se ejecuta una vez:

    }

6. Dado que los LEDs son dispositivos de salida, deber√°s configurar los pines digitales 9, 10 y 11 como OUTPUTs. Recuerda incluir comentarios.

.. code-block:: Arduino
    :emphasize-lines: 5,6,7

    int potValue = 0;            // Variable para almacenar el valor le√≠do del potenci√≥metro

    void setup() {
        // C√≥digo que se ejecuta una vez:
        pinMode(9, OUTPUT);  // Configurar pin 9 como salida
        pinMode(10, OUTPUT); // Configurar pin 10 como salida
        pinMode(11, OUTPUT); // Configurar pin 11 como salida
    }

7. Inicia la comunicaci√≥n serial configurando la velocidad en baudios a 9600.

.. code-block:: Arduino
    :emphasize-lines: 8

    int potValue = 0;            // Variable para almacenar el valor le√≠do del potenci√≥metro

    void setup() {
        // C√≥digo que se ejecuta una vez:
        pinMode(9, OUTPUT);  // Configurar pin 9 como salida
        pinMode(10, OUTPUT); // Configurar pin 10 como salida
        pinMode(11, OUTPUT); // Configurar pin 11 como salida
        Serial.begin(9600);  // Iniciar comunicaci√≥n serial a 9600 baudios
    }

8. Dentro del ``void loop()``, despu√©s de leer el valor del potenci√≥metro, gu√°rdalo en la variable ``potValue`` e impr√≠melo en el monitor serial.

.. code-block:: Arduino
    :emphasize-lines: 12-15

    int potValue = 0;            // Variable para almacenar el valor le√≠do del potenci√≥metro

    void setup() {
        pinMode(9, OUTPUT);  // Configurar pin 9 como salida
        pinMode(10, OUTPUT); // Configurar pin 10 como salida
        pinMode(11, OUTPUT); // Configurar pin 11 como salida
        Serial.begin(9600);  // Iniciar comunicaci√≥n serial a 9600 baudios
    }

    void loop() {
        // C√≥digo principal que se ejecuta repetidamente:
        potValue = analogRead(A0);     // Leer valor del potenci√≥metro
        Serial.print("Pot Value: ");  // Mostrar la lectura
        Serial.println(potValue);      // Imprimir el valor del potenci√≥metro
        delay(100);
    }

9. Valida y compila tu c√≥digo si es necesario.

10. Una vez que el c√≥digo se haya cargado en el Arduino Uno R3, notar√°s que al girar el potenci√≥metro, el valor mostrado en el monitor serial var√≠a entre 0 y 1023. Este rango es ideal, aunque debido a variaciones de fabricaci√≥n, tu potenci√≥metro podr√≠a mostrar un rango de 50 a 1000. Solo recuerda este rango como referencia.


**Controlar LEDs con los valores del potenci√≥metro**

Para encender cada LED secuencialmente seg√∫n el valor del potenci√≥metro, necesitar√°s varias condiciones. Puedes usar ``if`` para especificar acciones para diferentes rangos de valores del potenci√≥metro:
  
  - Por debajo de 200: Apaga todos los LEDs.
  - Entre 200 y 600: Enciende el primer LED.
  - Entre 600 y 1000: Enciende dos LEDs.
  - Por encima de 1000: Enciende todos los LEDs.

Sin embargo, gestionar estas condiciones por separado puede ser ineficiente, ya que el Arduino necesita verificar cada una en cada ciclo del bucle.

Para optimizar esto, utiliza la estructura ``if-else if``:

.. code-block:: Arduino

    if (condition 1) {
        // Execute if condition 1 is true
    }
    else if (condition 2) {
        // Execute if condition 2 is true
    }
    else if (condition 3) {
        // Execute if condition 3 is true
    }
    else {
        // Execute if none of the conditions are true
    }


.. image:: img/if_else_if.png
    :width: 500
    :align: center


En una estructura ``if-else if``, se prueba la primera condici√≥n. Si es verdadera, se ejecutan los comandos asociados y se saltan todas las dem√°s condiciones (aunque algunas de ellas tambi√©n sean verdaderas). Si la primera condici√≥n es falsa, se prueba la segunda condici√≥n en la estructura. Si la segunda condici√≥n es verdadera, se ejecutan los comandos asociados a esta condici√≥n y luego se omiten las dem√°s. Si es falsa, se prueba la tercera condici√≥n, y as√≠ sucesivamente. En algunos escenarios, puede haber m√∫ltiples condiciones verdaderas. Por lo tanto, el orden de las condiciones es importante. Solo se ejecutar√°n los comandos asociados con la primera condici√≥n verdadera.


11. Primero, apaga los tres LEDs si el valor del potenci√≥metro es menor de 200. A√±ade una declaraci√≥n if y luego usa la funci√≥n digitalWrite() para establecer los pines 9, 10 y 11 en LOW para apagar los LEDs.

.. code-block:: Arduino
    :emphasize-lines: 7-11 
    
    void loop() {
        // C√≥digo principal que se ejecuta repetidamente:
        potValue = analogRead(A0);    // Leer el valor del potenci√≥metro
        Serial.print("Pot Value: ");  // Mostrar la lectura
        Serial.println(potValue);     // Imprimir el valor del potenci√≥metro
        delay(100);
        if (potValue < 200) {     // Si potValue es menor de 200
            digitalWrite(9, LOW);   // Apagar el LED en el pin 9
            digitalWrite(10, LOW);  // Apagar el LED en el pin 10
            digitalWrite(11, LOW);  // Apagar el LED en el pin 11
        }
    }

 
12. A√±ade una declaraci√≥n ``else if`` para encender el primer LED cuando el valor anal√≥gico del potenci√≥metro est√© por debajo de 600.

.. code-block:: Arduino
    :emphasize-lines: 5-9 
    
    if (potValue < 200) {         // Si potValue es menor de 200
        digitalWrite(9, LOW);       // Apagar el LED en el pin 9
        digitalWrite(10, LOW);      // Apagar el LED en el pin 10
        digitalWrite(11, LOW);      // Apagar el LED en el pin 11
    } else if (potValue < 600) {  // Si potValue es menor de 600
        digitalWrite(9, HIGH);      // Encender el LED en el pin 9
        digitalWrite(10, LOW);      // Apagar el LED en el pin 10
        digitalWrite(11, LOW);      // Apagar el LED en el pin 11
    }


13. Para encender dos LEDs cuando el valor est√© por debajo de 1000, inserta otra condici√≥n ``else if`` como esta:

.. code-block:: Arduino
    :emphasize-lines: 10-14 
    
    if (potValue < 200) {         // Si potValue es menor de 200
        digitalWrite(9, LOW);       // Apagar el LED en el pin 9
        digitalWrite(10, LOW);      // Apagar el LED en el pin 10
        digitalWrite(11, LOW);      // Apagar el LED en el pin 11
    } else if (potValue < 600) {  // Si potValue es menor de 600
        digitalWrite(9, HIGH);      // Encender el LED en el pin 9
        digitalWrite(10, LOW);      // Apagar el LED en el pin 10
        digitalWrite(11, LOW);      // Apagar el LED en el pin 11
    }
    else if (potValue < 1000) {  // Si potValue es menor de 1000
        digitalWrite(9, HIGH);     // Encender el LED en el pin 9
        digitalWrite(10, HIGH);    // Encender el LED en el pin 10
        digitalWrite(11, LOW);     // Apagar el LED en el pin 11
    }    

14. Finalmente, modifica los comandos dentro del bloque ``else`` para encender los tres LEDs usando ``digitalWrite()``. Este bloque contiene los comandos que se ejecutan cuando ninguna de las otras condiciones es verdadera. En otras palabras, si el valor ``potValue`` del potenci√≥metro es mayor o igual a 1000, los comandos dentro de ``else {}`` se ejecutar√°n. Tu bloque ``else`` deber√≠a verse as√≠:

.. code-block:: Arduino
    :emphasize-lines: 6-8 

    else if (potValue < 1000) {  // Si potValue es menor de 1000
        digitalWrite(9, HIGH);     // Encender el LED en el pin 9
        digitalWrite(10, HIGH);    // Encender el LED en el pin 10
        digitalWrite(11, LOW);     // Apagar el LED en el pin 11
    } else {
        digitalWrite(9, HIGH);   // Encender el LED en el pin 9
        digitalWrite(10, HIGH);  // Encender el LED en el pin 10
        digitalWrite(11, HIGH);  // Encender el LED en el pin 11
    }

15. Tu c√≥digo completo es el siguiente. Haz clic en "Subir" para enviar el c√≥digo a tu Arduino Uno R3.

.. code-block:: Arduino

    int potValue = 0;  // Variable para almacenar el valor le√≠do del potenci√≥metro

    void setup() {
        pinMode(9, OUTPUT);   // Configurar el pin 9 como salida
        pinMode(10, OUTPUT);  // Configurar el pin 10 como salida
        pinMode(11, OUTPUT);  // Configurar el pin 11 como salida
        Serial.begin(9600);   // Iniciar la comunicaci√≥n serial a 9600 baudios
    }

    void loop() {
        // C√≥digo principal que se ejecuta repetidamente:
        potValue = analogRead(A0);    // Leer el valor del potenci√≥metro
        Serial.print("Pot Value: ");  // Mostrar la lectura
        Serial.println(potValue);     // Imprimir el valor del potenci√≥metro
        delay(100);
        if (potValue < 200) {          // Si potValue es menor de 200
            digitalWrite(9, LOW);        // Apagar el LED en el pin 9
            digitalWrite(10, LOW);       // Apagar el LED en el pin 10
            digitalWrite(11, LOW);       // Apagar el LED en el pin 11
        } else if (potValue < 600) {   // Si potValue es menor de 600
            digitalWrite(9, HIGH);       // Encender el LED en el pin 9
            digitalWrite(10, LOW);       // Apagar el LED en el pin 10
            digitalWrite(11, LOW);       // Apagar el LED en el pin 11
        } else if (potValue < 1000) {  // Si potValue es menor de 1000
            digitalWrite(9, HIGH);       // Encender el LED en el pin 9
            digitalWrite(10, HIGH);      // Encender el LED en el pin 10
            digitalWrite(11, LOW);       // Apagar el LED en el pin 11
        } else {
            digitalWrite(9, HIGH);   // Encender el LED en el pin 9
            digitalWrite(10, HIGH);  // Encender el LED en el pin 10
            digitalWrite(11, HIGH);  // Encender el LED en el pin 11
        }
    }

16. Gira el potenci√≥metro para comprobar si el array de LEDs funciona como se espera:

   - Si el valor del potenci√≥metro es inferior a 200, todos los LEDs deber√≠an estar apagados.
   - Si el valor est√° entre 200 y 600, el primer LED deber√≠a estar encendido.
   - Si el valor est√° entre 600 y 1000, los dos primeros LEDs deber√≠an estar encendidos.
   - Si el valor supera los 1000, todos los LEDs deber√≠an estar encendidos.

**Pregunta**

En el c√≥digo, determinamos cu√°ntos LEDs encender en funci√≥n del valor del potenci√≥metro. ¬øC√≥mo podemos modificar el c√≥digo para que, al encender los LEDs, su brillo tambi√©n cambie de acuerdo con el valor del potenci√≥metro?

**Resumen**

En esta lecci√≥n completa, has aprendido a crear una pantalla interactiva de LEDs que responde a un potenci√≥metro. Comenzando con la construcci√≥n del circuito, has ensamblado un sistema que incorpora varios LEDs controlados a trav√©s de pines digitales, vinculados a un potenci√≥metro que ajusta sus estados en funci√≥n de las lecturas. A trav√©s de instrucciones paso a paso, has programado con √©xito tu Arduino para gestionar diferentes escenarios de iluminaci√≥n basados en umbrales espec√≠ficos del potenci√≥metro, mejorando tu comprensi√≥n de las interacciones entre hardware y software.

Este curso te ha proporcionado las habilidades para escribir estructuras condicionales eficientes, lo que permite que tus proyectos reaccionen a cambios precisos en las entradas de sensores. Al experimentar con diferentes condiciones, has visto de primera mano c√≥mo el orden y la estructura de tu c√≥digo afectan el rendimiento y la eficiencia de tus proyectos electr√≥nicos.


.. note::

    Hallo, willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Community auf Facebook! Tauche tiefer in die Welt von Raspberry Pi, Arduino und ESP32 mit gleichgesinnten Enthusiasten ein.

    **Warum beitreten?**

    - **Experten-Support**: L√∂se Probleme nach dem Kauf und technische Herausforderungen mit Hilfe unserer Community und unseres Teams.
    - **Lernen & Teilen**: Tausche Tipps und Tutorials aus, um deine F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalte fr√ºhzeitigen Zugriff auf neue Produktank√ºndigungen und Einblicke.
    - **Spezielle Rabatte**: Profitiere von exklusiven Rabatten auf unsere neuesten Produkte.
    - **Festliche Aktionen und Verlosungen**: Nimm an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Bereit, mit uns zu forschen und zu erschaffen? Klicke auf [|link_sf_facebook|] und trete noch heute bei!

11. Steuerung von LED-Arrays mit Potentiometer
===================================================

Willkommen zu dieser Lektion, in der wir lernen, bedingte Anweisungen zu meistern, um LED-Arrays dynamisch zu steuern. Aufbauend auf unserem vorherigen Wissen √ºber einfache LED-Schaltungen f√ºhrt diese Lektion in komplexere bedingte Logik ein, die es erm√∂glicht, dass LEDs auf verschiedene Eingaben eines Potentiometers reagieren. Dieser Kurs eignet sich sowohl f√ºr Anf√§nger, die neu in der Programmierung von bedingten Anweisungen sind, als auch f√ºr erfahrene Programmierer, die ihr Verst√§ndnis f√ºr if-else if-else-Strukturen vertiefen m√∂chten.

Am Ende dieser Lektion wirst du nicht nur wissen, wie man LEDs nacheinander programmiert, sondern auch verstehen, wie man diese Lichtmuster verwendet, um unterschiedliche Eingabeschwellen visuell darzustellen.

.. raw:: html

    <video controls style = "max-width:90%">
        <source src="_static/video/11_control_leds.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>


Bau der Schaltung
------------------------------------

**Ben√∂tigte Komponenten**


.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 3 * Rote LEDs
     - 3 * 220Œ© Widerst√§nde
     - 1 * Potentiometer
   * - |list_uno_r3| 
     - |list_red_led| 
     - |list_220ohm| 
     - |list_potentiometer| 
   * - 1 * USB-Kabel
     - 1 * Steckbrett
     - Jumper-Kabel
     - 1 * Multimeter
   * - |list_usb_cable| 
     - |list_breadboard| 
     - |list_wire| 
     - |list_meter|
     

**Bau der Schaltung**

Folge dem Verdrahtungsdiagramm oder den folgenden Schritten, um deine Schaltung zu bauen.

.. image:: img/11_conditional_led_cont rol_p9.png
    :width: 500
    :align: center

1. Schlie√üe ein Potentiometer an das Steckbrett an. Setze seine drei Pins in die L√∂cher 30G, 29F, 28G.

.. note::
    Das Potentiometer ist mit "P 103" beschriftet, was auf seinen Widerstandsbereich hinweist. Setze das Potentiometer so in das Steckbrett ein, dass die beschriftete Seite zu dir zeigt.

.. image:: img/11_dimmer_test_pot.png
    :width: 500
    :align: center

2. Setze ein Jumper-Kabel in das Loch 28J und verbinde es mit dem negativen Anschluss des Steckbretts.

.. image:: img/11_conditional_led_control_pot_gnd.png
    :width: 500
    :align: center

3. Setze dann ein Jumper-Kabel zwischen Loch 29J und den A0-Pin des Arduino Uno R3.

.. image:: img/11_conditional_led_control_a0.png
    :width: 500
    :align: center

4. Verbinde schlie√ülich das Potentiometer mit 5V, indem du ein Jumper-Kabel zwischen Loch 30J am Steckbrett und den 5V-Pin des Arduino Uno R3 einsetzt.

.. image:: img/11_conditional_led_control_5v.png
    :width: 500
    :align: center


5. Verbinde den GND-Pin des Arduino Uno R3 mit dem negativen Anschluss des Steckbretts, indem du ein langes Jumper-Kabel verwendest.

.. image:: img/11_conditional_led_control_gnd.png
    :width: 500
    :align: center

6. Nimm drei LEDs beliebiger Farbe heraus. Setze ihre Anoden (l√§ngere Pins) in die L√∂cher 15A, 11A und 7A und ihre Kathoden (k√ºrzere Pins) in den negativen Anschluss des Steckbretts.

.. image:: img/11_conditional_led_control_3led.png
    :width: 500
    :align: center

7. Setze einen 220 Ohm Widerstand zwischen die L√∂cher 15E und 15G.

.. image:: img/11_conditional_led_control_1resistor.png
    :width: 500
    :align: center

8. Setze ebenfalls einen 220 Ohm Widerstand zwischen 11E und 11G sowie einen weiteren zwischen 7E und 7G.

.. image:: img/11_conditional_led_control_2resistor.png
    :width: 500
    :align: center

9. Verbinde das Loch 15J am Steckbrett mit Pin 11 des Arduino Uno R3 mit einem Kabel.

.. image:: img/11_conditional_led_control_p11.png
    :width: 500
    :align: center

10. Verbinde das Loch 11J am Steckbrett mit Pin 10 des Arduino Uno R3 mit einem Kabel.

.. image:: img/11_conditional_led_control_p10.png
    :width: 500
    :align: center

11. Verbinde das Loch 7J am Steckbrett mit Pin 9 des Arduino Uno R3 mit einem Kabel. Deine Schaltung ist jetzt fertiggestellt.

.. image:: img/11_conditional_led_control_p9.png
    :width: 500
    :align: center

Codeerstellung
-----------------------

**Pseudocode schreiben**

1. Pseudocode dient als Programmskizze, die in einfacher Sprache verfasst ist, um das Verst√§ndnis zu erleichtern. Deine Aufgabe ist es, einen Pseudocode f√ºr ein LED-Array zu erstellen, das auf ein Potentiometer reagiert. Wenn der Wert des Potentiometers steigt, sollen mehr LEDs leuchten. Bevor du mit dem Pseudocode beginnst, beantworte diese Fragen:

.. code-block::

    - Wie liest der Arduino den Wert des Potentiometers aus?
    - Wie kann jede LED einzeln gesteuert werden?
    - In wie viele Bereiche sollte der Wert des Potentiometers unterteilt werden?
    - Was sollte jede LED in diesen Bereichen anzeigen?

2. Schreibe deinen Pseudocode f√ºr das LED-Array in den vorgesehenen Abschnitt deines Handbuchs.

**Potentiometerwerte anzeigen**

3. Um deinen Pseudocode in ein funktionierendes Sketch umzuwandeln, √∂ffne die Arduino IDE und starte ein neues Projekt, indem du im Men√º ‚ÄûDatei‚Äú die Option ‚ÄûNeues Sketch‚Äú ausw√§hlst.
4. Speichere dein Sketch als ``Lesson11_LED_Array`` mit ``Ctrl + S`` oder durch Klicken auf ‚ÄûSpeichern‚Äú.

5. √Ñhnlich wie in den vorherigen Lektionen erstellst du eine Variable vor dem ``void setup()``, um den Potentiometerwert zu speichern. Denke daran, deinen Code passend zu kommentieren.

.. code-block:: Arduino
    :emphasize-lines: 1

    int potValue = 0;            // Variable zur Speicherung des Potentiometerwerts

    void setup() {
        // Code, der einmal ausgef√ºhrt wird:
    }

6. Da LEDs Ausgabeger√§te sind, musst du die digitalen Pins 9, 10 und 11 als OUTPUT konfigurieren. Vergiss nicht, Kommentare hinzuzuf√ºgen.

.. code-block:: Arduino
    :emphasize-lines: 5,6,7

    int potValue = 0;            // Variable zur Speicherung des Potentiometerwerts

    void setup() {
        // Code, der einmal ausgef√ºhrt wird:
        pinMode(9, OUTPUT);  // Konfiguriere Pin 9 als Ausgang
        pinMode(10, OUTPUT); // Konfiguriere Pin 10 als Ausgang
        pinMode(11, OUTPUT); // Konfiguriere Pin 11 als Ausgang
    }

7. Starte die serielle Kommunikation, indem du die Baudrate auf 9600 einstellst.

.. code-block:: Arduino
    :emphasize-lines: 8

    int potValue = 0;            // Variable zur Speicherung des Potentiometerwerts

    void setup() {
        // Code, der einmal ausgef√ºhrt wird:
        pinMode(9, OUTPUT);  // Konfiguriere Pin 9 als Ausgang
        pinMode(10, OUTPUT); // Konfiguriere Pin 10 als Ausgang
        pinMode(11, OUTPUT); // Konfiguriere Pin 11 als Ausgang
        Serial.begin(9600);  // Starte serielle Kommunikation mit 9600 Baud
    }

8. Innerhalb der ``void loop()``, nachdem du den Potentiometerwert gelesen hast, speichere ihn in der Variable ``potValue`` und gib ihn auf dem seriellen Monitor aus.

.. code-block:: Arduino
    :emphasize-lines: 12-15

    int potValue = 0;            // Variable zur Speicherung des Potentiometerwerts

    void setup() {
        pinMode(9, OUTPUT);  // Konfiguriere Pin 9 als Ausgang
        pinMode(10, OUTPUT); // Konfiguriere Pin 10 als Ausgang
        pinMode(11, OUTPUT); // Konfiguriere Pin 11 als Ausgang
        Serial.begin(9600);  // Starte serielle Kommunikation mit 9600 Baud
    }

    void loop() {
        // Hauptcode, der wiederholt ausgef√ºhrt wird:
        potValue = analogRead(A0);     // Lese den Wert des Potentiometers
        Serial.print("Pot Value: ");  // Zeige den Wert an
        Serial.println(potValue);      // Drucke den Potentiometerwert
        delay(100);
    }

9. √úberpr√ºfe und kompiliere deinen Code bei Bedarf.

10. Nachdem der Code auf das Arduino Uno R3 hochgeladen wurde, wirst du feststellen, dass das Drehen des Potentiometers den angezeigten Wert im seriellen Monitor zwischen 0 und 1023 variieren l√§sst. Dieser Bereich ist ideal, aber aufgrund von Fertigungstoleranzen k√∂nnte dein Potentiometer einen Bereich von 50 bis 1000 zeigen. Behalte diesen Bereich zur Referenz im Hinterkopf.


**Steuerung der LEDs mit Potentiometerwerten**

Um jede LED nacheinander basierend auf dem Wert des Potentiometers zu beleuchten, ben√∂tigst du mehrere Bedingungen. Du kannst ``if`` verwenden, um Aktionen f√ºr verschiedene Bereiche der Potentiometerwerte festzulegen:
  
  - Unter 200: Alle LEDs ausschalten.
  - Zwischen 200 und 600: Die erste LED einschalten.
  - Zwischen 600 und 1000: Zwei LEDs einschalten.
  - √úber 1000: Alle LEDs einschalten.

Das Verwalten dieser Bedingungen separat kann jedoch ineffizient sein, da der Arduino jede Bedingung in jedem Schleifendurchlauf √ºberpr√ºfen muss. 

Um dies zu vereinfachen, verwende die ``if-else if``-Struktur:

.. code-block:: Arduino

    if (Bedingung 1) {
        // Ausf√ºhren, wenn Bedingung 1 wahr ist
    }
    else if (Bedingung 2) {
        // Ausf√ºhren, wenn Bedingung 2 wahr ist
    }
    else if (Bedingung 3) {
        // Ausf√ºhren, wenn Bedingung 3 wahr ist
    }
    else {
        // Ausf√ºhren, wenn keine der Bedingungen zutrifft
    }


.. image:: img/if_else_if.png
    :width: 500
    :align: center


In einer ``if-else if``-Struktur wird die erste Bedingung √ºberpr√ºft. Ist sie wahr, werden die zugeh√∂rigen Befehle ausgef√ºhrt, und alle anderen Bedingungen werden √ºbersprungen (auch wenn einige davon wahr sind). Wenn die erste Bedingung falsch ist, wird die zweite Bedingung in der Struktur getestet. Ist die zweite Bedingung wahr, werden die zugeh√∂rigen Befehle ausgef√ºhrt und die restlichen Bedingungen √ºbersprungen. Ist auch die zweite Bedingung falsch, wird die dritte Bedingung getestet, und so weiter. In manchen Szenarien k√∂nnen mehrere Bedingungen wahr sein. Daher ist die Reihenfolge der Bedingungen wichtig. Nur die erste wahre Bedingung wird ausgef√ºhrt.


11. Schalten Sie zuerst alle drei LEDs aus, wenn der Wert des Potentiometers unter 200 liegt. F√ºgen Sie eine if-Anweisung hinzu und verwenden Sie dann die Funktion digitalWrite(), um die Pins 9, 10 und 11 auf LOW zu setzen, um die LEDs auszuschalten.

.. code-block:: Arduino
    :emphasize-lines: 7-11 
    
    void loop() {
        // Hauptcode, der wiederholt ausgef√ºhrt wird:
        potValue = analogRead(A0);    // Lese den Potentiometerwert
        Serial.print("Pot Value: ");  // Ausgabe des gelesenen Werts
        Serial.println(potValue);     // Drucke den Potentiometerwert
        delay(100);
        if (potValue < 200) {     // Wenn potValue kleiner als 200 ist
            digitalWrite(9, LOW);   // Schalte die LED an Pin 9 aus
            digitalWrite(10, LOW);  // Schalte die LED an Pin 10 aus
            digitalWrite(11, LOW);  // Schalte die LED an Pin 11 aus
        }
    }

12. F√ºgen Sie eine ``else if``-Anweisung hinzu, um die erste LED einzuschalten, wenn der analoge Wert des Potentiometers unter 600 liegt.

.. code-block:: Arduino
    :emphasize-lines: 5-9 
    
    if (potValue < 200) {         // Wenn potValue kleiner als 200 ist
        digitalWrite(9, LOW);       // Schalte die LED an Pin 9 aus
        digitalWrite(10, LOW);      // Schalte die LED an Pin 10 aus
        digitalWrite(11, LOW);      // Schalte die LED an Pin 11 aus
    } else if (potValue < 600) {  // Wenn potValue kleiner als 600 ist
        digitalWrite(9, HIGH);      // Schalte die LED an Pin 9 ein
        digitalWrite(10, LOW);      // Schalte die LED an Pin 10 aus
        digitalWrite(11, LOW);      // Schalte die LED an Pin 11 aus
    }

13. Um zwei LEDs zu beleuchten, wenn der Wert unter 1000 liegt, f√ºgen Sie eine weitere ``else if``-Bedingung wie folgt hinzu:

.. code-block:: Arduino
    :emphasize-lines: 10-14 
    
    if (potValue < 200) {         // Wenn potValue kleiner als 200 ist
        digitalWrite(9, LOW);       // Schalte die LED an Pin 9 aus
        digitalWrite(10, LOW);      // Schalte die LED an Pin 10 aus
        digitalWrite(11, LOW);      // Schalte die LED an Pin 11 aus
    } else if (potValue < 600) {  // Wenn potValue kleiner als 600 ist
        digitalWrite(9, HIGH);      // Schalte die LED an Pin 9 ein
        digitalWrite(10, LOW);      // Schalte die LED an Pin 10 aus
        digitalWrite(11, LOW);      // Schalte die LED an Pin 11 aus
    }
    else if (potValue < 1000) {  // Wenn potValue kleiner als 1000 ist
        digitalWrite(9, HIGH);     // Schalte die LED an Pin 9 ein
        digitalWrite(10, HIGH);    // Schalte die LED an Pin 10 ein
        digitalWrite(11, LOW);     // Schalte die LED an Pin 11 aus
    }    

14. Schlie√ülich √§ndern Sie die Befehle im ``else``-Block, um alle drei LEDs mit ``digitalWrite()`` einzuschalten. Dieser Block enth√§lt Befehle, die ausgef√ºhrt werden, wenn keine der anderen Bedingungen wahr ist. Mit anderen Worten: Wenn der ``potValue`` des Potentiometers gr√∂√üer oder gleich 1000 ist, werden die Befehle innerhalb von ``else {}`` ausgef√ºhrt. Ihr ``else``-Block sollte wie folgt aussehen:

.. code-block:: Arduino
    :emphasize-lines: 6-8 

    else if (potValue < 1000) {  // Wenn potValue kleiner als 1000 ist
        digitalWrite(9, HIGH);     // Schalte die LED an Pin 9 ein
        digitalWrite(10, HIGH);    // Schalte die LED an Pin 10 ein
        digitalWrite(11, LOW);     // Schalte die LED an Pin 11 aus
    } else {
        digitalWrite(9, HIGH);   // Schalte die LED an Pin 9 ein
        digitalWrite(10, HIGH);  // Schalte die LED an Pin 10 ein
        digitalWrite(11, HIGH);  // Schalte die LED an Pin 11 ein
    }

15. Ihr vollst√§ndiger Code lautet wie folgt. Klicken Sie auf "Upload", um den Code auf Ihr Arduino Uno R3 zu laden.

.. code-block:: Arduino

    int potValue = 0;  // Variable zur Speicherung des Potentiometerwerts

    void setup() {
        pinMode(9, OUTPUT);   // Konfiguriere Pin 9 als Ausgang
        pinMode(10, OUTPUT);  // Konfiguriere Pin 10 als Ausgang
        pinMode(11, OUTPUT);  // Konfiguriere Pin 11 als Ausgang
        Serial.begin(9600);   // Starte serielle Kommunikation mit 9600 Baud
    }

    void loop() {
        // Hauptcode, der wiederholt ausgef√ºhrt wird:
        potValue = analogRead(A0);    // Lese den Potentiometerwert
        Serial.print("Pot Value: ");  // Ausgabe des gelesenen Werts
        Serial.println(potValue);     // Drucke den Potentiometerwert
        delay(100);
        if (potValue < 200) {          // Wenn potValue kleiner als 200 ist
            digitalWrite(9, LOW);        // Schalte die LED an Pin 9 aus
            digitalWrite(10, LOW);       // Schalte die LED an Pin 10 aus
            digitalWrite(11, LOW);       // Schalte die LED an Pin 11 aus
        } else if (potValue < 600) {   // Wenn potValue kleiner als 600 ist
            digitalWrite(9, HIGH);       // Schalte die LED an Pin 9 ein
            digitalWrite(10, LOW);       // Schalte die LED an Pin 10 aus
            digitalWrite(11, LOW);       // Schalte die LED an Pin 11 aus
        } else if (potValue < 1000) {  // Wenn potValue kleiner als 1000 ist
            digitalWrite(9, HIGH);       // Schalte die LED an Pin 9 ein
            digitalWrite(10, HIGH);      // Schalte die LED an Pin 10 ein
            digitalWrite(11, LOW);       // Schalte die LED an Pin 11 aus
        } else {
            digitalWrite(9, HIGH);   // Schalte die LED an Pin 9 ein
            digitalWrite(10, HIGH);  // Schalte die LED an Pin 10 ein
            digitalWrite(11, HIGH);  // Schalte die LED an Pin 11 ein
        }
    }

16. Drehen Sie das Potentiometer, um zu √ºberpr√ºfen, ob das LED-Array wie erwartet funktioniert:

   - Wenn der Potentiometerwert unter 200 liegt, sollten alle LEDs aus sein.
   - Wenn der Wert zwischen 200 und 600 liegt, sollte die erste LED leuchten.
   - Wenn der Wert zwischen 600 und 1000 liegt, sollten die ersten beiden LEDs leuchten.
   - Wenn der Wert √ºber 1000 liegt, sollten alle LEDs leuchten.

**Frage**

Im Code bestimmen wir die Anzahl der LEDs, die basierend auf dem Wert des Potentiometers leuchten. Wie k√∂nnen wir den Code so √§ndern, dass sich w√§hrend des Leuchtens der LEDs deren Helligkeit entsprechend dem Potentiometerwert √§ndert?

**Zusammenfassung**

In dieser umfassenden Lektion haben Sie gelernt, ein interaktives LED-Display zu erstellen, das auf ein Potentiometer reagiert. Beginnend mit dem Aufbau der Schaltung haben Sie ein System zusammengebaut, das mehrere √ºber digitale Pins gesteuerte LEDs beinhaltet, die mit einem Potentiometer verbunden sind, das deren Zust√§nde basierend auf den gelesenen Werten anpasst. Schritt f√ºr Schritt haben Sie Ihren Arduino so programmiert, dass er verschiedene Beleuchtungsszenarien basierend auf bestimmten Potentiometer-Schwellenwerten steuert, was Ihr Verst√§ndnis f√ºr die Interaktion zwischen Hardware und Software vertieft.

Dieser Kurs hat Ihnen die F√§higkeiten vermittelt, effiziente bedingte Strukturen zu schreiben, die es Ihren Projekten erm√∂glichen, pr√§zise auf √Ñnderungen von Sensoreingaben zu reagieren. Durch das Experimentieren mit verschiedenen Bedingungen haben Sie aus erster Hand erfahren, wie die Reihenfolge und Struktur Ihres Codes die Ausgabe und Effizienz Ihrer elektronischen Projekte beeinflussen kann.


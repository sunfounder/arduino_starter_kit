.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder sur Facebook ! Plongez plus profond√©ment dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez vos probl√®mes apr√®s-vente et vos d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Recevez en avant-premi√®re des annonces de nouveaux produits.
    - **R√©ductions sp√©ciales** : B√©n√©ficiez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et √† des promotions sp√©ciales.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

15. Couleurs Chaudes ou Froides
====================================

Les couleurs ne sont pas seulement une partie de notre exp√©rience visuelle, elles influencent √©galement nos √©motions et nos sentiments. Dans cette le√ßon, nous explorerons les impacts psychologiques des couleurs et apprendrons √† manipuler une LED RGB pour basculer entre des couleurs chaudes et froides, imitant les effets de temp√©ratures lumineuses changeantes.

.. raw:: html

    <video muted controls style = "max-width:90%">
        <source src="_static/video/15_cool_warm_color.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

**Aper√ßu**

Le concept des couleurs chaudes et froides se r√©f√®re aux effets psychologiques que les couleurs ont sur notre perception. Les rouges, oranges, jaunes et bruns √©voquent g√©n√©ralement des sentiments de chaleur et d'excitation, les classant comme des couleurs chaudes. Inversement, les verts, bleus et violets apportent souvent des sentiments de calme et de fra√Æcheur, les faisant consid√©rer comme des couleurs froides. L'orange et le bleu se trouvent aux extr√©mit√©s oppos√©es de ce spectre chaud-froid.

.. image:: img/15_mix_color_warm_cool.png
    :width: 400
    :align: center

√Ä la maison ou dans les environnements de d√©tente, les gens pr√©f√®rent souvent des √©clairages dans des teintes de jaune clair ou de blanc cass√©, cr√©ant une atmosph√®re chaleureuse semblable √† la lumi√®re du coucher de soleil ou √† la lumi√®re des bougies.

.. image:: img/15_mix_color_warm_room.png
    :width: 400
    :align: center

Dans les biblioth√®ques, les salles de classe, les bureaux et les h√¥pitaux, des tons de lumi√®re plus froids sont favoris√©s car ils favorisent la concentration et la fra√Æcheur, ce qui est propice au travail et √† l'apprentissage.

.. image:: img/15_mix_color_cool_room.png
    :width: 400
    :align: center

La chaleur ou la fra√Æcheur de la lumi√®re est une exp√©rience visc√©rale qui affecte notre r√©ponse psychologique et notre confort visuel. Les designers et ing√©nieurs en √©clairage choisissent soigneusement les temp√©ratures de couleur adapt√©es √† la fonction d'un espace et √† l'ambiance souhait√©e, cr√©ant ainsi des environnements √† la fois esth√©tiques et pratiques. En appliquant ces principes de mani√®re scientifique, nous pouvons am√©liorer la qualit√© de nos environnements de vie et de travail, favorisant ainsi une atmosph√®re plus saine et confortable.

Dans cette le√ßon, nous allons jouer le r√¥le d'ing√©nieurs en √©clairage pour cr√©er un syst√®me capable de basculer entre diff√©rentes temp√©ratures de couleur.

**Objectifs d'apprentissage**

- Comprendre les effets psychologiques des couleurs chaudes et froides.
- Explorer comment les temp√©ratures lumineuses affectent l'humeur et l'ambiance.
- Apprendre √† ajuster les couleurs d'une LED RGB pour simuler diff√©rentes temp√©ratures √† l'aide d'Arduino.
- D√©velopper des comp√©tences pratiques en utilisant la fonction ``map()`` pour passer d'une temp√©rature de couleur √† une autre.

Montage du circuit
------------------------

**Composants n√©cessaires**

.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * LED RGB
     - 3 * R√©sistances de 220Œ©
     - 1 * Potentiom√®tre
   * - |list_uno_r3| 
     - |list_rgb_led| 
     - |list_220ohm| 
     - |list_potentiometer| 
   * - 1 * C√¢ble USB
     - 1 * Plaque d'essai (breadboard)
     - Fils de connexion
     - 
   * - |list_usb_cable| 
     - |list_breadboard| 
     - |list_wire| 
     - 

**√âtapes de montage**

Ce circuit est une extension de celui de la le√ßon 12 en y ajoutant un potentiom√®tre.

.. image:: img/15_cool_warm_color.png
    :width: 500
    :align: center

1. Retirez le fil reliant la broche GND de l'Arduino Uno R3 √† la broche GND de la LED RGB, puis ins√©rez-le dans la borne n√©gative de la plaque d'essai. Connectez ensuite un fil entre la borne n√©gative et la broche GND de la LED RGB.

.. image:: img/15_cool_warm_color_gnd.png
    :width: 500
    :align: center

2. Ins√©rez le potentiom√®tre dans les trous 25G, 26F et 27G.

.. image:: img/15_cool_warm_color_pot.png
    :width: 500
    :align: center

3. Connectez la broche centrale du potentiom√®tre √† la broche A0 de l'Arduino Uno R3.

.. image:: img/15_cool_warm_color_a0.png
    :width: 500
    :align: center

4. Enfin, connectez la broche gauche du potentiom√®tre √† la broche 5V de l'Arduino Uno R3 et la broche droite √† la borne n√©gative de la plaque d'essai.

.. image:: img/15_cool_warm_color.png
    :width: 500
    :align: center

Cr√©ation du code
----------------------

**Comprendre les couleurs chaudes et froides**

Avant d'ajuster la temp√©rature de couleur, nous devons comprendre les diff√©rences entre les valeurs RGB pour les couleurs chaudes et froides.

La perception de la chaleur dans l'√©clairage est quelque peu subjective, mais il est ind√©niable que les couleurs chaudes doivent tendre vers l'orange-rouge, tandis que les couleurs froides doivent tirer vers le bleu.

1. Ouvrez **Paint** ou tout autre outil de s√©lection de couleurs, trouvez les couleurs que vous consid√©rez comme les plus chaudes et les plus froides, et notez leurs valeurs RGB dans votre cahier.

.. note::

    Avant de s√©lectionner une couleur, ajustez les lumens √† la position appropri√©e.

.. list-table::
   :widths: 25 25 50 25
   :header-rows: 1

   * - Type de couleur
     - Rouge
     - Vert
     - Bleu
   * - Couleur chaude
     - 
     - 
     - 
   * - Couleur froide
     - 
     - 
     - 

2. Voici des exemples de tons chauds et froids avec leurs valeurs RGB :

* Rouge (Rouge : 246, Vert : 52, Bleu : 8)

.. image:: img/15_mix_color_tone_warm.png

* Bleu clair (Rouge : 100, Vert : 150, Bleu : 255)

.. image:: img/15_mix_color_tone_cool.png

La principale diff√©rence entre les couleurs chaudes et froides r√©side dans le rapport des intensit√©s des trois couleurs primaires. Ensuite, nous allons stocker ces valeurs RGB dans notre sketch.

3. Ouvrez le sketch que vous avez enregistr√© pr√©c√©demment, ``Lesson13_PWM_Color_Mixing``.

4. Cliquez sur ¬´¬†Enregistrer sous...¬†¬ª dans le menu ¬´¬†Fichier¬†¬ª, et renommez-le en ``Lesson15_Cool_Warm_Color``. Cliquez sur "Enregistrer".

5. Avant la fonction ``void setup()``, d√©clarez six variables pour stocker les valeurs RGB de ces deux couleurs. Utilisez les couleurs que vous avez s√©lectionn√©es.

.. code-block:: Arduino
    :emphasize-lines: 1-4,6-9

    // Valeurs RGB pour une couleur chaude
    int warm_r = 246;
    int warm_g = 52;
    int warm_b = 8;

    // Valeurs RGB pour une couleur froide
    int cool_r = 100;
    int cool_g = 150;
    int cool_b = 255;

    void setup() {
        // Configuration initiale √† ex√©cuter une seule fois :
        pinMode(9, OUTPUT);   // Configurer la broche bleue de la LED RGB comme sortie
        pinMode(10, OUTPUT);  // Configurer la broche verte de la LED RGB comme sortie
        pinMode(11, OUTPUT);  // Configurer la broche rouge de la LED RGB comme sortie
    }

**Utilisation de la fonction map()**

Pour passer de l‚Äô√©clairage chaud √† l‚Äô√©clairage froid, il suffit de r√©duire l‚Äôintensit√© de la lumi√®re rouge, d‚Äôaugmenter celle de la lumi√®re bleue et d‚Äôajuster finement l‚Äôintensit√© de la lumi√®re verte.

Dans les projets pr√©c√©dents, nous avons appris √† faire varier la luminosit√© de la LED en fonction de la rotation du potentiom√®tre.

Cependant, dans ce projet, la rotation du potentiom√®tre modifie l'intensit√© des broches RGB dans une plage sp√©cifique, ce qui rend la simple division inad√©quate pour nos besoins. C'est pourquoi nous avons besoin de la fonction ``map()``.

En programmation Arduino, la fonction ``map()`` est tr√®s utile car elle permet de convertir une plage de nombres en une autre.

Voici comment l'utiliser :

* ``map(value, fromLow, fromHigh, toLow, toHigh)`` : Re-map une valeur d'une plage de nombres √† une autre. Par exemple, une valeur de ``fromLow`` sera mapp√©e √† ``toLow``, une valeur de ``fromHigh`` sera mapp√©e √† ``toHigh``, et les valeurs interm√©diaires seront mapp√©es en cons√©quence.

    **Param√®tres**
        * ``value`` : le nombre √† mapper.
        * ``fromLow`` : la borne inf√©rieure de la plage actuelle de ``value``.
        * ``fromHigh`` : la borne sup√©rieure de la plage actuelle de ``value``.
        * ``toLow`` : la borne inf√©rieure de la plage cible.
        * ``toHigh`` : la borne sup√©rieure de la plage cible.

    **Retourne**
        La valeur remapp√©e. Type de donn√©e : long.

La fonction ``map()`` ajuste une valeur d'une plage donn√©e (de fromLow √† fromHigh) √† une nouvelle plage (de toLow √† toHigh). Elle calcule d'abord la position de ``value`` dans sa plage d'origine, puis applique la m√™me proportion pour l'adapter √† la nouvelle plage.

.. image:: img/15_map_pic.png
    :width: 400
    :align: center

Ainsi, cela peut √™tre repr√©sent√© par la formule suivante :

.. code-block::

    (value-fromLow)/(fromHigh-fromLow) = (y-toLow)/(toHigh-toLow)

En utilisant l'alg√®bre, vous pouvez r√©arranger cette √©quation pour r√©soudre ``y`` :

.. code-block::

    y = (value-fromLow) * (toHigh-toLow) / (fromHigh-fromLow) + toLow

.. image:: img/15_map_format.png

Par exemple, en utilisant ``y = map(value, 0, 1023, 246, 100);``, si ``value`` est √©gal √† 434, alors ``y = (434-0) * (100 - 246) / (1023-0) + 246``, ce qui √©quivaut approximativement √† 152.


6. Supprimez le code d'origine dans ``void loop()``, puis √©crivez un code pour lire la valeur du potentiom√®tre et la stocker dans la variable ``potValue``.

.. code-block:: Arduino

    void loop() {
        // Code principal √† ex√©cuter en boucle :
        int potValue = analogRead(A0);                         // Lire la valeur du potentiom√®tre
    }

7. Ensuite, utilisez la fonction ``map()`` pour mapper la valeur du potentiom√®tre de la plage 0~1023 √† la plage 255 (``warm_r``) ~ 100 (``cool_r``).

.. code-block:: Arduino

    void loop() {
        // Code principal √† ex√©cuter en boucle :
        int potValue = analogRead(A0);                         // Lire la valeur du potentiom√®tre
        int value_r = map(potValue, 0, 1023, warm_r, cool_r);  // Mapper la valeur du potentiom√®tre √† l'intensit√© rouge
    }

8. Vous pouvez utiliser le moniteur s√©rie pour afficher la ``potValue`` et la valeur mapp√©e ``value_r`` pour approfondir votre compr√©hension de la fonction ``map()``. Activez maintenant le moniteur s√©rie dans ``void setup()``.

.. code-block:: Arduino
    :emphasize-lines: 6

    void setup() {
        // Configuration initiale √† ex√©cuter une seule fois :
        pinMode(9, OUTPUT);   // Configurer la broche bleue de la LED RGB comme sortie
        pinMode(10, OUTPUT);  // Configurer la broche verte de la LED RGB comme sortie
        pinMode(11, OUTPUT);  // Configurer la broche rouge de la LED RGB comme sortie
        Serial.begin(9600);   // Configurer la communication s√©rie √† 9600 bauds
    }

9. Affichez les variables ``potValue`` et ``value_r`` sur la m√™me ligne, s√©par√©es par un "|".

.. code-block:: Arduino
    :emphasize-lines: 23-26

    // Valeurs RGB pour une couleur chaude
    int warm_r = 246;
    int warm_g = 52;
    int warm_b = 8;

    // Valeurs RGB pour une couleur froide
    int cool_r = 100;
    int cool_g = 150;
    int cool_b = 255;

    void setup() {
        // Configuration initiale √† ex√©cuter une seule fois :
        pinMode(9, OUTPUT);   // Configurer la broche bleue de la LED RGB comme sortie
        pinMode(10, OUTPUT);  // Configurer la broche verte de la LED RGB comme sortie
        pinMode(11, OUTPUT);  // Configurer la broche rouge de la LED RGB comme sortie
        Serial.begin(9600);   // Configurer la communication s√©rie √† 9600 bauds
    }

    void loop() {
        // Code principal √† ex√©cuter en boucle :
        int potValue = analogRead(A0);                         // Lire la valeur du potentiom√®tre
        int value_r = map(potValue, 0, 1023, warm_r, cool_r);  // Mapper la valeur du potentiom√®tre √† l'intensit√© rouge
        Serial.print(potValue);
        Serial.print(" | ");
        Serial.println(value_r);
        delay(500);  // Attendre 500ms
    }

    // Fonction pour r√©gler la couleur de la LED RGB
    void setColor(int red, int green, int blue) {
        analogWrite(11, red);    // Appliquer la PWM √† la broche rouge
        analogWrite(10, green);  // Appliquer la PWM √† la broche verte
        analogWrite(9, blue);    // Appliquer la PWM √† la broche bleue
    }

10. Vous pouvez maintenant v√©rifier et t√©l√©verser votre code, ouvrir le moniteur s√©rie, et vous verrez deux colonnes de donn√©es imprim√©es.

.. code-block::

    434 | 152
    435 | 152
    434 | 152
    434 | 152
    434 | 152
    434 | 152

√Ä partir des donn√©es, il est √©vident que la position de la valeur 434 dans la plage 0~1023 correspond √† la position de 152 dans la plage 246~100.

**Ajuster la temp√©rature de couleur**

Ici, nous utilisons la fonction ``map()`` pour ajuster l'intensit√© des trois broches 
de la LED RGB en fonction de la rotation du potentiom√®tre, passant des teintes les plus 
chaudes aux plus froides. Plus pr√©cis√©ment, avec les valeurs de r√©f√©rence fournies, 
lorsque le potentiom√®tre est tourn√©, la valeur R de la LED RGB passera progressivement 
de 246 √† 100, la valeur G de 8 √† 150 (bien que le changement de la valeur G ne soit 
pas tr√®s visible), et la valeur B de 8 √† 255.

11. Ensuite, nous n'avons plus besoin de l'impression s√©rie temporairement, et l'impression 
s√©rie peut affecter l'ensemble du processus du code, alors utilisez ``Ctrl + /`` pour commenter le code concern√©.

    .. note::

        La raison pour ne pas supprimer directement est que si vous devez imprimer ult√©rieurement, vous n'aurez pas besoin de r√©√©crire le code ; il suffit de s√©lectionner ces lignes et d'appuyer sur ``Ctrl+/`` pour les d√©commenter.

.. code-block:: Arduino
    :emphasize-lines: 3,4

    void loop() {
        // code principal √† ex√©cuter en boucle :
        int potValue = analogRead(A0);                         // Lire la valeur du potentiom√®tre
        int value_r = map(potValue, 0, 1023, warm_r, cool_r);  // Mapper la valeur du potentiom√®tre √† l'intensit√© rouge
        // Serial.print(potValue);
        // Serial.print(" | ");
        // Serial.println(value_r);
        // delay(500);  // Attendre 500ms
    }

12. Continuez √† appeler la fonction ``map()``, pour obtenir les valeurs mapp√©es ``value_g`` et ``value_b`` en fonction de la valeur du potentiom√®tre.

.. code-block:: Arduino
    :emphasize-lines: 9,10

    void loop() {
        // put your main code here, to run repeatedly:
        int potValue = analogRead(A0);                         // Read value from potentiometer
        int value_r = map(potValue, 0, 1023, warm_r, cool_r);  // Map pot value to red intensity
        // Serial.print(potValue);
        // Serial.print(" | ");
        // Serial.println(value_r);
        // delay(500);  // Wait for 500ms
        int value_g = map(potValue, 0, 1023, warm_g, cool_g);  // Map pot value to green intensity
        int value_b = map(potValue, 0, 1023, warm_b, cool_b);  // Map pot value to blue intensity
    }

13. Enfin, appelez la fonction ``setColor()`` pour afficher les valeurs RGB mapp√©es sur la LED RGB.

.. code-block:: Arduino
    :emphasize-lines: 11,12

    void loop() {
        // put your main code here, to run repeatedly:
        int potValue = analogRead(A0);                         // Read value from potentiometer
        int value_r = map(potValue, 0, 1023, warm_r, cool_r);  // Map pot value to red intensity
        // Serial.print(potValue);
        // Serial.print(" | ");
        // Serial.println(value_r);
        // delay(500);  // Wait for 500ms
        int value_g = map(potValue, 0, 1023, warm_g, cool_g);  // Map pot value to green intensity
        int value_b = map(potValue, 0, 1023, warm_b, cool_b);  // Map pot value to blue intensity
        setColor(value_r, value_g, value_b);                   // Set LED color
        delay(500);
    }

14. Votre code complet est le suivant ; vous pouvez cliquer sur le bouton T√©l√©verser pour transf√©rer le code sur l'Arduino Uno R3. Ensuite, vous pourrez tourner le potentiom√®tre et vous remarquerez que la LED RGB passe progressivement d'une teinte froide √† une teinte chaude, ou d'une teinte chaude √† une teinte froide.

.. code-block:: Arduino

    // Valeurs RGB pour une couleur chaude
    int warm_r = 246;
    int warm_g = 52;
    int warm_b = 8;

    // Valeurs RGB pour une couleur froide
    int cool_r = 100;
    int cool_g = 150;
    int cool_b = 255;

    void setup() {
        // put your setup code here, to run once:
        pinMode(9, OUTPUT);   // Set Blue pin of RGB LED as output
        pinMode(10, OUTPUT);  // Set Green pin of RGB LED as output
        pinMode(11, OUTPUT);  // Set Red pin of RGB LED as output
    }

    void loop() {
        // put your main code here, to run repeatedly:
        int potValue = analogRead(A0);                         // Read value from potentiometer
        int value_r = map(potValue, 0, 1023, warm_r, cool_r);  // Map pot value to red intensity
        // Serial.print(potValue);
        // Serial.print(" | ");
        // Serial.println(value_r);
        // delay(500);  // Wait for 500ms
        int value_g = map(potValue, 0, 1023, warm_g, cool_g);  // Map pot value to green intensity
        int value_b = map(potValue, 0, 1023, warm_b, cool_b);  // Map pot value to blue intensity
        setColor(value_r, value_g, value_b);                   // Set LED color
        delay(500);                                            // Wait for 500ms
    }

    // Function to set the color of the RGB LED
    void setColor(int red, int green, int blue) {
        analogWrite(11, red);    // Write PWM to red pin
        analogWrite(10, green);  // Write PWM to green pin
        analogWrite(9, blue);    // Write PWM to blue pin
    }

15. Enfin, n'oubliez pas de sauvegarder votre code et de ranger votre espace de travail.

**Conseils**

Pendant l'exp√©rience, vous pourriez remarquer que la transition entre les teintes chaudes et froides n'est pas aussi apparente qu'√† l'√©cran ; par exemple, une lumi√®re cens√©e √™tre chaude peut sembler blanche. C'est normal, car le m√©lange des couleurs dans une LED RGB n'est pas aussi pr√©cis que sur un √©cran.

Dans ce cas, vous pouvez r√©duire l'intensit√© des valeurs G et B dans la couleur chaude pour que la LED RGB affiche une couleur plus appropri√©e.

**Question**

Notez que les "bornes inf√©rieures" de chaque plage peuvent √™tre plus grandes ou plus petites que les "bornes sup√©rieures", donc la fonction ``map(value, fromLow, fromHigh, toLow, toHigh)`` peut √™tre utilis√©e pour inverser une plage de nombres, par exemple :

.. code-block::

    y = map(x, 1, 50, 50, 1);

La fonction g√®re √©galement bien les nombres n√©gatifs, de sorte que cet exemple est √©galement valide et fonctionne bien.

.. code-block::

    y = map(x, 1, 50, 50, -100);

Pour ``y = map(x, 1, 50, 50, -100);``, si ``x`` est √©gal √† 20, quelle devrait √™tre la valeur de ``y`` ? R√©f√©rez-vous √† la formule suivante pour le calculer.

.. image:: img/15_map_format.png


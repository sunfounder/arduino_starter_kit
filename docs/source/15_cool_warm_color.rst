.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Community auf Facebook! Tauche tiefer in Raspberry Pi, Arduino und ESP32 ein, gemeinsam mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂se nach dem Kauf auftretende Probleme und technische Herausforderungen mit Hilfe unserer Community und unseres Teams.
    - **Lernen & Teilen**: Tausche Tipps und Tutorials aus, um deine F√§higkeiten zu erweitern.
    - **Exklusive Vorschauen**: Erhalte fr√ºhzeitig Informationen √ºber neue Produkte und Vorschauen.
    - **Spezielle Rabatte**: Genie√üe exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Verlosungen**: Nimm an Gewinnspielen und Sonderaktionen zu Feiertagen teil.

    üëâ Bereit, mit uns zu experimentieren und zu gestalten? Klicke auf [|link_sf_facebook|] und tritt noch heute bei!

15. Warme oder k√ºhle Farben
====================================

Farben sind nicht nur Teil unserer visuellen Erfahrung ‚Äì sie beeinflussen auch unsere Emotionen und Gef√ºhle. In dieser Lektion befassen wir uns mit den psychologischen Auswirkungen von Farben und lernen, wie man eine RGB-LED zwischen warmen und k√ºhlen Farben wechseln l√§sst, um die Effekte wechselnder Lichttemperaturen nachzuahmen.

.. raw:: html

    <video muted controls style = "max-width:90%">
        <source src="_static/video/15_cool_warm_color.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

**√úberblick**

Das Konzept von warmen und k√ºhlen Farben bezieht sich auf die psychologischen Wirkungen, die Farben auf unsere Wahrnehmung haben. Rott√∂ne, Oranget√∂ne, Gelb- und Braunt√∂ne rufen in der Regel Gef√ºhle von W√§rme und Aufregung hervor und werden als warme Farben eingestuft. Im Gegensatz dazu vermitteln Gr√ºn-, Blau- und Violettt√∂ne oft beruhigende, erfrischende und weite Gef√ºhle, was sie zu k√ºhlen Farben macht. Orange und Blau stehen dabei an den entgegengesetzten Enden dieses W√§rme-K√§lte-Spektrums.

.. image:: img/15_mix_color_warm_cool.png
    :width: 400
    :align: center

Zuhause oder in Freizeitumgebungen bevorzugen Menschen oft Licht in hellen Gelb- oder Wei√üt√∂nen, die eine gem√ºtliche Atmosph√§re schaffen, √§hnlich dem Licht bei Sonnenuntergang oder Kerzenschein.

.. image:: img/15_mix_color_warm_room.png
    :width: 400
    :align: center

In Bibliotheken, Klassenzimmern, B√ºros und Krankenh√§usern werden k√ºhlere Lichtt√∂ne bevorzugt, da sie die Konzentration f√∂rdern und Frische ausstrahlen ‚Äì ideal f√ºr Lern- und Arbeitsumgebungen.

.. image:: img/15_mix_color_cool_room.png
    :width: 400
    :align: center

Die W√§rme oder K√ºhle des Lichts ist eine sp√ºrbare Erfahrung, die unsere psychologische Reaktion und unseren visuellen Komfort beeinflusst. Designer und Lichtingenieure w√§hlen sorgf√§ltig Farbtemperaturen aus, die der Funktion eines Raums und der gew√ºnschten Atmosph√§re entsprechen, um sowohl √§sthetisch ansprechende als auch funktionale Beleuchtungsumgebungen zu schaffen. Durch die wissenschaftliche Anwendung dieser Prinzipien k√∂nnen wir die Qualit√§t unserer Lebens- und Arbeitsumgebungen verbessern und eine ges√ºndere und angenehmere Atmosph√§re schaffen.

In dieser Lektion √ºbernehmen wir die Rolle von Lichttechnikern und entwickeln ein Beleuchtungssystem, das zwischen verschiedenen Farbtemperaturen wechseln kann.

**Lernziele**

- Verstehen der psychologischen Wirkungen von k√ºhlen und warmen Farben.
- Erforschen, wie Lichttemperaturen die Stimmung und Umgebung beeinflussen.
- Lernen, wie RGB-LED-Farben mit Arduino angepasst werden, um verschiedene Lichttemperaturen zu simulieren.
- Praktische Fertigkeiten im Umgang mit der ``map()``-Funktion zur √úbergangsgestaltung zwischen Farbtemperaturen entwickeln.


Aufbau der Schaltung
------------------------------------

**Ben√∂tigte Komponenten**


.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * RGB-LED
     - 3 * 220Œ© Widerstand
     - 1 * Potentiometer
   * - |list_uno_r3| 
     - |list_rgb_led| 
     - |list_220ohm| 
     - |list_potentiometer| 
   * - 1 * USB-Kabel
     - 1 * Steckbrett
     - Jumper-Kabel
     -
   * - |list_usb_cable| 
     - |list_breadboard| 
     - |list_wire| 
     -
     
**Aufbauschritte**

Diese Schaltung baut auf der aus Lektion 12 auf und f√ºgt ein Potentiometer hinzu.

.. image:: img/15_cool_warm_color.png
    :width: 500
    :align: center

1. Entferne das Jumper-Kabel, das den GND-Pin des Arduino Uno R3 mit dem GND-Pin der RGB-LED verbindet, und stecke es in den negativen Anschluss des Steckbretts. Verbinde dann ein Jumper-Kabel vom negativen Anschluss zum GND-Pin der RGB-LED.

.. image:: img/15_cool_warm_color_gnd.png
    :width: 500
    :align: center

2. Stecke das Potentiometer in die L√∂cher 25G, 26F und 27G.

.. image:: img/15_cool_warm_color_pot.png
    :width: 500
    :align: center

3. Verbinde den mittleren Pin des Potentiometers mit dem A0-Pin des Arduino Uno R3.

.. image:: img/15_cool_warm_color_a0.png
    :width: 500
    :align: center

4. Verbinde schlie√ülich den linken Pin des Potentiometers mit dem 5V-Pin des Arduino Uno R3 und den rechten Pin mit dem negativen Anschluss des Steckbretts.

.. image:: img/15_cool_warm_color.png
    :width: 500
    :align: center



Erstellung des Codes
-------------------------

**Warme und k√ºhle Farben verstehen**

Bevor wir die Farbtemperatur anpassen, m√ºssen wir die Unterschiede zwischen den RGB-Werten f√ºr k√ºhle und warme Farben verstehen.

Die Wahrnehmung von W√§rme in der Beleuchtung ist zwar subjektiv, doch eindeutig sollten warme Farben in Richtung Orange-Rot tendieren, w√§hrend k√ºhle Farben eher in Richtung Blau gehen.

1. √ñffne **Paint** oder ein beliebiges Farbwahlwerkzeug, finde die w√§rmsten und k√ºhlsten Farben, die du dir vorstellen kannst, und notiere ihre RGB-Werte in deinem Notizbuch.
.. note::

    Beachten Sie, dass Sie vor der Auswahl einer Farbe die Lumen auf die richtige Position einstellen sollten.

.. list-table::
   :widths: 25 25 50 25
   :header-rows: 1

   * - Farbtyp
     - Rot
     - Gr√ºn
     - Blau
   * - Warme Farbe
     -
     -
     -
   * - K√ºhle Farbe
     -
     -
     -

2. Hier sind Beispiele f√ºr warme und k√ºhle Farbt√∂ne zusammen mit ihren RGB-Werten:

* Rot (Rot: 246, Gr√ºn: 52, Blau: 8)

.. image:: img/15_mix_color_tone_warm.png

* Hellblau (Rot: 100, Gr√ºn: 150, Blau: 255)

.. image:: img/15_mix_color_tone_cool.png

Der Hauptunterschied zwischen warmen und k√ºhlen Farben ist das Verh√§ltnis der Intensit√§ten der drei Prim√§rfarben. Als N√§chstes speichern wir diese warmen und k√ºhlen RGB-Werte in unserem Sketch.

3. √ñffnen Sie den Sketch, den Sie zuvor gespeichert haben, ``Lesson13_PWM_Color_Mixing``.

4. W√§hlen Sie ‚ÄûSpeichern unter...‚Äú im ‚ÄûDatei‚Äú-Men√º und benennen Sie ihn in ``Lesson15_Cool_Warm_Color`` um. Klicken Sie auf ‚ÄûSpeichern‚Äú.

5. Deklarieren Sie vor dem ``void setup()`` sechs Variablen, um die RGB-Werte f√ºr diese beiden Farben zu speichern. Verwenden Sie die von Ihnen ausgew√§hlten Farben.

.. code-block:: Arduino
    :emphasize-lines: 1-4,6-9

    // RGB-Werte f√ºr eine warme Farbe
    int warm_r = 246;
    int warm_g = 52;
    int warm_b = 8;

    // RGB-Werte f√ºr eine k√ºhle Farbe
    int cool_r = 100;
    int cool_g = 150;
    int cool_b = 255;

    void setup() {
        // Setup-Code, der einmal ausgef√ºhrt wird:
        pinMode(9, OUTPUT);   // Blauen Pin der RGB-LED als Ausgang festlegen
        pinMode(10, OUTPUT);  // Gr√ºnen Pin der RGB-LED als Ausgang festlegen
        pinMode(11, OUTPUT);  // Roten Pin der RGB-LED als Ausgang festlegen
    }

**Die map() Funktion verwenden**

Um von warmer zu k√ºhler Beleuchtung zu wechseln, m√ºssen Sie lediglich die Intensit√§t des roten Lichts reduzieren, das blaue Licht verst√§rken und die Intensit√§t des gr√ºnen Lichts feinjustieren.

In fr√ºheren Projekten haben wir gelernt, wie man die Helligkeit der LED abh√§ngig von der Drehung eines Potentiometers ver√§ndert.

In diesem Projekt f√ºhrt jedoch die Drehung des Potentiometers dazu, dass sich die Intensit√§ten der RGB-Pins innerhalb eines bestimmten Bereichs √§ndern, was einfache Division unzureichend macht. Daher ben√∂tigen wir eine neue Funktion, ``map()``.

In der Arduino-Programmierung ist die ``map()``-Funktion √§u√üerst n√ºtzlich, da sie es Ihnen erm√∂glicht, einen Zahlenbereich auf einen anderen Bereich zu √ºbertragen (oder zu "mappen").

So wird sie verwendet:

* ``map(value, fromLow, fromHigh, toLow, toHigh)``: Ordnet eine Zahl von einem Bereich einem anderen zu. Ein Wert von ``fromLow`` wird auf ``toLow`` abgebildet, ein Wert von ``fromHigh`` auf ``toHigh``, und Werte dazwischen entsprechend.

    **Parameter**
        * ``value``: die Zahl, die abgebildet werden soll.
        * ``fromLow``: die untere Grenze des aktuellen Bereichs des Wertes.
        * ``fromHigh``: die obere Grenze des aktuellen Bereichs des Wertes.
        * ``toLow``: die untere Grenze des Zielbereichs.
        * ``toHigh``: die obere Grenze des Zielbereichs.

    **R√ºckgabewert**
        Der abgebildete Wert. Datentyp: long.

Die ``map()``-Funktion skaliert einen Wert von seinem urspr√ºnglichen Bereich (fromLow bis fromHigh) auf einen neuen Bereich (toLow bis toHigh). Zuerst wird die Position des ``value`` innerhalb seines urspr√ºnglichen Bereichs berechnet, dann wird diese Position proportional auf den neuen Bereich √ºbertragen.

.. image:: img/15_map_pic.png
    :width: 400
    :align: center

So kann sie mit der unten gezeigten Formel geschrieben werden:

.. code-block::

    (value-fromLow)/(fromHigh-fromLow) = (y-toLow)/(toHigh-toLow)

Mit Algebra k√∂nnen Sie diese Gleichung umstellen, um ``y`` zu berechnen:

.. code-block::

    y = (value-fromLow) * (toHigh-toLow) / (fromHigh-fromLow) + toLow

.. image:: img/15_map_format.png

Beispielsweise ergibt ``y = map(value, 0, 1023, 246, 100);``, wenn ``value`` 434 betr√§gt, ``y = (434-0) * (100 - 246) / (1023-0) + 246``, was ungef√§hr 152 ergibt.


6. Entfernen Sie den urspr√ºnglichen Code in ``void loop()``, und schreiben Sie dann den Code, um den Potentiometerwert auszulesen und ihn in der Variablen ``potValue`` zu speichern.

.. code-block:: Arduino

    void loop() {
        // Hauptcode, der wiederholt ausgef√ºhrt wird:
        int potValue = analogRead(A0);                         // Wert des Potentiometers auslesen
    }

7. Verwenden Sie dann die ``map()``-Funktion, um den Potentiometerwert von 0~1023 auf den Bereich 255 (``warm_r``) ~ 100 (``cool_r``) zu mappen.

.. code-block:: Arduino

    void loop() {
        // Hauptcode, der wiederholt ausgef√ºhrt wird:
        int potValue = analogRead(A0);                         // Wert des Potentiometers auslesen
        int value_r = map(potValue, 0, 1023, warm_r, cool_r);  // Potentiometerwert auf Rot-Intensit√§t mappen
    }

8. Sie k√∂nnen den seriellen Monitor verwenden, um den ``potValue`` und den gemappten Wert ``value_r`` anzuzeigen, um Ihr Verst√§ndnis der ``map()``-Funktion zu vertiefen. Starten Sie nun den seriellen Monitor in ``void setup()``.

.. code-block:: Arduino
    :emphasize-lines: 6

    void setup() {
        // Setup-Code, der einmal ausgef√ºhrt wird:
        pinMode(9, OUTPUT);   // Blauen Pin der RGB-LED als Ausgang festlegen
        pinMode(10, OUTPUT);  // Gr√ºnen Pin der RGB-LED als Ausgang festlegen
        pinMode(11, OUTPUT);  // Roten Pin der RGB-LED als Ausgang festlegen
        Serial.begin(9600);        // Serielle Kommunikation mit 9600 Baudrate starten
    }

9. Gib die Variablen ``potValue`` und ``value_r`` in derselben Zeile aus, getrennt durch ein "|".

.. code-block:: Arduino
    :emphasize-lines: 23-26

    // RGB-Werte f√ºr eine warme Farbe
    int warm_r = 246;
    int warm_g = 52;
    int warm_b = 8;

    // RGB-Werte f√ºr eine k√ºhle Farbe
    int cool_r = 100;
    int cool_g = 150;
    int cool_b = 255;

    void setup() {
        // Einmalige Initialisierung des Systems:
        pinMode(9, OUTPUT);   // Setzt den blauen Pin der RGB-LED als Ausgang
        pinMode(10, OUTPUT);  // Setzt den gr√ºnen Pin der RGB-LED als Ausgang
        pinMode(11, OUTPUT);  // Setzt den roten Pin der RGB-LED als Ausgang
        Serial.begin(9600);        // Seriellen Kommunikationskanal mit 9600 Baudrate einrichten
    }

    void loop() {
        // Hauptcode, der wiederholt ausgef√ºhrt wird:
        int potValue = analogRead(A0);                         // Wert des Potentiometers lesen
        int value_r = map(potValue, 0, 1023, warm_r, cool_r);  // Potentiometerwert auf Rot-Intensit√§t abbilden
        Serial.print(potValue);
        Serial.print(" | ");
        Serial.println(value_r);
        delay(500);  // 500 ms warten
    }

    // Funktion, um die Farbe der RGB-LED festzulegen
    void setColor(int red, int green, int blue) {
        analogWrite(11, red);    // PWM-Wert auf den roten Pin schreiben
        analogWrite(10, green);  // PWM-Wert auf den gr√ºnen Pin schreiben
        analogWrite(9, blue);    // PWM-Wert auf den blauen Pin schreiben
    }

10. Nun k√∂nnen Sie den Code verifizieren und hochladen, den seriellen Monitor √∂ffnen, und Sie werden zwei Spalten mit gedruckten Daten sehen.

.. code-block::

    434 | 152
    435 | 152
    434 | 152
    434 | 152
    434 | 152
    434 | 152

An den Daten ist erkennbar, dass die Position des Wertes 434 im Bereich von 0 bis 1023 der Position des Wertes 152 im Bereich von 246 bis 100 entspricht.


**Anpassung der Farbtemperatur**

Hier verwenden wir die Funktion ``map()``, um die Intensit√§t der drei Pins der RGB-LED durch Drehen des Potentiometers zu ver√§ndern, sodass die Farben von den w√§rmsten zu den k√§ltesten T√∂nen √ºbergehen.
Konkret wird im Beispiel mit den von mir angegebenen Referenzwerten beim Drehen des Potentiometers der R-Wert der RGB-LED allm√§hlich von 246 auf 100 ge√§ndert, der G-Wert von 8 auf 150 (obwohl die Ver√§nderung des G-Werts kaum sichtbar ist) und der B-Wert allm√§hlich von 8 auf 255.


11. Als n√§chstes ben√∂tigen wir die serielle Ausgabe vor√ºbergehend nicht, da diese den gesamten Codeprozess beeinflussen kann. Verwenden Sie daher ``Ctrl +/``, um den entsprechenden Code auszukommentieren.

    .. note::

        Der Grund, warum wir den Code nicht direkt l√∂schen, ist, dass Sie bei Bedarf die Ausgabe einfach wieder aktivieren k√∂nnen, indem Sie die Zeilen markieren und mit ``Ctrl+/`` auskommentieren.

.. code-block:: Arduino
    :emphasize-lines: 3,4

    void loop() {
        // Hauptcode, der wiederholt ausgef√ºhrt wird:
        int potValue = analogRead(A0);                         // Wert des Potentiometers lesen
        int value_r = map(potValue, 0, 1023, warm_r, cool_r);  // Potentiometerwert auf Rot-Intensit√§t abbilden
        // Serial.print(potValue);
        // Serial.print(" | ");
        // Serial.println(value_r);
        // delay(500);  // 500 ms warten
    }

12. Fahren Sie fort, die Funktion ``map()`` aufzurufen, um basierend auf dem Potentiometerwert die zugeordneten ``value_g`` und ``value_b`` zu erhalten.

.. code-block:: Arduino
    :emphasize-lines: 9,10

    void loop() {
        // Hauptcode, der wiederholt ausgef√ºhrt wird:
        int potValue = analogRead(A0);                         // Wert des Potentiometers lesen
        int value_r = map(potValue, 0, 1023, warm_r, cool_r);  // Potentiometerwert auf Rot-Intensit√§t abbilden
        // Serial.print(potValue);
        // Serial.print(" | ");
        // Serial.println(value_r);
        // delay(500);  // 500 ms warten
        int value_g = map(potValue, 0, 1023, warm_g, cool_g);  // Potentiometerwert auf Gr√ºn-Intensit√§t abbilden
        int value_b = map(potValue, 0, 1023, warm_b, cool_b);  // Potentiometerwert auf Blau-Intensit√§t abbilden
    }

13. Rufe abschlie√üend die Funktion ``setColor()`` auf, um die abgebildeten RGB-Werte auf der RGB-LED anzuzeigen.

.. code-block:: Arduino
    :emphasize-lines: 11,12

    void loop() {
        // Hauptcode, der wiederholt ausgef√ºhrt wird:
        int potValue = analogRead(A0);                         // Wert des Potentiometers lesen
        int value_r = map(potValue, 0, 1023, warm_r, cool_r);  // Potentiometerwert auf Rot-Intensit√§t abbilden
        // Serial.print(potValue);
        // Serial.print(" | ");
        // Serial.println(value_r);
        // delay(500);  // 500 ms warten
        int value_g = map(potValue, 0, 1023, warm_g, cool_g);  // Potentiometerwert auf Gr√ºn-Intensit√§t abbilden
        int value_b = map(potValue, 0, 1023, warm_b, cool_b);  // Potentiometerwert auf Blau-Intensit√§t abbilden
        setColor(value_r, value_g, value_b);                   // Farbe der LED einstellen
        delay(500);
    }

14. Der vollst√§ndige Code ist wie folgt. Sie k√∂nnen nun auf den "Upload"-Button klicken, um den Code auf den Arduino Uno R3 hochzuladen. Anschlie√üend k√∂nnen Sie das Potentiometer drehen und sehen, wie die RGB-LED allm√§hlich von einem k√ºhlen zu einem warmen Farbton √ºbergeht oder umgekehrt.

.. code-block:: Arduino

    // RGB-Werte f√ºr eine warme Farbe
    int warm_r = 246;
    int warm_g = 52;
    int warm_b = 8;

    // RGB-Werte f√ºr eine k√ºhle Farbe
    int cool_r = 100;
    int cool_g = 150;
    int cool_b = 255;

    void setup() {
        // Einmalige Initialisierung des Systems:
        pinMode(9, OUTPUT);   // Setzt den blauen Pin der RGB-LED als Ausgang
        pinMode(10, OUTPUT);  // Setzt den gr√ºnen Pin der RGB-LED als Ausgang
        pinMode(11, OUTPUT);  // Setzt den roten Pin der RGB-LED als Ausgang
    }

    void loop() {
        // Hauptcode, der wiederholt ausgef√ºhrt wird:
        int potValue = analogRead(A0);                         // Wert des Potentiometers lesen
        int value_r = map(potValue, 0, 1023, warm_r, cool_r);  // Potentiometerwert auf Rot-Intensit√§t abbilden
        // Serial.print(potValue);
        // Serial.print(" | ");
        // Serial.println(value_r);
        // delay(500);  // 500 ms warten
        int value_g = map(potValue, 0, 1023, warm_g, cool_g);  // Potentiometerwert auf Gr√ºn-Intensit√§t abbilden
        int value_b = map(potValue, 0, 1023, warm_b, cool_b);  // Potentiometerwert auf Blau-Intensit√§t abbilden
        setColor(value_r, value_g, value_b);                   // Farbe der LED einstellen
        delay(500);                                            // 500 ms warten
    }

    // Funktion, um die Farbe der RGB-LED einzustellen
    void setColor(int red, int green, int blue) {
        analogWrite(11, red);    // PWM-Wert auf den roten Pin schreiben
        analogWrite(10, green);  // PWM-Wert auf den gr√ºnen Pin schreiben
        analogWrite(9, blue);    // PWM-Wert auf den blauen Pin schreiben
    }

15. Speichern Sie abschlie√üend Ihren Code und r√§umen Sie Ihren Arbeitsbereich auf.

**Tipps**

W√§hrend des Experiments stellen Sie m√∂glicherweise fest, dass der √úbergang zwischen warmen und k√ºhlen Farbt√∂nen nicht so deutlich sichtbar ist wie auf dem Bildschirm. Zum Beispiel kann ein erwartetes warmes Licht wei√ü erscheinen. Dies ist normal, da das Farbmischen in einer RGB-LED nicht so fein ist wie auf einem Display.

In solchen F√§llen k√∂nnen Sie die Intensit√§t der G- und B-Werte bei der warmen Farbe verringern, um eine passendere Farbgebung auf der RGB-LED zu erzielen.

**Frage**

Beachten Sie, dass die "unteren Grenzen" eines Bereichs gr√∂√üer oder kleiner als die "oberen Grenzen" sein k√∂nnen, sodass die Funktion ``map(value, fromLow, fromHigh, toLow, toHigh)`` auch verwendet werden kann, um einen Zahlenbereich umzukehren, zum Beispiel:

.. code-block::

    y = map(x, 1, 50, 50, 1);

Die Funktion funktioniert auch gut mit negativen Zahlen, sodass dieses Beispiel ebenfalls g√ºltig ist:

.. code-block::

    y = map(x, 1, 50, 50, -100);

F√ºr ``y = map(x, 1, 50, 50, -100);``, wenn ``x`` gleich 20 ist, was sollte ``y`` sein? Verwenden Sie die folgende Formel, um es zu berechnen.

.. image:: img/15_map_format.png


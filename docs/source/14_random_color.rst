.. note::

    ¬°Hola! Bienvenido a la comunidad de entusiastas de SunFounder Raspberry Pi & Arduino & ESP32 en Facebook. Profundiza en Raspberry Pi, Arduino y ESP32 con otros entusiastas.

    **¬øPor qu√© unirte?**

    - **Soporte experto**: Resuelve problemas post-venta y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Preestrenos exclusivos**: Obt√©n acceso anticipado a nuevos anuncios de productos y adelantos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones festivas y sorteos**: Participa en sorteos y promociones navide√±as.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo.

14. Colores aleatorios
=========================

A veces, la vida necesita un toque de sorpresa. Cuando te sientas indeciso, deja que la aleatoriedad tome las riendas. Esta lecci√≥n te guiar√° para que un LED RGB emita colores aleatorios, ideal cuando quieras agregar un toque impredecible a tus proyectos.

Construyendo el circuito
---------------------------

**Componentes necesarios**

.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * LED RGB
     - 3 * Resistor de 220Œ©
     - Cables de conexi√≥n
   * - |list_uno_r3| 
     - |list_rgb_led| 
     - |list_220ohm| 
     - |list_wire| 
   * - 1 * Cable USB
     - 1 * Protoboard
     - 
     - 
   * - |list_usb_cable| 
     - |list_breadboard| 
     - 
     - 

Esta lecci√≥n utiliza el mismo circuito de la Lecci√≥n 12.

.. image:: img/12_mix_color_bb_4.png
    :width: 600
    :align: center

Creaci√≥n del c√≥digo
----------------------

En las lecciones anteriores, controlaste el LED RGB para mostrar los colores que deseabas. Pero a veces no necesitas que muestre un color espec√≠fico; en su lugar, podr√≠as querer que muestre un color aleatorio, como las luces del escenario. ¬øC√≥mo podemos hacer esto?

**Conociendo las funciones random()**

En el mundo f√≠sico, la aleatoriedad abunda, pero en programaci√≥n, los llamados n√∫meros "aleatorios" suelen calcularse mediante un algoritmo determinista. Este algoritmo generalmente requiere un punto de partida conocido como "semilla", lo que hace que estos n√∫meros sean predecibles y, por tanto, se les llame "pseudo-aleatorios". El prefijo "pseudo" indica que estos n√∫meros parecen aleatorios, pero en realidad siguen un patr√≥n.

Curiosamente, en un Arduino Uno R3, podemos usar mediciones f√≠sicas del mundo real como semillas. Durante las mediciones con un mult√≠metro, es posible que notes peque√±as fluctuaciones en los valores de voltaje y corriente del circuito. Estas fluctuaciones pueden aportar imprevisibilidad a nuestros n√∫meros aleatorios.

Arduino utiliza varias funciones para la aleatoriedad:

* ``randomSeed();``: Inicializa el valor de la semilla del generador de n√∫meros aleatorios. Esta funci√≥n garantiza que el punto de partida de la secuencia de n√∫meros aleatorios var√≠e en cada ejecuci√≥n del programa, produciendo secuencias diferentes.

    **Par√°metros**
        * ``seed``: Un valor usado para inicializar el generador de n√∫meros aleatorios. Este valor unsigned long establece el punto de inicio de la secuencia aleatoria.
    **Devuelve**
        Ninguno.

* ``long random(long max);``: Genera un n√∫mero aleatorio dentro de un rango espec√≠fico.

    **Par√°metros**
        ``max``: El l√≠mite superior del n√∫mero aleatorio (``max`` no est√° incluido), lo que significa que el n√∫mero aleatorio estar√° entre 0 (inclusive) y ``max-1`` (inclusive).
    
    **Devuelve**
        Un n√∫mero de tipo long entre 0 y max-1.

* ``long random(long min, long max);``: Genera un n√∫mero aleatorio dentro de un rango espec√≠fico.

    **Par√°metros**
        ``min``: El l√≠mite inferior del n√∫mero aleatorio (inclusive).
        ``max``: El l√≠mite superior del n√∫mero aleatorio (``max`` no incluido), lo que significa que el n√∫mero aleatorio estar√° entre min (inclusive) y max-1 (inclusive).
    
    **Devuelve**
        Un n√∫mero de tipo long entre min y max-1.

**Escribiendo el c√≥digo**

1. Abre el sketch que guardaste anteriormente, ``Lesson13_PWM_Color_Mixing``.

2. Haz clic en ‚ÄúGuardar como...‚Äù en el men√∫ ‚ÄúArchivo‚Äù y ren√≥mbralo a ``Lesson14_Random_Colors``. Haz clic en "Guardar".

3. Llama a ``randomSeed()`` solo una vez dentro de ``void setup()`` para inicializar la semilla. Evita usar un valor de semilla fijo, ya que esto har√≠a que la misma secuencia de n√∫meros aleatorios se genere cada vez que se ejecute el programa.

    Usamos ``analogRead(A0)`` para leer el valor de un pin anal√≥gico no conectado. Como este pin no est√° conectado, capta ruido, lo que var√≠a en cada lectura y proporciona una buena semilla para ``randomSeed()``.

.. code-block:: Arduino
    :emphasize-lines: 9

    void setup() {
        // C√≥digo de configuraci√≥n que se ejecuta una vez:
        pinMode(9, OUTPUT);   // Configurar pin azul del LED RGB como salida
        pinMode(10, OUTPUT);  // Configurar pin verde del LED RGB como salida
        pinMode(11, OUTPUT);  // Configurar pin rojo del LED RGB como salida
            
        // Inicializar la semilla aleatoria basada en un pin anal√≥gico no conectado
        randomSeed(analogRead(A0));
    }

4. Ahora en ``void loop()``, elimina el c√≥digo original. Usa la funci√≥n ``random()`` para generar valores aleatorios almacenados en las variables ``redValue``, ``greenValue`` y ``blueValue``.

.. code-block:: Arduino
    :emphasize-lines: 3-5

    void loop(){
        // Generar valores aleatorios para cada componente de color
        int redValue = random(0, 256);   // Valor aleatorio entre 0 y 255
        int greenValue = random(0, 256); // Valor aleatorio entre 0 y 255
        int blueValue = random(0, 256);  // Valor aleatorio entre 0 y 255
    }

5. Introduce los valores RGB generados en la funci√≥n ``setColor()``, lo que permitir√° que el LED RGB emita el color. Tambi√©n usa una funci√≥n ``delay()`` para determinar cu√°nto tiempo se mostrar√° el color.

.. code-block:: Arduino
    :emphasize-lines: 8,9

    void loop() {
        // Generar valores aleatorios para cada componente de color entre 0 y 255
        int redValue = random(0, 256);    // Generar un valor aleatorio para rojo
        int greenValue = random(0, 256);  // Generar un valor aleatorio para verde
        int blueValue = random(0, 256);   // Generar un valor aleatorio para azul

        // Aplicar los valores de color aleatorios al LED RGB
        setColor(redValue, greenValue, blueValue);
        delay(1000);  // Esperar 1 segundo
    }

6. Tu c√≥digo completo est√° listo. Puedes subirlo al Arduino Uno R3 y ver√°s que el LED RGB muestra un color aleatorio cada segundo.

.. code-block:: Arduino
    :emphasize-lines: 19,20

    void setup() {
        // C√≥digo de configuraci√≥n que se ejecuta una vez:
        pinMode(9, OUTPUT);   // Configurar pin azul del LED RGB como salida
        pinMode(10, OUTPUT);  // Configurar pin verde del LED RGB como salida
        pinMode(11, OUTPUT);  // Configurar pin rojo del LED RGB como salida
        
        // Inicializar la semilla aleatoria basada en un pin anal√≥gico no conectado
        randomSeed(analogRead(A0));
    }

    void loop() {
        // Generar valores aleatorios para cada componente de color entre 0 y 255
        int redValue = random(0, 256);    // Generar un valor aleatorio para rojo
        int greenValue = random(0, 256);  // Generar un valor aleatorio para verde
        int blueValue = random(0, 256);   // Generar un valor aleatorio para azul

        // Aplicar los valores de color aleatorios al LED RGB
        setColor(redValue, greenValue, blueValue);
        delay(1000);  // Esperar 1 segundo
    }

    // Funci√≥n para configurar el color del LED RGB
    void setColor(int red, int green, int blue) {
        // Escribir valor PWM para rojo, verde y azul en el LED RGB
        analogWrite(11, red);
        analogWrite(10, green);
        analogWrite(9, blue);
    }

7. Finalmente, recuerda guardar tu c√≥digo y organizar tu espacio de trabajo.

**Preguntas**

1. Si cambias el c√≥digo de ``randomSeed(analogRead(A0))`` a ``randomSeed(0)``, ¬øc√≥mo cambiar√°n los colores del LED RGB y por qu√©?

2. ¬øEn qu√© situaciones se utiliza la aleatoriedad para resolver problemas en la vida diaria, aparte de elegir colores al azar para decoraci√≥n o seleccionar n√∫meros de loter√≠a?

**Resumen**

Al final de esta lecci√≥n, no solo habr√°s aprendido sobre la aleatoriedad en la programaci√≥n y c√≥mo manipularla para crear vibrantes y sorprendentes despliegues visuales, sino que tambi√©n habr√°s apreciado la simple belleza de la aleatoriedad en la vida diaria. La programaci√≥n puede ser tan impredecible como la vida misma, y con las herramientas adecuadas, puedes aprovechar esa imprevisibilidad de maneras creativas y funcionales.

.. note::

    Bonjour et bienvenue dans la communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Explorez plus en profondeur Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux nouvelles annonces de produits.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et √† des promotions sp√©ciales.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

14. Couleurs Al√©atoires
===========================

Parfois, la vie a besoin d'une touche de surprise. Quand vous ne savez pas quelle couleur choisir, laissez le hasard d√©cider ! Cette le√ßon vous montrera comment faire briller une LED RGB en couleurs al√©atoires, parfait pour ajouter une √©tincelle impr√©visible √† vos projets.

Montage du circuit
-------------------------

**Composants n√©cessaires**

.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * LED RGB
     - 3 * R√©sistances de 220Œ©
     - Fils de connexion
   * - |list_uno_r3| 
     - |list_rgb_led| 
     - |list_220ohm| 
     - |list_wire| 
   * - 1 * C√¢ble USB
     - 1 * Plaque d'essai (breadboard)
     - 
     - 
   * - |list_usb_cable| 
     - |list_breadboard| 
     - 
     - 

Cette le√ßon utilise le m√™me circuit que la le√ßon 12.

.. image:: img/12_mix_color_bb_4.png
    :width: 600
    :align: center

Cr√©ation du code
---------------------

Dans les le√ßons pr√©c√©dentes, vous avez contr√¥l√© la LED RGB pour afficher les couleurs de votre choix. Mais parfois, vous voudrez peut-√™tre qu'elle affiche une couleur al√©atoire, comme des lumi√®res de sc√®ne. Comment cela peut-il √™tre fait ?

**Comprendre les fonctions random()**

Dans le monde physique, le hasard est omnipr√©sent, mais en programmation, les nombres dits "al√©atoires" sont g√©n√©ralement calcul√©s √† l'aide d'un algorithme d√©terministe. Cet algorithme n√©cessite un point de d√©part appel√© "graine" pour g√©n√©rer ces nombres. Ils sont donc dits "pseudo-al√©atoires" car ils semblent al√©atoires, mais suivent en r√©alit√© un mod√®le pr√©visible.

Sur un Arduino Uno R3, nous pouvons utiliser des mesures physiques comme source de hasard. Par exemple, des fluctuations mineures dans la tension et le courant d'un circuit peuvent servir de base √† nos nombres pseudo-al√©atoires.

Arduino propose plusieurs fonctions pour g√©n√©rer des nombres al√©atoires :

* ``randomSeed();`` : Initialise la graine pour le g√©n√©rateur de nombres al√©atoires. Cette fonction permet de s'assurer que la s√©quence de nombres varie √† chaque ex√©cution du programme.

    **Param√®tres**
        * ``seed`` : Une valeur utilis√©e pour initialiser le g√©n√©rateur de nombres al√©atoires.
    **Retourne**
        Aucun.

* ``long random(long max);`` : G√©n√®re un nombre al√©atoire dans une plage sp√©cifi√©e.

    **Param√®tres**
        ``max`` : La limite sup√©rieure du nombre al√©atoire (excluant ``max``), ce qui signifie que le nombre g√©n√©r√© sera compris entre 0 (inclus) et ``max-1`` (inclus).
    
    **Retourne**
        Un nombre de type long compris entre 0 et max-1.

* ``long random(long min, long max);`` : G√©n√®re un nombre al√©atoire dans une plage sp√©cifi√©e.

    **Param√®tres**
        ``min`` : La limite inf√©rieure du nombre al√©atoire (incluse).
        ``max`` : La limite sup√©rieure du nombre al√©atoire (excluant ``max``).
    
    **Retourne**
        Un nombre de type long compris entre min et max-1.

**√âcrire le code**

1. Ouvrez le sketch que vous avez sauvegard√© pr√©c√©demment, ``Lesson13_PWM_Color_Mixing``.

2. Cliquez sur "Enregistrer sous..." dans le menu "Fichier" et renommez-le en ``Lesson14_Random_Colors``. Cliquez sur "Enregistrer".

3. Appelez ``randomSeed()`` une seule fois dans ``void setup()`` pour initialiser la graine. Nous utilisons ``analogRead(A0)`` pour lire une valeur sur une broche analogique non connect√©e, qui capte le bruit al√©atoire de l'environnement.

.. code-block:: Arduino
    :emphasize-lines: 9

    void setup() {
        // Code √† ex√©cuter une fois :
        pinMode(9, OUTPUT);   // Configurer la broche bleue de la LED RGB en sortie
        pinMode(10, OUTPUT);  // Configurer la broche verte de la LED RGB en sortie
        pinMode(11, OUTPUT);  // Configurer la broche rouge de la LED RGB en sortie
            
        // Initialiser la graine al√©atoire avec une broche analogique non connect√©e
        randomSeed(analogRead(A0));
    }

4. Dans ``void loop()``, remplacez le code original par la fonction ``random()`` pour g√©n√©rer des valeurs al√©atoires et les stocker dans les variables ``redValue``, ``greenValue`` et ``blueValue``.

.. code-block:: Arduino
    :emphasize-lines: 3-5

    void loop(){
        // G√©n√©rer des valeurs al√©atoires pour chaque composant de couleur
        int redValue = random(0, 256);   // Valeur al√©atoire entre 0 et 255
        int greenValue = random(0, 256); // Valeur al√©atoire entre 0 et 255
        int blueValue = random(0, 256);  // Valeur al√©atoire entre 0 et 255
    }

5. Transmettez les valeurs RGB g√©n√©r√©es √† la fonction ``setColor()``, et utilisez la fonction ``delay()`` pour d√©terminer la dur√©e d'affichage de chaque couleur.

.. code-block:: Arduino
    :emphasize-lines: 8,9

    void loop() {
        // G√©n√©rer des valeurs al√©atoires pour chaque composant de couleur
        int redValue = random(0, 256);    // Valeur al√©atoire pour le rouge
        int greenValue = random(0, 256);  // Valeur al√©atoire pour le vert
        int blueValue = random(0, 256);   // Valeur al√©atoire pour le bleu

        // Appliquer les valeurs al√©atoires √† la LED RGB
        setColor(redValue, greenValue, blueValue);
        delay(1000);  // Attendre 1 seconde
    }

6. Votre code est maintenant pr√™t. T√©l√©chargez-le sur l'Arduino Uno R3 et vous verrez la LED RGB afficher une couleur al√©atoire toutes les secondes.

.. code-block:: Arduino
    :emphasize-lines: 19,20

    void setup() {
        // Code √† ex√©cuter une fois :
        pinMode(9, OUTPUT);   // Configurer la broche bleue de la LED RGB en sortie
        pinMode(10, OUTPUT);  // Configurer la broche verte de la LED RGB en sortie
        pinMode(11, OUTPUT);  // Configurer la broche rouge de la LED RGB en sortie
        
        // Initialiser la graine al√©atoire avec une broche analogique non connect√©e
        randomSeed(analogRead(A0));
    }

    void loop() {
        // G√©n√©rer des valeurs al√©atoires pour chaque composant de couleur
        int redValue = random(0, 256);    // Valeur al√©atoire pour le rouge
        int greenValue = random(0, 256);  // Valeur al√©atoire pour le vert
        int blueValue = random(0, 256);   // Valeur al√©atoire pour le bleu

        // Appliquer les valeurs al√©atoires √† la LED RGB
        setColor(redValue, greenValue, blueValue);
        delay(1000);  // Attendre 1 seconde
    }

    // Fonction pour d√©finir la couleur de la LED RGB
    void setColor(int red, int green, int blue) {
        // √âcrire la valeur PWM pour le rouge, le vert et le bleu sur la LED RGB
        analogWrite(11, red);
        analogWrite(10, green);
        analogWrite(9, blue);
    }

7. Enfin, n'oubliez pas de sauvegarder votre code et de ranger votre espace de travail.

**Question**

1. Si vous remplacez ``randomSeed(analogRead(A0))`` par ``randomSeed(0)``, comment les couleurs de la LED RGB vont-elles changer, et pourquoi ?

2. Dans quelles situations le hasard est-il utilis√© pour r√©soudre des probl√®mes dans la vie quotidienne, en dehors du choix al√©atoire de couleurs pour la d√©coration ou de la s√©lection des num√©ros de loterie ?

**R√©sum√©**

√Ä la fin de cette le√ßon, vous aurez non seulement appris √† g√©rer l'al√©atoire en programmation pour cr√©er des affichages visuels dynamiques, mais vous aurez √©galement acquis une nouvelle appr√©ciation de la beaut√© simple de l'impr√©visibilit√© dans la vie quotidienne. La programmation peut parfois √™tre aussi impr√©visible que la vie elle-m√™me, et avec les bons outils, vous pouvez exploiter cette impr√©visibilit√© de mani√®re cr√©ative et fonctionnelle.

.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez au c≈ìur des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour perfectionner vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-go√ªts.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et concours** : Participez √† des tirages au sort et des promotions sp√©ciales lors des f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

16. Alarme de temp√©rature
=============================

Dans cette le√ßon, nous allons explorer l'importance de la gestion de la temp√©rature dans la s√©curit√© alimentaire. Tous les aliments ne n√©cessitent pas une r√©frig√©ration ou une cong√©lation, mais m√™me des produits stables √† temp√©rature ambiante comme les chips, le pain et certains fruits doivent √™tre stock√©s √† des temp√©ratures appropri√©es pour pr√©server leur qualit√© et leur s√©curit√©. En construisant un syst√®me de surveillance de la temp√©rature, nous apprendrons √† maintenir les aliments dans des plages de temp√©rature s√ªres et √† d√©clencher une alarme en cas de d√©viation de ces limites. Ce projet pratique permet non seulement de prot√©ger les aliments, mais sert √©galement d'excellente introduction √† la surveillance environnementale avec des applications concr√®tes.

.. .. image:: img/16_temperature.jpg
..     :width: 400
..     :align: center

.. raw:: html

    <video muted controls style = "max-width:90%">
        <source src="_static/video/16_temp_alarm.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

√Ä la fin de cette le√ßon, vous serez capable de :

* Comprendre l'importance du contr√¥le de la temp√©rature dans la s√©curit√© alimentaire.
* Construire un circuit avec une thermistance pour surveiller les variations de temp√©rature.
* √âcrire un programme Arduino pour lire les donn√©es de temp√©rature d'une thermistance.
* Utiliser la logique en programmation pour d√©clencher des actions (comme allumer une LED ou d√©clencher une alarme) en fonction des donn√©es de temp√©rature.
* Appliquer des concepts de r√©sistance √©lectrique et de conversion de temp√©rature dans des sc√©narios pratiques.

Construction du circuit
--------------------------

**Composants n√©cessaires**

.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * LED RGB
     - 3 * R√©sistances 220Œ©
     - 1 * R√©sistance 10KŒ©
   * - |list_uno_r3| 
     - |list_rgb_led| 
     - |list_220ohm| 
     - |list_10kohm| 
   * - 1 * Thermistance
     - 1 * Plaque de montage (breadboard)
     - Fils de connexion
     - 1 * C√¢ble USB
   * - |list_thermistor| 
     - |list_breadboard| 
     - |list_wire| 
     - |list_usb_cable| 
   * - 1 * Multim√®tre
     - 
     - 
     - 
   * - |list_meter| 
     - 
     - 
     - 

√âtapes de construction
---------------------------

Ce circuit est bas√© sur celui de la le√ßon 12, avec l'ajout d'une thermistance.

.. image:: img/16_temperature_alarm.png
    :width: 500
    :align: center

1. Sur la base du circuit de la le√ßon 12, retirez le fil reliant la broche GND de l'Arduino Uno R3 √† la broche GND de la LED RGB, puis ins√©rez-le dans la borne n√©gative de la breadboard. Ensuite, connectez un fil de cette borne n√©gative √† la broche GND de la LED RGB.

.. image:: img/16_temperature_alarm_gnd.png
    :width: 500
    :align: center

2. Ins√©rez la thermistance dans les trous 6E et 8E. Les broches ne sont pas directionnelles et peuvent √™tre ins√©r√©es librement.

.. image:: img/16_temperature_alarm_thermistor.png
    :width: 500
    :align: center

Une thermistance est un type sp√©cial de r√©sistance dont la valeur change en fonction de la temp√©rature. Cet appareil est tr√®s utile pour d√©tecter et mesurer la temp√©rature, permettant ainsi de la contr√¥ler dans divers projets et dispositifs √©lectroniques.

Voici le symbole √©lectronique de la thermistance.

.. image:: img/16_thermistor_symbol.png
    :width: 300
    :align: center

Il existe deux types fondamentaux oppos√©s de thermistances :

* **Thermistances NTC** : La r√©sistance diminue avec l'augmentation de la temp√©rature. Elles sont couramment utilis√©es comme capteurs de temp√©rature ou limiteurs de courant d'appel dans les circuits.
* **Thermistances PTC** : La r√©sistance augmente avec l'augmentation de la temp√©rature. Elles sont souvent utilis√©es comme fusibles r√©armables dans les circuits pour prot√©ger contre les surintensit√©s.

Dans ce kit, nous utilisons une **NTC**.

Utilisez maintenant un multim√®tre pour mesurer la r√©sistance de cette thermistance et v√©rifiez si elle diminue effectivement avec une augmentation de la temp√©rature.

3. Comme la r√©sistance nominale de la thermistance est de 10K, r√©glez le multim√®tre sur la plage de mesure de r√©sistance de 20 kilo-ohms (20K).

.. image:: img/multimeter_20k.png
    :width: 300
    :align: center

4. Touchez maintenant les deux broches de la thermistance avec les fils de test rouge et noir du multim√®tre.

.. image:: img/16_temperature_alarm_test.png
    :width: 500
    :align: center

5. Lisez la valeur de la r√©sistance √† la temp√©rature ambiante actuelle et enregistrez-la dans le tableau ci-dessous.

.. list-table::
   :widths: 20 20
   :header-rows: 1

   * - Environment
     - Resistance (kilohm)
   * - Current temperature
     - *9.37*
   * - Higher temperature
     - 
   * - Lower temperature
     - 

6. Maintenant, vous pouvez demander √† un ami de vous aider √† tenir la thermistance ou utiliser quelque chose d'autre pour augmenter la temp√©rature autour de la thermistance (pas d'eau, pas de feu, la s√©curit√© d'abord). Notez la valeur de la r√©sistance de la thermistance dans le tableau.

.. list-table::
   :widths: 20 20
   :header-rows: 1

   * - Environnement
     - R√©sistance (kilohms)
   * - Temp√©rature actuelle
     - *9.37*
   * - Temp√©rature plus √©lev√©e
     - *6.10*
   * - Temp√©rature plus basse
     - 

7. Vous pouvez placer la thermistance √† l'ext√©rieur ou utiliser un √©ventail pour diminuer la temp√©rature autour d'elle. Notez la r√©sistance mesur√©e dans le tableau √† ce moment.

.. list-table::
   :widths: 20 20
   :header-rows: 1

   * - Environnement
     - R√©sistance (kilohms)
   * - Temp√©rature actuelle
     - *9.37*
   * - Temp√©rature plus √©lev√©e
     - *6.10*
   * - Temp√©rature plus basse
     - *12.49*

√Ä travers ces mesures, on peut voir que plus la temp√©rature ambiante est √©lev√©e, plus la r√©sistance diminue.

8. Vous pouvez maintenant continuer √† construire le circuit. Connectez une extr√©mit√© de la thermistance √† une r√©sistance de 10K et l'autre extr√©mit√© de la r√©sistance de 10K √† la borne n√©gative de la breadboard.

.. image:: img/16_temperature_alarm_resistor.png
    :width: 500
    :align: center

9. Connectez l'autre extr√©mit√© de la breadboard √† la broche 5V de l'Arduino Uno R3.

.. image:: img/16_temperature_alarm_5v.png
    :width: 500
    :align: center

10. Enfin, connectez la broche commune de la thermistance et de la r√©sistance 10K √† la broche A0 de l'Arduino Uno R3.

.. image:: img/16_temperature_alarm.png
    :width: 500
    :align: center

Compr√©hension du calcul de la temp√©rature
---------------------------------------------

**√Ä propos de la formule de la temp√©rature**

La r√©sistance d'une thermistance NTC change avec la temp√©rature. Cette relation est g√©n√©ralement d√©crite avec pr√©cision par l'√©quation de Steinhart-Hart, comme suit :

.. image:: img/16_format_steinhart.png
    :width: 400
    :align: center

Ici, a, b et c sont appel√©s les param√®tres de Steinhart-Hart, qui doivent √™tre sp√©cifi√©s pour chaque appareil. T est la temp√©rature absolue, et R est la r√©sistance.

En plus de l'√©quation de Steinhart-Hart, de nombreuses applications pratiques utilisent √©galement une formule simplifi√©e bas√©e sur le mod√®le du param√®tre b√™ta pour calculer rapidement la temp√©rature. Ce mod√®le suppose que la relation entre la r√©sistance et la temp√©rature peut √™tre approxim√©e par une relation exponentielle plus simple, simplifiant ainsi le processus de calcul et le rendant adapt√© √† la surveillance rapide de la temp√©rature dans des applications techniques.

.. image:: img/16_format_3.png
    :width: 400
    :align: center

* **T** est la temp√©rature de la thermistance en Kelvin.
* **T0** est une temp√©rature de r√©f√©rence, g√©n√©ralement de 25¬∞C (soit 273,15 + 25 en Kelvin).
* **B** est le param√®tre b√™ta du mat√©riau, le coefficient b√™ta de la thermistance NTC utilis√©e dans ce kit est de 3950.
* **R** est la r√©sistance que nous mesurons.
* **R0** est la r√©sistance √† la temp√©rature de r√©f√©rence T0, la r√©sistance de la thermistance NTC dans ce kit √† 25¬∞C est de 10 kilo-ohms.

Apr√®s conversion des formules ci-dessus, la temp√©rature en Kelvin est calcul√©e comme : ``T=1/(ln(R/R0)/B+1/T0)``, soustrayez 273,15 pour la convertir en Celsius.

**Comment mesurer la r√©sistance ?**

Nous connectons la thermistance et une r√©sistance de 10K en s√©rie dans notre circuit.

.. image:: img/16_thermistor_sch.png
    :width: 200
    :align: center

La tension √† la broche A0, que nous mesurons, divis√©e par la r√©sistance de la s√©rie (la r√©sistance de 10K), nous indique le courant circulant dans le circuit. Ce courant peut √©galement √™tre obtenu en divisant la tension totale par la r√©sistance totale du circuit (r√©sistance en s√©rie + thermistance) :

.. image:: img/16_format_1.png
    :width: 400
    :align: center

* **Vsupply** : La tension fournie au circuit.
* **Rseries** : La valeur de la r√©sistance en s√©rie.
* **Vmesur√©e** : La tension aux bornes de la r√©sistance de 10K, √©galement la tension √† la broche A0.

√Ä partir de cela, nous pouvons r√©arranger la formule pour trouver la r√©sistance de la thermistance :

.. image:: img/16_format_2.png
    :width: 400
    :align: center

Dans notre code, nous utilisons la fonction ``analogRead()`` pour lire la tension √† la broche A0. La relation entre la tension **Vmesur√©e** et la valeur analogique lue est :

.. code-block::

    (Analog value at A0) / 1023.0 = Vmeasured / Vsupply

En utilisant la formule ci-dessus, nous calculons la r√©sistance de la thermistance :

.. code-block::

    R_thermistor =R_series x (1023.0 / (Analog value at A0) - 1)

.. note::

    Si les formules vous paraissent compliqu√©es, souvenez-vous simplement des formules finales ci-dessous, et tout ira bien !

    La r√©sistance de la thermistance peut √™tre obtenue gr√¢ce √† la formule suivante :

    .. code-block::

        R_thermistor =R_series x (1023.0 / (Valeur analogique √† A0) - 1)

    Ensuite, calculez la temp√©rature en Kelvin avec la formule suivante :

    .. code-block::

        T=1/(ln(R/R0)/B+1/T0)

    * **T0** : 273.15 + 25.
    * **B** : 3950.
    * **R** est la r√©sistance que nous mesurons.
    * **R0** : 10 kilo-ohms.

    Enfin, convertissez en Celsius avec la formule suivante :

    .. code-block::

        Tc = T - 273.15


Cr√©ation de Code
--------------------

**Obtenir la Temp√©rature**

1. Ouvrez l'IDE Arduino et d√©marrez un nouveau projet en s√©lectionnant "New Sketch" dans le menu "File".
2. Sauvegardez votre sketch sous le nom de ``Lesson16_Temperature_Alarm`` en utilisant ``Ctrl + S`` ou en cliquant sur ‚ÄúSave‚Äù.

3. Dans les le√ßons pr√©c√©dentes, nous avons directement r√©f√©renc√© les broches de la LED RGB dans notre code ; ici, nous les d√©finissons comme des constantes.

.. code-block:: Arduino
    :emphasize-lines: 2-5

    // Configuration des broches
    const int tempSensorPin = A0;  // Entr√©e analogique pour le thermistor NTC
    const int redPin = 11;         // Broche num√©rique pour la LED rouge
    const int greenPin = 10;       // Broche num√©rique pour la LED verte
    const int bluePin = 9;         // Broche num√©rique pour la LED bleue

    void setup() {
        // Configuration √† ex√©cuter une seule fois :
    }

L'utilisation de constantes au lieu de variables, qui ne changent pas tout au long du programme, apporte clart√© et simplifie la maintenance. Cela permet d'utiliser des noms explicites au lieu de nombres, et toute modification n'est requise qu'au moment de la d√©claration, pas partout dans le code. Les constantes suivent les m√™mes r√®gles de nommage que les variables, en √©vitant les mots-cl√©s r√©serv√©s par l'IDE Arduino.

4. Avant d'utiliser le thermistor, nous devons √©galement d√©finir quelques constantes suppl√©mentaires pour stocker des param√®tres li√©s au circuit.

.. note::

    Vous remarquerez qu'il y a des constantes de type ``int`` et ``float``. Alors, quelle est la diff√©rence entre ces deux types de constantes ?

  * ``const int`` : Une constante de type ``int`` (entier) contient des nombres entiers. Ce type ne supporte pas les fractions ou les nombres d√©cimaux. Il occupe g√©n√©ralement 16 ou 32 bits de m√©moire selon le syst√®me.
  * ``const float`` : Une constante de type ``float`` (nombre √† virgule flottante) contient des nombres pouvant avoir des parties fractionnaires. Elle est utilis√©e lorsque plus de pr√©cision est n√©cessaire, par exemple dans des mesures n√©cessitant des valeurs d√©cimales. Un ``float`` occupe g√©n√©ralement 32 bits de m√©moire et peut repr√©senter une gamme plus large de nombres que ``int``.

.. code-block:: Arduino
    :emphasize-lines: 2-5

    // Configuration des broches
    const int tempSensorPin = A0;  // Entr√©e analogique pour le thermistor NTC
    const int redPin = 10;         // Broche num√©rique pour la LED rouge
    const int greenPin = 11;       // Broche num√©rique pour la LED verte
    const int bluePin = 12;        // Broche num√©rique pour la LED bleue

    // Constantes pour le calcul de la temp√©rature
    const float beta = 3950.0;               // Valeur Beta du thermistor NTC
    const float seriesResistor = 10000;      // Valeur de la r√©sistance s√©rie (ohms)
    const float roomTempResistance = 10000;  // R√©sistance du NTC √† 25¬∞C
    const float roomTemp = 25 + 273.15;      // Temp√©rature ambiante en Kelvin

5. Dans ``void setup()``, configurez les broches de la LED RGB comme sorties et configurez la communication s√©rie √† une vitesse de 9600 bauds.

.. code-block:: Arduino
    :emphasize-lines: 2-5

    void setup() {
        // Initialiser les broches des LEDs en tant que sorties
        pinMode(redPin, OUTPUT);
        pinMode(greenPin, OUTPUT);
        pinMode(bluePin, OUTPUT);
        
        // D√©marrer la communication s√©rie √† 9600 bauds
        Serial.begin(9600);
    }

6. D'abord, lisez la valeur analogique de la broche A0 dans ``void loop()``.

.. code-block:: Arduino
    :emphasize-lines: 2

    void loop() {
        int adcValue = analogRead(tempSensorPin);                     // Lire la valeur du thermistor
    }

7. Ensuite, calculez la r√©sistance de la thermistance en utilisant la formule d√©riv√©e pr√©c√©demment pour convertir les valeurs analogiques en tension.

.. code-block:: Arduino
    :emphasize-lines: 3

    void loop() {
        int adcValue = analogRead(tempSensorPin);                     // Lire la valeur du thermistor
        float resistance = (1023.0 / adcValue - 1) * seriesResistor;  // Calculer la r√©sistance du thermistor
    }

8. Ensuite, calculez la temp√©rature en Kelvin en utilisant la formule ci-dessous :

.. code-block:: Arduino
    :emphasize-lines: 6

    void loop() {
        int adcValue = analogRead(tempSensorPin);                     // Lire la valeur du thermistor
        float resistance = (1023.0 / adcValue - 1) * seriesResistor;  // Calculer la r√©sistance du thermistor

        // Calculer la temp√©rature en Kelvin √† l'aide de l'√©quation Beta
        float tempK = 1 / (log(resistance / roomTempResistance) / beta + 1 / roomTemp);
    }

9. Soustrayez 273,15 de la temp√©rature en Kelvin pour la convertir en Celsius, puis affichez le r√©sultat sur le moniteur s√©rie √† l'aide de la fonction ``Serial.println()``.

.. code-block:: Arduino
    :emphasize-lines: 8,9

    void loop() {
        int adcValue = analogRead(tempSensorPin);                     // Lire la valeur du thermistor
        float resistance = (1023.0 / adcValue - 1) * seriesResistor;  // Calculer la r√©sistance du thermistor

        // Calculer la temp√©rature en Kelvin √† l'aide de l'√©quation Beta
        float tempK = 1 / (log(resistance / roomTempResistance) / beta + 1 / roomTemp);
    
        float tempC = tempK - 273.15;  // Convertir en Celsius
        Serial.println(tempC);         // Afficher la temp√©rature en Celsius sur le moniteur s√©rie
    }

10. √Ä ce stade, vous pouvez t√©l√©charger le code sur votre Arduino Uno R3 et obtenir les valeurs actuelles de la temp√©rature en Celsius.

.. code-block::

    26.28
    26.19
    26.19
    26.28
    26.28

**Changer la couleur de la LED RGB**

Maintenant, changeons la couleur de la LED RGB en fonction de la temp√©rature mesur√©e par le thermistor.

Par exemple, nous d√©finissons trois plages de temp√©ratures :

* En dessous de 10 degr√©s, la LED RGB s'affiche en vert, indiquant que la temp√©rature est confortable.
* Entre 10 et 20 degr√©s, la LED RGB s'affiche en jaune, signalant une attention particuli√®re √† la temp√©rature actuelle.
* Au-dessus de 21 degr√©s, la LED RGB s'affiche en rouge, indiquant que la temp√©rature est trop √©lev√©e et que des mesures doivent √™tre prises.

11. Pour contr√¥ler la LED RGB, nous utiliserons la fonction ``setColor()`` cr√©√©e dans les le√ßons pr√©c√©dentes.

.. code-block:: Arduino

    // Fonction pour d√©finir la couleur de la LED RGB
    void setColor(int red, int green, int blue) {
        // Envoyer les valeurs PWM pour les couleurs rouge, vert et bleu √† la LED RGB
        analogWrite(11, red);
        analogWrite(10, green);
        analogWrite(9, blue);
    }

12. Maintenant, nous utilisons une instruction ``if else if`` pour contr√¥ler la couleur de la LED RGB en fonction des diff√©rentes temp√©ratures.

.. code-block:: Arduino
    :emphasize-lines: 12-18

    void loop() {
        int adcValue = analogRead(tempSensorPin);                     // Lire la valeur du thermistor
        float resistance = (1023.0 / adcValue - 1) * seriesResistor;  // Calculer la r√©sistance du thermistor

        // Calculer la temp√©rature en Kelvin √† l'aide de l'√©quation Beta
        float tempK = 1 / (log(resistance / roomTempResistance) / beta + 1 / roomTemp);
    
        float tempC = tempK - 273.15;  // Convertir en Celsius
        Serial.println(tempC);         // Afficher la temp√©rature en Celsius sur le Moniteur S√©rie

        // Ajuster la couleur de la LED en fonction de la temp√©rature
        if (tempC < 10) {
            setColor(0, 0, 255);  // Froid : bleu
        } else if (tempC >= 10 && tempC <= 21) {
            setColor(0, 255, 0);  // Confortable : vert
        } else if (tempC > 21) {
            setColor(255, 0, 0);  // Chaud : rouge
        }
        delay(1000);  // Attendre 1 seconde avant la prochaine lecture
    }

13. Votre code complet est maintenant pr√™t. Vous pouvez t√©l√©charger le code sur votre Arduino Uno R3 pour voir les effets.

.. code-block:: Arduino

    // Configuration des broches
    const int tempSensorPin = A0;  // Entr√©e analogique pour le thermistor NTC
    const int redPin = 10;         // Broche num√©rique pour la LED rouge
    const int greenPin = 11;       // Broche num√©rique pour la LED verte
    const int bluePin = 12;        // Broche num√©rique pour la LED bleue

    // Constantes pour le calcul de la temp√©rature
    const float beta = 3950.0;               // Valeur Beta du thermistor NTC
    const float seriesResistor = 10000;      // Valeur de la r√©sistance en s√©rie (ohms)
    const float roomTempResistance = 10000;  // R√©sistance du NTC √† 25¬∞C
    const float roomTemp = 25 + 273.15;      // Temp√©rature ambiante en Kelvin

    void setup() {
        // Initialiser les broches des LEDs en tant que sorties
        pinMode(redPin, OUTPUT);
        pinMode(greenPin, OUTPUT);
        pinMode(bluePin, OUTPUT);

        // D√©marrer la communication s√©rie √† 9600 bauds
        Serial.begin(9600);
    }

    void loop() {
        int adcValue = analogRead(tempSensorPin);                     // Lire la valeur du thermistor
        float resistance = (1023.0 / adcValue - 1) * seriesResistor;  // Calculer la r√©sistance du thermistor

        // Calculer la temp√©rature en Kelvin √† l'aide de l'√©quation Beta
        float tempK = 1 / (log(resistance / roomTempResistance) / beta + 1 / roomTemp);

        float tempC = tempK - 273.15;  // Convertir en Celsius
        Serial.println(tempC);         // Afficher la temp√©rature en Celsius sur le Moniteur S√©rie

        // Ajuster la couleur de la LED en fonction de la temp√©rature
        if (tempC < 10) {
            setColor(0, 0, 255);  // Froid : bleu
        } else if (tempC >= 10 && tempC <= 21) {
            setColor(0, 255, 0);  // Confortable : vert
        } else if (tempC > 21) {
            setColor(255, 0, 0);  // Chaud : rouge
        }
        delay(1000);  // Attendre 1 seconde avant la prochaine lecture
    }

    // Fonction pour d√©finir la couleur de la LED RGB
    void setColor(int red, int green, int blue) {
        // Envoyer les valeurs PWM pour rouge, vert et bleu √† la LED RGB
        analogWrite(11, red);
        analogWrite(10, green);
        analogWrite(9, blue);
    }

14. Enfin, n'oubliez pas de sauvegarder votre code et de ranger votre espace de travail.

**Question**

1. Dans le code, les temp√©ratures en Kelvin et en Celsius sont calcul√©es. Si vous souhaitez √©galement conna√Ætre la temp√©rature en Fahrenheit, que devez-vous faire ?

2. Pouvez-vous penser √† d'autres situations ou lieux o√π un syst√®me de surveillance de la temp√©rature comme celui que nous avons construit aujourd'hui pourrait √™tre utile ?

**R√©sum√©**

Dans la le√ßon d'aujourd'hui, nous avons construit un syst√®me d'alarme de temp√©rature utilisant un thermistor pour surveiller la temp√©rature d'une zone de stockage d'aliments non p√©rissables. Nous avons appris √† lire et √† convertir les valeurs de r√©sistance du thermistor en relev√©s de temp√©rature en Celsius. Gr√¢ce √† notre programmation, nous avons √©galement mis en place des conditions pour changer la couleur d'une LED RGB en fonction de la temp√©rature, fournissant une alerte visuelle pour les temp√©ratures trop basses, ad√©quates ou trop √©lev√©es.


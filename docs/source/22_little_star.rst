.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder sur Facebook ! Plongez dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et relevez les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez & Partagez** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et √† des avant-premi√®res exclusives.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et concours** : Participez √† des concours et √† des promotions sp√©ciales pendant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

22. Jouer "Ah! Vous dirai-je, Maman"
===========================================
Dans cette le√ßon, nous plongeons dans l'intersection fascinante entre la musique et la technologie. Vous apprendrez comment diff√©rentes hauteurs musicales sont produites par des changements de fr√©quence, et comment ce principe peut √™tre appliqu√© √† l'aide d'un microcontr√¥leur comme Arduino pour contr√¥ler un buzzer. √Ä la fin de cette le√ßon, vous comprendrez non seulement les bases des fr√©quences musicales, mais vous serez √©galement capable de programmer un Arduino pour jouer une m√©lodie simple.

.. raw:: html

     <video controls style = "max-width:90%">
        <source src="_static/video/22_little_star.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

√Ä la fin de cette le√ßon, vous serez capable de :

* Comprendre comment les hauteurs musicales correspondent √† des fr√©quences sp√©cifiques.
* Simplifier la programmation en utilisant des tableaux pour stocker et manipuler les notes de musique.
* √âcrire et ex√©cuter un programme qui contr√¥le un buzzer passif pour jouer "Ah! Vous dirai-je, Maman".

Fr√©quences musicales et production du son
---------------------------------------------
.. image:: img/7_sound.png
  :width: 400
  :align: center

Diff√©rents instruments de musique produisent des hauteurs vari√©es en modifiant la fr√©quence.
Par exemple, sur un piano, le fait de frapper les touches fait vibrer les cordes correspondantes rapidement, produisant des hauteurs sp√©cifiques.
Les scientifiques et les musiciens ont d√©velopp√© diverses m√©thodes d'accordage et des standards de hauteur en mesurant pr√©cis√©ment ces fr√©quences de vibration.

Lorsque vous contr√¥lez un Arduino ou un autre microcontr√¥leur pour envoyer un signal √©lectrique √† un buzzer, le diaphragme de ce dernier vibre rapidement en fonction de la fr√©quence du signal,
produisant ainsi un son. Par exemple, un signal r√©gl√© √† 440 Hz produira la hauteur musicale standard "A4", qui est un point de r√©f√©rence pour l'accordage musical.
√Ä mesure que la fr√©quence augmente ou diminue, la hauteur du son produit monte ou descend, permettant ainsi de cr√©er une gamme de hauteurs allant des graves aux aigus dans une composition musicale.

Dans la musique occidentale, une octave inclut 12 hauteurs (demi-tons), de C √† B, puis revient √† un C plus √©lev√©.

Par exemple, la fr√©quence du Do central (g√©n√©ralement appel√© C4) est d'environ 261,63 Hz. La fr√©quence d'une note peut √™tre calcul√©e √† l'aide de la formule suivante :

.. image:: img/7_music_format.png

o√π f_0 est la hauteur de r√©f√©rence (g√©n√©ralement A4, fr√©quence 440Hz), et n est le nombre de demi-tons √† partir de la hauteur de r√©f√©rence jusqu'√† la hauteur cible (les nombres positifs indiquent une mont√©e, les nombres n√©gatifs une descente).
En utilisant cette formule, nous pouvons calculer la fr√©quence de n'importe quelle note.

Voici un ensemble de fr√©quences :

* C (C4) : 262 Hz (en r√©alit√© environ 261,63 Hz, arrondi √† 262)
* D (D4) : 294 Hz
* E (E4) : 330 Hz
* F (F4) : 349 Hz
* G (G4) : 392 Hz
* A (A4) : 440 Hz
* B (B4) : 494 Hz

Nous allons maintenant explorer les secrets des notes avec Arduino et un buzzer. Faisons jouer au buzzer passif les deux premi√®res lignes de "Ah! Vous dirai-je, Maman" :

.. note::

  La m√©lodie de "Ah! Vous dirai-je, Maman" repose sur des combinaisons de notes simples,
  et cette m√©lodie, rendue c√©l√®bre par Wolfgang Amadeus Mozart, est tr√®s appropri√©e pour les d√©butants.

  Voici la partition de base de "Ah! Vous dirai-je, Maman", avec chaque note :

  .. code-block:: 

    C C G G A A G
    F F E E D D C
    G G F F E E D
    G G F F E E D
    C C G G A A G
    F F E E D D C

Construction du circuit
--------------------------

**Composants n√©cessaires**

.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * Plaque d'essai
     - 1 * Buzzer passif
     - Fils de connexion
   * - |list_uno_r3| 
     - |list_breadboard| 
     - |list_passive_buzzer| 
     - |list_wire| 
   * - 1 * C√¢ble USB
     - 
     - 
     - 
   * - |list_usb_cable| 
     - 
     - 
     - 



**√âtapes de construction**

Cette le√ßon utilise le m√™me circuit que la le√ßon 21.

.. image:: img/16_morse_code.png
    :width: 500
    :align: center

Cr√©ation du Code - Tableau
-------------------------------
1. Ouvrez l'IDE Arduino et d√©marrez un nouveau projet en s√©lectionnant "New Sketch" dans le menu "Fichier".
2. Enregistrez votre sketch sous le nom ``Lesson22_Array`` en utilisant ``Ctrl + S`` ou en cliquant sur "Enregistrer".

3. Cr√©ez maintenant un tableau au tout d√©but du code, stockant les notes de "Ah! Vous dirai-je, Maman" dans ce tableau.

.. code-block:: Arduino

  // D√©finir les fr√©quences pour les notes de la gamme de Do majeur (octave √† partir du Do central)
  int c = 262;
  int d = 294;
  int e = 330;
  int f = 349;
  int g = 392;
  int a = 440;
  int b = 494;
  int C = 523;  // High C

  // D√©finir un tableau contenant la s√©quence des notes de la m√©lodie
  int melody[] = { c, c, g, g, a, a, g, f, f, e, e, d, d, c, g, g, f, f, e, e, d, g, g, f, f, e, e, d, c, c, g, g, a, a, g, f, f, e, e, d, d, c };

Un tableau est une structure de donn√©es utilis√©e pour stocker plusieurs √©l√©ments du m√™me type en programmation Arduino.
C'est un outil tr√®s basique mais puissant, et lorsqu'il est utilis√© correctement, il peut consid√©rablement am√©liorer l'efficacit√© et les performances du programme.
Les tableaux peuvent stocker des √©l√©ments de types tels que les entiers, les nombres √† virgule flottante et les caract√®res.

Similaire √† la cr√©ation de variables et de fonctions, la cr√©ation d'un tableau implique √©galement de sp√©cifier le type et le nom du tableau - ``int melody[]``.

Les √©l√©ments √† l'int√©rieur des ``{}`` sont appel√©s √©l√©ments de tableau, commen√ßant √† l'index 0, donc ``melody[0]`` correspond au premier ``c(262)``, et ``melody[13]`` est √©galement ``c(262)``.

4. Imprimez maintenant les √©l√©ments aux index 0 et 13 du tableau ``melody[]`` dans le moniteur s√©rie.

.. code-block:: Arduino
  :emphasize-lines: 17,18

  // D√©finir les fr√©quences pour les notes de la gamme de Do majeur (octave √† partir du Do central)
  int c = 262;
  int d = 294;
  int e = 330;
  int f = 349;
  int g = 392;
  int a = 440;
  int b = 494;
  int C = 523;  // Do aigu

  // D√©finir un tableau contenant la s√©quence des notes de la m√©lodie
  int melody[] = { c, c, g, g, a, a, g, f, f, e, e, d, d, c, g, g, f, f, e, e, d, g, g, f, f, e, e, d, c, c, g, g, a, a, g, f, f, e, e, d, d, c };

  void setup() {
    // Mettez ici votre code de configuration, ex√©cut√© une seule fois :
    Serial.begin(9600);  // Initialiser la communication s√©rie √† 9600 baud
    Serial.println(melody[0]);
    Serial.println(melody[13]);
  }
  
  void loop() {
    // Mettez ici votre code principal, ex√©cut√© en boucle :
  }

5. Apr√®s avoir t√©l√©vers√© le code sur l'Arduino Uno R3, ouvrez le moniteur s√©rie et vous verrez deux fois le nombre 262.

.. code-block::

  262
  262

6. Si vous souhaitez imprimer chaque √©l√©ment du tableau ``melody[]`` un par un, vous devrez d'abord conna√Ætre la longueur du tableau. Vous pouvez utiliser la fonction ``sizeof()`` pour calculer le nombre d'√©l√©ments dans le tableau.

.. code-block:: Arduino
  :emphasize-lines: 4

  void setup() {
    // Mettez ici votre code de configuration, ex√©cut√© une seule fois :
    Serial.begin(9600);  // Initialiser la communication s√©rie √† 9600 baud
    int notes = sizeof(melody) / sizeof(melody[0]); // Calculer le nombre d'√©l√©ments
  }

  
* ``sizeof(melody)`` donne le nombre total d'octets utilis√©s par tous les √©l√©ments du tableau.
* ``sizeof(melody[0])`` donne le nombre d'octets utilis√©s par un seul √©l√©ment du tableau.
* Diviser le nombre total d'octets par le nombre d'octets par √©l√©ment donne le nombre total d'√©l√©ments dans le tableau.

7. Ensuite, utilisez une instruction ``for`` pour parcourir les √©l√©ments du tableau ``melody[]``, et les imprimer √† l'aide de la fonction ``Serial.println()``.

.. code-block:: Arduino

  // D√©finir les fr√©quences pour les notes de la gamme de Do majeur (octave √† partir du Do central)
  int c = 262;
  int d = 294;
  int e = 330;
  int f = 349;
  int g = 392;
  int a = 440;
  int b = 494;
  int C = 523;  // Do aigu

  // D√©finir un tableau contenant la s√©quence des notes de la m√©lodie
  int melody[] = { c, c, g, g, a, a, g, f, f, e, e, d, d, c, g, g, f, f, e, e, d, g, g, f, f, e, e, d, c, c, g, g, a, a, g, f, f, e, e, d, d, c };


  void setup() {
    // Mettez ici votre code de configuration, ex√©cut√© une seule fois :
    Serial.begin(9600);                              // Initialiser la communication s√©rie √† 9600 baud
    int notes = sizeof(melody) / sizeof(melody[0]);  // Calculer le nombre d'√©l√©ments
    // Boucler √† travers chaque note du tableau melody
    for (int i = 0; i < notes; i = i + 1) {
      // Imprimer la fr√©quence de chaque note dans le moniteur s√©rie
      Serial.println(melody[i]);
    }
  }

  void loop() {
    // Mettez ici votre code principal, ex√©cut√© en boucle :
  }

8. Apr√®s avoir t√©l√©vers√© le code sur l'Arduino Uno R3, ouvrez le moniteur s√©rie et vous verrez les √©l√©ments du tableau ``melody[]`` imprim√©s un par un.

.. code-block::

  262
  262
  392
  392
  440
  440
  392
  349
  349
  330
  ...

**Questions**

Vous pouvez √©galement effectuer des op√©rations sur les √©l√©ments du tableau, par exemple en changeant pour ``Serial.println(melody[i] * 1.3);`` Quels types de donn√©es obtiendrez-vous et pourquoi ?


Cr√©ation du Code - Jouer "Ah! Vous dirai-je, Maman"
------------------------------------------------------

Maintenant que nous comprenons bien comment cr√©er des tableaux, acc√©der aux √©l√©ments du tableau et calculer leur longueur ainsi que leurs op√©rations, appliquons cette connaissance pour programmer un buzzer passif √† jouer "Ah! Vous dirai-je, Maman" en utilisant des fr√©quences et des intervalles stock√©s.

1. Ouvrez le sketch que vous avez sauvegard√© pr√©c√©demment, ``Lesson22_Array``.

2. Cliquez sur ‚ÄúEnregistrer sous...‚Äù dans le menu "Fichier", et renommez-le en ``Lesson22_Little_Star``. Cliquez sur "Enregistrer".

3. Tout d'abord, d√©finissez la broche du buzzer.

.. code-block:: Arduino

  const int buzzerPin = 9;  // Assigne la broche 9 √† la constante pour le buzzer


4. Cr√©ez maintenant un autre tableau pour stocker la dur√©e des notes.

.. code-block:: Arduino
  :emphasize-lines: 3

  // Configurer la s√©quence des notes et leurs dur√©es en millisecondes
  int melody[] = { c, c, g, g, a, a, g, f, f, e, e, d, d, c, g, g, f, f, e, e, d, g, g, f, f, e, e, d, c, c, g, g, a, a, g, f, f, e, e, d, d, c };
  int noteDurations[] = { 500, 500, 500, 500, 500, 500, 1000, 500, 500, 500, 500, 500, 500, 1000, 500, 500, 500, 500, 500, 500, 1000, 500, 500, 500, 500, 500, 500, 1000, 500, 500, 500, 500, 500, 500, 1000, 500, 500, 500, 500, 500, 500, 1000 };

5. D√©placez maintenant une partie du code de ``void setup()`` vers ``void loop()``.

.. code-block:: Arduino
  :emphasize-lines: 8-13

  void setup() {
    // Mettez ici votre code de configuration, ex√©cut√© une seule fois :
    Serial.begin(9600);                              // Initialiser la communication s√©rie √† 9600 baud
  }

  void loop() {
    // Mettez ici votre code principal, ex√©cut√© en boucle :
    int notes = sizeof(melody) / sizeof(melody[0]);  // Calculer le nombre d'√©l√©ments
    // Boucle √† travers chaque note du tableau melody
    for (int i = 0; i < notes; i = i + 1) {
      // Imprimer la fr√©quence de chaque note dans le moniteur s√©rie
      Serial.println(melody[i]);
    }
  }

6. Dans l'instruction ``for``, commentez le code d'impression et utilisez la fonction ``tone()`` pour jouer les notes.

.. code-block:: Arduino
  :emphasize-lines: 9

  void loop() {
    // Mettez ici votre code principal, ex√©cut√© en boucle :
    int notes = sizeof(melody) / sizeof(melody[0]);  // Calculer le nombre d'√©l√©ments
    // Boucle √† travers chaque note du tableau melody
    for (int i = 0; i < notes; i = i + 1) {
      // Imprimer la fr√©quence de chaque note dans le moniteur s√©rie
      // Serial.println(melody[i]);

      tone(buzzerPin, melody[i], noteDurations[i]);  // Jouer la note
    }
  }

7. Apr√®s chaque note jou√©e, pour rendre la m√©lodie plus naturelle, ajoutez une courte pause entre deux notes. Ici, nous multiplions la dur√©e des notes par 1,30 pour calculer l'intervalle, afin que la m√©lodie ne semble pas trop pr√©cipit√©e.

.. code-block:: Arduino
  :emphasize-lines: 10

  void loop() {
    // Mettez ici votre code principal, ex√©cut√© en boucle :
    int notes = sizeof(melody) / sizeof(melody[0]);  // Calculer le nombre d'√©l√©ments
    // Boucle √† travers chaque note du tableau melody
    for (int i = 0; i < notes; i = i + 1) {
      // Imprimer la fr√©quence de chaque note dans le moniteur s√©rie
      // Serial.println(melody[i]);

      tone(buzzerPin, melody[i], noteDurations[i]);  // Jouer la note
      delay(noteDurations[i] * 1.30);                // Attendre avant de changer la note
    }
  }

8. Utilisez la fonction ``noTone()`` pour arr√™ter la sortie du son sur la broche actuelle. C'est une √©tape n√©cessaire pour s'assurer que chaque note est jou√©e clairement sans se fondre dans la suivante.

.. code-block:: Arduino
  :emphasize-lines: 11

  void loop() {
    // Mettez ici votre code principal, ex√©cut√© en boucle :
    int notes = sizeof(melody) / sizeof(melody[0]);  // Calculer le nombre d'√©l√©ments
    // Boucle √† travers chaque note du tableau melody
    for (int i = 0; i < notes; i = i + 1) {
      // Imprimer la fr√©quence de chaque note dans le moniteur s√©rie
      // Serial.println(melody[i]);

      tone(buzzerPin, melody[i], noteDurations[i]);  // Jouer la note
      delay(noteDurations[i] * 1.30);                // Attendre avant de changer la note
      noTone(buzzerPin);                             // Arr√™ter de jouer la note
    }
  }

9. Voici votre code complet, et une fois que vous aurez t√©l√©vers√© le code sur l'Arduino Uno R3, vous pourrez entendre le buzzer jouer "Ah! Vous dirai-je, Maman".

.. code-block:: Arduino

  int buzzerPin = 9;  // Assigne la broche 9 √† la constante pour le buzzer

  // D√©finir les fr√©quences des notes de la gamme de Do majeur (octave √† partir du Do central)
  int c = 262;
  int d = 294;
  int e = 330;
  int f = 349;
  int g = 392;
  int a = 440;
  int b = 494;
  int C = 523;  // Do aigu

  // Configurer la s√©quence des notes et leurs dur√©es en millisecondes
  int melody[] = { c, c, g, g, a, a, g, f, f, e, e, d, d, c, g, g, f, f, e, e, d, g, g, f, f, e, e, d, c, c, g, g, a, a, g, f, f, e, e, d, d, c };
  int noteDurations[] = { 500, 500, 500, 500, 500, 500, 1000, 500, 500, 500, 500, 500, 500, 1000, 500, 500, 500, 500, 500, 500, 1000, 500, 500, 500, 500, 500, 500, 1000, 500, 500, 500, 500, 500, 500, 1000, 500, 500, 500, 500, 500, 500, 1000 };

  void setup() {
    // Mettez ici votre code de configuration, ex√©cut√© une seule fois :
    Serial.begin(9600);                              // Initialiser la communication s√©rie √† 9600 baud
  }

  void loop() {
    // Mettez ici votre code principal, ex√©cut√© en boucle :
    int notes = sizeof(melody) / sizeof(melody[0]);  // Calculer le nombre d'√©l√©ments
    // Boucle √† travers chaque note du tableau melody
    for (int i = 0; i < notes; i = i + 1) {
      // Imprimer la fr√©quence de chaque note dans le moniteur s√©rie
      // Serial.println(melody[i]);

      tone(buzzerPin, melody[i], noteDurations[i]);  // Jouer la note
      delay(noteDurations[i] * 1.30);                // Attendre avant de changer la note
      noTone(buzzerPin);                             // Arr√™ter de jouer la note
    }
  }
  
10. Enfin, n'oubliez pas de sauvegarder votre code et de ranger votre espace de travail.

**Question**

Si vous remplacez le buzzer passif par un buzzer actif dans le circuit, pourrez-vous jouer "Ah! Vous dirai-je, Maman" correctement ? Pourquoi ?

**R√©sum√©**

Maintenant que la le√ßon est termin√©e, nous avons appris √† utiliser des tableaux pour stocker des donn√©es, calculer la longueur d'un tableau, indexer des √©l√©ments dans un tableau et effectuer des op√©rations sur chaque √©l√©ment. En stockant les fr√©quences des notes et les intervalles de temps dans des tableaux et en les parcourant avec une boucle for, nous avons r√©ussi √† programmer un buzzer passif pour jouer "Ah! Vous dirai-je, Maman".

De plus, nous avons appris √† interrompre la lecture d'une note √† l'aide de la fonction ``noTone()``.

Cette le√ßon a renforc√© notre compr√©hension des op√©rations sur les tableaux et des structures de contr√¥le en programmation, tout en d√©montrant comment ces concepts peuvent √™tre appliqu√©s pour cr√©er de la musique avec des composants √©lectroniques, reliant ainsi des connaissances th√©oriques √† des applications pratiques de mani√®re ludique et engageante.


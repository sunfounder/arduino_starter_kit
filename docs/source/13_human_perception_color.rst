.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook¬†! Plongez plus profond√©ment dans Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions et cadeaux festifs** : Participez √† des promotions et √† des cadeaux sp√©ciaux pendant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous¬†? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

13. Le Spectre de la Vision
================================================================================
Bienvenue dans cette le√ßon o√π nous d√©voilons le myst√®re de la perception des couleurs chez l‚Äôhumain et reproduisons cette capacit√© avec la technologie. Dans cette le√ßon, nous explorerons comment nos yeux distinguent des millions de couleurs et comment cette capacit√© incroyable peut √™tre simul√©e num√©riquement avec des LED RGB. En explorant l'interaction des photor√©cepteurs de nos yeux et du mod√®le de couleur RGB, vous apprendrez √† recr√©er la vivacit√© du monde en forme num√©rique.

.. raw:: html

    <video muted controls style = "max-width:90%">
        <source src="_static/video/13_human_perception_color.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>


**Aper√ßu**

Le syst√®me visuel humain peut percevoir environ dix millions de couleurs diff√©rentes, 
une capacit√© obtenue gr√¢ce aux cellules photor√©ceptrices de la r√©tine ‚Äì les c√¥nes et 
les b√¢tonnets. La perception des couleurs n'est pas lin√©aire ; notre syst√®me visuel 
est plus sensible aux variations de certaines couleurs qu'√† d'autres. Les c√¥nes, 
sensibles √† la couleur, existent en trois types principaux, chacun √©tant le plus 
r√©ceptif √† la lumi√®re rouge, verte ou bleue.

Le mod√®le de couleur RGB est un mod√®le additif dans lequel les couleurs sont cr√©√©es en 
m√©langeant des intensit√©s variables de lumi√®re rouge, verte et bleue. Dans ce mod√®le, 
le rouge, le vert et le bleu sont consid√©r√©s comme des canaux de couleur primaires. 
En ajustant l‚Äôintensit√© de chaque canal (de 0 √† une valeur maximale, g√©n√©ralement 255 
correspondant √† une profondeur de couleur de 8 bits), il est possible de produire un 
spectre visible de plus de 16 millions de couleurs. Par exemple, on peut obtenir du 
orange en m√©langeant plus de rouge avec moins de vert.

.. image:: img/13_mix_orange.jpg

Dans cette le√ßon interactive, vous appliquerez ces principes pour contr√¥ler une LED RGB, lui permettant d'afficher les couleurs de votre choix gr√¢ce √† des commandes √©lectroniques pr√©cises.

**Objectifs d'apprentissage**

* Comprendre comment ce mod√®le imite la perception des couleurs humaines et son application dans les affichages num√©riques.
* Apprendre √† utiliser la modulation de largeur d'impulsion (PWM) pour un m√©lange subtil des couleurs avec une LED RGB.
* Am√©liorer l'efficacit√© et la clart√© de votre code en cr√©ant des fonctions prenant des param√®tres dans Arduino.
* Exp√©rimenter diff√©rentes valeurs RGB pour personnaliser les couleurs sur votre LED, refl√©tant la complexit√© de la vision des couleurs humaines.


Montage du Circuit
-----------------------

**Composants n√©cessaires**

.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * LED RGB
     - 3 * R√©sistances de 220Œ©
     - Fils de connexion
   * - |list_uno_r3| 
     - |list_rgb_led| 
     - |list_220ohm| 
     - |list_wire| 
   * - 1 * C√¢ble USB
     - 1 * Plaque d'essai (breadboard)
     - -
     - -
   * - |list_usb_cable| 
     - |list_breadboard| 
     - -
     - -

Cette le√ßon utilise le m√™me circuit que la Le√ßon 12.

.. image:: img/12_mix_color_bb_4.png
    :width: 600
    :align: center


Cr√©ation de Code - Affichage des Couleurs
------------------------------------------------

Dans notre parcours pour ma√Ætriser le contr√¥le des LED RGB, nous avons vu comment utiliser ``digitalWrite()`` pour allumer la LED dans des couleurs basiques. Pour explorer plus en profondeur et d√©bloquer tout le spectre de couleurs qu'une LED RGB peut produire, nous allons maintenant utiliser ``analogWrite()`` pour envoyer des signaux PWM (modulation de largeur d'impulsion), ce qui nous permettra d'obtenir une large gamme de teintes.

Voyons comment impl√©menter cela avec du code.

1. Ouvrez l'IDE Arduino et d√©marrez un nouveau projet en s√©lectionnant ¬´¬†Nouveau Sketch¬†¬ª dans le menu ¬´¬†Fichier¬†¬ª.
2. Enregistrez votre sketch sous le nom de ``Lesson13_PWM_Color_Mixing`` en utilisant ``Ctrl + S`` ou en cliquant sur ¬´¬†Enregistrer¬†¬ª.

3. Tout d'abord, configurez les trois broches de la LED RGB en tant que sorties¬†:

.. code-block:: Arduino
    :emphasize-lines: 3-5

    void setup() {
        // Code d'initialisation √† ex√©cuter une seule fois :
        pinMode(9, OUTPUT);   // Configurer la broche bleue de la LED RGB en sortie
        pinMode(10, OUTPUT);  // Configurer la broche verte de la LED RGB en sortie
        pinMode(11, OUTPUT);  // Configurer la broche rouge de la LED RGB en sortie
    }

4. Utilisez ``analogWrite()`` pour envoyer des valeurs PWM √† la LED RGB. Dans la Le√ßon 9, nous avons appris que les valeurs PWM peuvent changer la luminosit√© d'une LED, et que la plage PWM est de 0 √† 255. Pour afficher du rouge, nous r√©glons la valeur PWM de la broche rouge de la LED RGB √† 255, et les deux autres broches √† 0.

.. code-block:: Arduino
    :emphasize-lines: 10-12

    void setup() {
        // Code d'initialisation √† ex√©cuter une seule fois :
        pinMode(9, OUTPUT);   // Configurer la broche bleue de la LED RGB en sortie
        pinMode(10, OUTPUT);  // Configurer la broche verte de la LED RGB en sortie
        pinMode(11, OUTPUT);  // Configurer la broche rouge de la LED RGB en sortie
    }

    void loop() {
        // Code principal √† ex√©cuter en boucle :
        analogWrite(9, 0);    // R√©gler la valeur PWM de la broche bleue √† 0
        analogWrite(10, 0);   // R√©gler la valeur PWM de la broche verte √† 0
        analogWrite(11, 255);  // R√©gler la valeur PWM de la broche rouge √† 255
    }

5. Avec cette configuration, apr√®s avoir t√©l√©charg√© le code sur l'Arduino Uno R3, vous verrez la LED RGB afficher la couleur rouge.

6. La fonction ``analogWrite()`` permet √† la LED RGB d'afficher non seulement les sept couleurs de base, mais √©galement de nombreuses autres nuances. Vous pouvez maintenant ajuster les valeurs des broches 9, 10 et 11 s√©par√©ment, et enregistrer les couleurs observ√©es dans votre carnet.

.. list-table::
    :widths: 20 20 20 40
    :header-rows: 1

    *   - Broche Rouge    
        - Broche Verte  
        - Broche Bleue
        - Couleur
    *   - 0
        - 128
        - 128
        - 
    *   - 128
        - 0
        - 255
        - 
    *   - 128
        - 128
        - 255
        - 
    *   - 255
        - 128
        - 0
        -     

Cr√©ation de Code - Fonctions Param√©tr√©es
------------------------------------------------

L'utilisation de la fonction ``analogWrite()`` pour afficher diff√©rentes couleurs peut rendre votre code long si vous souhaitez afficher plusieurs couleurs en m√™me temps. Par cons√©quent, nous devons cr√©er des fonctions.

Contrairement √† la le√ßon pr√©c√©dente, nous nous pr√©parons √† cr√©er une fonction avec des param√®tres.

Une fonction param√©tr√©e vous permet de passer des valeurs sp√©cifiques √† la fonction, qui les utilisera pour effectuer ses t√¢ches. Cela est particuli√®rement utile pour ajuster des propri√©t√©s telles que l'intensit√© des couleurs de mani√®re dynamique. Cela rend votre code plus flexible et facile √† lire.

Lorsque vous d√©finissez une fonction param√©tr√©e, vous sp√©cifiez les valeurs dont elle a besoin pour fonctionner √† travers des param√®tres list√©s entre parenth√®ses juste apr√®s le nom de la fonction. Ces param√®tres agissent comme des variables temporaires qui sont remplac√©es par des valeurs r√©elles lorsque la fonction est appel√©e.

Voici comment d√©finir une fonction param√©tr√©e pour r√©gler la couleur d'une LED RGB :

1. Ouvrez le sketch que vous avez sauvegard√© pr√©c√©demment, ``Lesson13_PWM_Color_Mixing``.

2. Cliquez sur "Enregistrer sous..." dans le menu "Fichier" et renommez-le en ``Lesson13_PWM_Color_Mixing_Function``. Cliquez sur "Enregistrer".

3. Commencez par d√©clarer la fonction apr√®s la fonction ``void loop()`` avec le mot-cl√© ``void``, suivi du nom de la fonction et des param√®tres entre parenth√®ses. Pour notre fonction ``setColor``, nous utiliserons trois param√®tres‚Äî``red``, ``green`` et ``blue``‚Äîchacun repr√©sentant l'intensit√© du composant couleur correspondant de la LED RGB.

.. code-block:: Arduino
    :emphasize-lines: 5,6

    void loop() {
        // mettez ici votre code principal √† ex√©cuter en boucle
    }

    void setColor(int red, int green, int blue) {
    }

4. Dans le corps de la fonction, utilisez la commande ``analogWrite()`` pour envoyer des signaux PWM aux broches de la LED RGB. Les valeurs pass√©es √† ``setColor`` d√©termineront la luminosit√© de chaque couleur. Les param√®tres ``red``, ``green`` et ``blue`` sont utilis√©s ici pour contr√¥ler directement l'intensit√© de chaque broche de la LED.

.. code-block:: Arduino

    // Fonction pour d√©finir la couleur de la LED RGB
    void setColor(int red, int green, int blue) {
        // √âcrire la valeur PWM pour le rouge, le vert et le bleu sur la LED RGB
        analogWrite(11, red);
        analogWrite(10, green);
        analogWrite(9, blue);
    }

5. Vous pouvez maintenant appeler votre nouvelle fonction ``setColor()`` dans la fonction ``void loop()``. Puisque vous avez cr√©√© une fonction avec des param√®tres, vous devez remplir les arguments dans les ``()`` comme ``(255, 0, 0)``. N'oubliez pas d'ajouter des commentaires.

.. code-block:: Arduino
    :emphasize-lines: 3

    void loop() {
        // mettez ici votre code principal √† ex√©cuter en boucle
        setColor(255, 0, 0); // Affiche la couleur rouge
    }

    // Fonction pour d√©finir la couleur de la LED RGB
    void setColor(int red, int green, int blue) {
        // √âcrire la valeur PWM pour le rouge, le vert et le bleu sur la LED RGB
        analogWrite(11, red);
        analogWrite(10, green);
        analogWrite(9, blue);
    }

6. Nous savons d√©j√† qu'en fournissant diff√©rentes valeurs aux trois broches de la LED RGB, nous pouvons afficher diff√©rentes couleurs de lumi√®re. Comment faire en sorte que la LED RGB affiche pr√©cis√©ment la couleur que nous voulons ? Pour cela, vous aurez besoin de l'aide d'une palette de couleurs. Ouvrez **Paint** (ce logiciel est fourni avec Windows) ou tout autre logiciel de dessin sur votre ordinateur personnel.

.. image:: img/13_mix_color_paint.png

7. Choisissez une couleur qui vous pla√Æt et notez ses valeurs RGB.

.. note::

    Notez qu'avant de s√©lectionner une couleur, ajustez les lumens √† la position appropri√©e.

.. image:: img/13_mix_color_paint_2.png

8. Ins√©rez la couleur que vous avez s√©lectionn√©e dans la fonction ``setColor()`` dans la ``void loop()``, et utilisez la fonction ``delay()`` pour sp√©cifier la dur√©e d'affichage de chaque couleur.

.. code-block:: Arduino

    void loop() {
        // mettez ici votre code principal √† ex√©cuter en boucle
        setColor(255, 0, 0);      // Affiche la couleur rouge
        delay(1000);              // Attendre 1 seconde
        setColor(0, 128, 128);    // Affiche la couleur turquoise
        delay(1000);              // Attendre 1 seconde
        setColor(128, 0, 255);    // Affiche la couleur violette
        delay(1000);              // Attendre 1 seconde
        setColor(128, 128, 255);  // Affiche la couleur bleu clair
        delay(1000);              // Attendre 1 seconde
        setColor(255, 128, 0);    // Affiche la couleur orange
        delay(1000);              // Attendre 1 seconde
    }

9. Voici le code complet¬†; vous pouvez cliquer sur "T√©l√©verser" pour envoyer le code √† l'Arduino Uno R3 et voir les effets.

.. code-block:: Arduino

    void setup() {
        // mettez ici votre code de configuration √† ex√©cuter une seule fois
        pinMode(9, OUTPUT);   // Configurer la broche bleue de la LED RGB en sortie
        pinMode(10, OUTPUT);  // Configurer la broche verte de la LED RGB en sortie
        pinMode(11, OUTPUT);  // Configurer la broche rouge de la LED RGB en sortie
    }

    void loop() {
        // mettez ici votre code principal √† ex√©cuter en boucle
        setColor(255, 0, 0);      // Affiche la couleur rouge
        delay(1000);              // Attendre 1 seconde
        setColor(0, 128, 128);    // Affiche la couleur turquoise
        delay(1000);              // Attendre 1 seconde
        setColor(128, 0, 255);    // Affiche la couleur violette
        delay(1000);              // Attendre 1 seconde
        setColor(128, 128, 255);  // Affiche la couleur bleu clair
        delay(1000);              // Attendre 1 seconde
        setColor(255, 128, 0);    // Affiche la couleur orange
        delay(1000);              // Attendre 1 seconde
    }

    // Fonction pour d√©finir la couleur de la LED RGB
    void setColor(int red, int green, int blue) {
        // √âcrire la valeur PWM pour le rouge, le vert et le bleu sur la LED RGB
        analogWrite(11, red);
        analogWrite(10, green);
        analogWrite(9, blue);
    }

10. Enfin, n'oubliez pas de sauvegarder votre code et de ranger votre espace de travail.

**R√©sum√©**

L'exploration d'aujourd'hui sur la perception des couleurs fait le lien entre la science biologique et l'application √©lectronique, mettant en lumi√®re la puissance de la programmation pour donner vie √† des concepts abstraits. En ajustant les valeurs RGB sur une LED, vous avez imit√© la mani√®re dont l'≈ìil per√ßoit les couleurs, acqu√©rant ainsi √† la fois une meilleure compr√©hension de la biologie humaine et des comp√©tences avanc√©es en contr√¥le √©lectronique.

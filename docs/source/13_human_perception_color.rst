.. note::

    ¬°Hola! Bienvenido a la comunidad de entusiastas de SunFounder Raspberry Pi, Arduino y ESP32 en Facebook. Sum√©rgete en el mundo de Raspberry Pi, Arduino y ESP32 junto a otros entusiastas.

    **¬øPor qu√© unirte?**

    - **Soporte de expertos**: Resuelve problemas post-venta y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Vistas previas exclusivas**: Obt√©n acceso anticipado a anuncios y adelantos de nuevos productos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones y sorteos festivos**: Participa en sorteos y promociones especiales durante las festividades.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo.

13. El Espectro de la Visi√≥n
================================================================================
Bienvenido a esta lecci√≥n, donde desentra√±amos el misterio de la percepci√≥n del color humano y lo replicamos utilizando tecnolog√≠a. En esta lecci√≥n, profundizaremos en c√≥mo nuestros ojos distinguen millones de colores y c√≥mo esta incre√≠ble capacidad puede ser simulada digitalmente con LEDs RGB. Explorando la interacci√≥n entre los fotorreceptores en nuestros ojos y el modelo de color RGB, aprender√°s a recrear la viveza del mundo en forma digital.

.. raw:: html

    <video muted controls style = "max-width:90%">
        <source src="_static/video/13_human_perception_color.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

**Visi√≥n General**

El sistema visual humano puede percibir aproximadamente diez millones de colores 
diferentes, una capacidad lograda gracias a las c√©lulas fotorreceptoras en la retina: 
conos y bastones. La percepci√≥n del color no es lineal; nuestro sistema visual es m√°s 
sensible a los cambios en ciertos colores que en otros. Los conos, que son sensibles 
al color, vienen principalmente en tres tipos, cada uno m√°s sensible a la luz roja, 
verde o azul.

El modelo de color RGB es un modelo de color aditivo en el que los colores se crean 
mezclando diferentes intensidades de luz roja, verde y azul. En este modelo, el rojo, 
verde y azul se consideran t√≠picamente los canales de color primarios. Al ajustar la 
intensidad de cada canal (de 0 a un valor m√°ximo, generalmente 255 que corresponde a 
una profundidad de color de 8 bits), es posible producir un espectro visible de m√°s de 
16 millones de colores diferentes. Por ejemplo, se puede lograr un color naranja mezclando 
m√°s rojo con menos verde.

.. image:: img/13_mix_orange.jpg

En esta lecci√≥n interactiva, aplicar√°s estos principios para controlar un LED RGB, permiti√©ndole mostrar los colores que elijas mediante comandos electr√≥nicos precisos.

**Objetivos de Aprendizaje**

* Comprender c√≥mo este modelo imita la percepci√≥n del color humano y su aplicaci√≥n en pantallas digitales.
* Aprender a usar la Modulaci√≥n por Ancho de Pulso (PWM) para lograr una mezcla de colores precisa con un LED RGB.
* Mejorar la eficiencia y claridad de tu c√≥digo creando funciones que tomen par√°metros en Arduino.
* Experimentar con diferentes valores RGB para personalizar los colores en tu LED, reflejando la complejidad de la visi√≥n del color humano.

Construcci√≥n del Circuito
------------------------------

**Componentes Necesarios**

.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * LED RGB
     - 3 * Resistencias de 220Œ©
     - Cables jumper
   * - |list_uno_r3| 
     - |list_rgb_led| 
     - |list_220ohm| 
     - |list_wire| 
   * - 1 * Cable USB
     - 1 * Protoboard
     - 
     - 
   * - |list_usb_cable| 
     - |list_breadboard| 
     - 
     - 

Esta lecci√≥n utiliza el mismo circuito que la Lecci√≥n 12.

.. image:: img/12_mix_color_bb_4.png
    :width: 600
    :align: center


Creaci√≥n de C√≥digo - Mostrando Colores
------------------------------------------

En nuestro camino para dominar el control de los LEDs RGB, hemos visto c√≥mo usando ``digitalWrite()`` podemos iluminar el LED en colores b√°sicos. Para explorar m√°s a fondo y desbloquear todo el espectro de colores que un LED RGB puede producir, ahora profundizaremos en el uso de ``analogWrite()`` para enviar se√±ales PWM (Modulaci√≥n por Ancho de Pulso), lo que nos permitir√° lograr una amplia gama de tonos.

Veamos c√≥mo podemos implementar esto con c√≥digo.

1. Abre el IDE de Arduino y comienza un nuevo proyecto seleccionando "Nuevo Sketch" en el men√∫ "Archivo".
2. Guarda tu sketch como ``Lesson13_PWM_Color_Mixing`` usando ``Ctrl + S`` o haciendo clic en "Guardar".

3. Primero, configura los tres pines del LED RGB como salidas:

.. code-block:: Arduino
    :emphasize-lines: 3-5

    void setup() {
        // C√≥digo de configuraci√≥n que se ejecuta una vez:
        pinMode(9, OUTPUT);   // Configurar el pin Azul del LED RGB como salida
        pinMode(10, OUTPUT);  // Configurar el pin Verde del LED RGB como salida
        pinMode(11, OUTPUT);  // Configurar el pin Rojo del LED RGB como salida
    }

4. Usa ``analogWrite()`` para enviar valores PWM al LED RGB. Desde la Lecci√≥n 9, sabemos que los valores PWM pueden cambiar el brillo de un LED, y el rango de PWM es de 0 a 255. Para mostrar rojo, configuramos el valor PWM del pin rojo del LED RGB en 255, y los otros dos pines en 0.

.. code-block:: Arduino
    :emphasize-lines: 10-12

    void setup() {
        // C√≥digo de configuraci√≥n que se ejecuta una vez:
        pinMode(9, OUTPUT);   // Configurar el pin Azul del LED RGB como salida
        pinMode(10, OUTPUT);  // Configurar el pin Verde del LED RGB como salida
        pinMode(11, OUTPUT);  // Configurar el pin Rojo del LED RGB como salida
    }

    void loop() {
        // C√≥digo principal que se ejecuta repetidamente:
        analogWrite(9, 0);    // Establecer el valor PWM del pin Azul en 0
        analogWrite(10, 0);   // Establecer el valor PWM del pin Verde en 0
        analogWrite(11, 255); // Establecer el valor PWM del pin Rojo en 255
    }

5. Con esta configuraci√≥n, despu√©s de subir el c√≥digo al Arduino Uno R3, ver√°s que el LED RGB muestra el color rojo.

6. La funci√≥n ``analogWrite()`` permite que el LED RGB muestre no solo los siete colores b√°sicos, sino tambi√©n muchos otros tonos diferentes. Ahora puedes ajustar los valores de los pines 9, 10 y 11 por separado y registrar los colores observados en tu cuaderno.

.. list-table::
    :widths: 20 20 20 40
    :header-rows: 1

    *   - Pin Rojo    
        - Pin Verde  
        - Pin Azul
        - Color
    *   - 0
        - 128
        - 128
        - 
    *   - 128
        - 0
        - 255
        - 
    *   - 128
        - 128
        - 255
        - 
    *   - 255
        - 128
        - 0
        -     

Creaci√≥n de C√≥digo - Funciones Parametrizadas
------------------------------------------------

Usar la funci√≥n ``analogWrite()`` para mostrar diferentes colores puede hacer que tu c√≥digo sea largo si deseas mostrar muchos colores al mismo tiempo. Por lo tanto, necesitamos crear funciones.

A diferencia de la lecci√≥n anterior, nos estamos preparando para crear una funci√≥n con par√°metros.

Una funci√≥n parametrizada te permite pasar valores espec√≠ficos a la funci√≥n, que luego puede usar para realizar sus tareas. Esto es muy √∫til para ajustar propiedades como la intensidad del color de manera din√°mica. Hace que tu c√≥digo sea m√°s flexible y f√°cil de leer.

Al definir una funci√≥n parametrizada, especificas qu√© valores necesita para operar a trav√©s de par√°metros listados entre par√©ntesis justo despu√©s del nombre de la funci√≥n. Estos par√°metros act√∫an como marcadores de posici√≥n que se reemplazan por valores reales cuando se llama a la funci√≥n.

Aqu√≠ te mostramos c√≥mo definir una funci√≥n parametrizada para configurar el color de un LED RGB:

1. Abre el sketch que guardaste anteriormente, ``Lesson13_PWM_Color_Mixing``.

2. Haz clic en ‚ÄúGuardar como...‚Äù en el men√∫ ‚ÄúArchivo‚Äù y ren√≥mbralo a ``Lesson13_PWM_Color_Mixing_Function``. Haz clic en "Guardar".

3. Comienza declarando la funci√≥n despu√©s de ``void loop()`` con la palabra clave ``void``, seguida del nombre de la funci√≥n y los par√°metros entre par√©ntesis. Para nuestra funci√≥n ``setColor``, utilizaremos tres par√°metros: ``red``, ``green`` y ``blue``, cada uno representando la intensidad del componente de color correspondiente del LED RGB.

.. code-block:: Arduino
    :emphasize-lines: 5,6

    void loop() {
        // Escribe aqu√≠ el c√≥digo principal que se ejecutar√° repetidamente:
    }

    void setColor(int red, int green, int blue) {
    }

   
4. Dentro del cuerpo de la funci√≥n, usa el comando ``analogWrite()`` para enviar se√±ales PWM a los pines del LED RGB. Los valores pasados a ``setColor`` determinar√°n el brillo de cada color. Los par√°metros ``red``, ``green`` y ``blue`` se usan aqu√≠ para controlar directamente la intensidad de cada pin del LED.

.. code-block:: Arduino

    // Funci√≥n para configurar el color del LED RGB
    void setColor(int red, int green, int blue) {
        // Escribir valor PWM para rojo, verde y azul en el LED RGB
        analogWrite(11, red);
        analogWrite(10, green);
        analogWrite(9, blue);
    }


5. Ahora puedes llamar a la funci√≥n que acabas de crear ``setColor()`` dentro de ``void loop()``. Dado que creaste una funci√≥n con par√°metros, debes completar los argumentos en los par√©ntesis como ``(255, 0, 0)``. Recuerda a√±adir comentarios.

.. code-block:: Arduino
    :emphasize-lines: 3

    void loop() {
        // Escribe aqu√≠ el c√≥digo principal que se ejecutar√° repetidamente:
        setColor(255, 0, 0); // Mostrar color rojo
    }

    // Funci√≥n para configurar el color del LED RGB
    void setColor(int red, int green, int blue) {
        // Escribir valor PWM para rojo, verde y azul en el LED RGB
        analogWrite(11, red);
        analogWrite(10, green);
        analogWrite(9, blue);
    }

6. Ya sabemos que al proporcionar diferentes valores a los tres pines del LED RGB, podemos encender diferentes colores de luz. Entonces, ¬øc√≥mo logramos que el LED RGB emita exactamente el color que queremos? Esto requiere la ayuda de una paleta de colores. Abre **Paint** (este software viene con Windows) o cualquier software de dibujo en tu computadora personal.

.. image:: img/13_mix_color_paint.png

7. Elige un color que te guste y registra sus valores RGB.

.. note::

    Ten en cuenta que antes de seleccionar un color, ajusta los l√∫menes a la posici√≥n adecuada.

.. image:: img/13_mix_color_paint_2.png

8. Inserta el color que seleccionaste en la funci√≥n ``setColor()`` dentro de ``void loop()``, y usa la funci√≥n ``delay()`` para especificar el tiempo de visualizaci√≥n de cada color.

.. code-block:: Arduino

    void loop() {
        // C√≥digo principal que se ejecutar√° repetidamente:
        setColor(255, 0, 0);      // Mostrar color rojo
        delay(1000);              // Esperar 1 segundo
        setColor(0, 128, 128);    // Mostrar color aguamarina
        delay(1000);              // Esperar 1 segundo
        setColor(128, 0, 255);    // Mostrar color p√∫rpura
        delay(1000);              // Esperar 1 segundo
        setColor(128, 128, 255);  // Mostrar color azul claro
        delay(1000);              // Esperar 1 segundo
        setColor(255, 128, 0);    // Mostrar color naranja
        delay(1000);              // Esperar 1 segundo
    }

9. A continuaci√≥n se muestra el c√≥digo completo; puedes hacer clic en "Subir" para cargar el c√≥digo en el Arduino Uno R3 y ver los efectos.

.. code-block:: Arduino

    void setup() {
        // C√≥digo de configuraci√≥n que se ejecuta una vez:
        pinMode(9, OUTPUT);   // Configurar el pin azul del LED RGB como salida
        pinMode(10, OUTPUT);  // Configurar el pin verde del LED RGB como salida
        pinMode(11, OUTPUT);  // Configurar el pin rojo del LED RGB como salida
    }

    void loop() {
        // C√≥digo principal que se ejecutar√° repetidamente:
        setColor(255, 0, 0);      // Mostrar color rojo
        delay(1000);              // Esperar 1 segundo
        setColor(0, 128, 128);    // Mostrar color aguamarina
        delay(1000);              // Esperar 1 segundo
        setColor(128, 0, 255);    // Mostrar color p√∫rpura
        delay(1000);              // Esperar 1 segundo
        setColor(128, 128, 255);  // Mostrar color azul claro
        delay(1000);              // Esperar 1 segundo
        setColor(255, 128, 0);    // Mostrar color naranja
        delay(1000);              // Esperar 1 segundo
    }

    // Funci√≥n para configurar el color del LED RGB
    void setColor(int red, int green, int blue) {
        // Escribir valor PWM para rojo, verde y azul en el LED RGB
        analogWrite(11, red);
        analogWrite(10, green);
        analogWrite(9, blue);
    }

10. Finalmente, recuerda guardar tu c√≥digo y organizar tu espacio de trabajo.


**Resumen**

La exploraci√≥n de hoy sobre la percepci√≥n del color conecta la biolog√≠a con su aplicaci√≥n electr√≥nica, destacando el poder de la programaci√≥n para dar vida a conceptos abstractos. Ajustando los valores RGB en un LED, has imitado el m√©todo que utiliza el ojo para percibir colores, ganando tanto una mayor apreciaci√≥n por la biolog√≠a humana como habilidades avanzadas en el control electr√≥nico.

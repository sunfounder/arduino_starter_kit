.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder sur Facebook ! Plongez plus profond√©ment dans le monde du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez vos probl√®mes apr√®s-vente et relevez vos d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez et partagez** : √âchangez des astuces et tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux nouvelles annonces de produits et b√©n√©ficiez d'aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions et concours festifs** : Participez √† des concours et des promotions sp√©ciales pendant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

18. Alarme lumineuse
========================

.. image:: img/18_light_alarm.png
    :width: 600
    :align: center

Imaginez une sc√®ne digne d'un film :
Dans un mus√©e faiblement √©clair√©, un voleur rus√© s'approche discr√®tement d'un tableau inestimable.
Il avance furtivement, essayant de r√©aliser son vol sous le couvert de la nuit.
Cependant, d√®s qu'il touche la peinture, une s√©rie de capteurs sophistiqu√©s se d√©clenche,
d√©clenchant des alarmes dans toute la galerie, illuminant instantan√©ment les environs.
Le voleur est rapidement appr√©hend√© par les agents de s√©curit√© sur place, emp√™chant ainsi un vol d'≈ìuvre d'art.
Ce n'est pas un film ; c'est un exemple r√©el de la technologie des capteurs utilis√©e dans les syst√®mes de s√©curit√© modernes.

Comment cela est-il r√©alis√© ? Cela implique de placer une photo-r√©sistance ou un capteur de lumi√®re plus sophistiqu√© pr√®s du cadre du tableau. Toute tentative de d√©placer ou de masquer la peinture modifie les conditions lumineuses, d√©clenchant ainsi le syst√®me d'alarme.

Construisons maintenant un syst√®me d'alarme lumineuse simul√© en utilisant une photo-r√©sistance et un buzzer, d'accord ?

.. raw:: html

    <video controls style = "max-width:90%">
        <source src="_static/video/18_light_alarm.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

Dans cette le√ßon, vous apprendrez :

* Les principes de fonctionnement et les caract√©ristiques d'une photo-r√©sistance.
* Comment construire un simple syst√®me d'alarme lumineuse.


Construction du circuit
---------------------------

**Composants n√©cessaires**

.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * Photo-r√©sistance
     - 1 * R√©sistance 10KŒ©
     - 1 * Buzzer actif
   * - |list_uno_r3| 
     - |list_photoresistor| 
     - |list_10kohm| 
     - |list_active_buzzer| 
   * - 1 * C√¢ble USB
     - 1 * Plaque d'essai
     - Fils de connexion
     - 1 * Multim√®tre
   * - |list_usb_cable| 
     - |list_breadboard| 
     - |list_wire| 
     - |list_meter|



**√âtapes de construction**

1. Commencez avec une photo-r√©sistance.

.. image:: img/17_photoresistor.png
    :width: 100
    :align: center

Une photo-r√©sistance ou cellule photo√©lectrique est une r√©sistance variable contr√¥l√©e par la lumi√®re. La r√©sistance d'une photo-r√©sistance diminue √† mesure que l'intensit√© de la lumi√®re incidente augmente ; en d'autres termes, elle pr√©sente une photoconductivit√©.

Les photo-r√©sistances peuvent √™tre utilis√©es comme des semi-conducteurs r√©sistifs dans des circuits de d√©tection sensibles √† la lumi√®re et dans des circuits de commutation activ√©s par la lumi√®re ou l'obscurit√©. Dans l'obscurit√©, la r√©sistance d'une photo-r√©sistance peut atteindre plusieurs m√©gaohms (MŒ©), tandis qu'en conditions lumineuses, elle peut descendre √† quelques centaines d'ohms.

Le kit comprend une r√©sistance de 10K √† 25¬∞C. Utilisez maintenant un multim√®tre pour mesurer la r√©sistance de la photo-r√©sistance dans des conditions de lumi√®re normale, √©clair√©e et d'obscurit√©.

2. Comme la r√©sistance nominale de la photo-r√©sistance est de 10K, r√©glez le multim√®tre pour mesurer la r√©sistance dans la plage des 20 kilo-ohms (20K).

.. image:: img/multimeter_20k.png
    :width: 300
    :align: center

3. Ins√©rez la photo-r√©sistance dans la plaque d'essai aux positions 10E et 11E. Les broches ne sont pas directionnelles et peuvent √™tre ins√©r√©es librement.

.. image:: img/17_light_alarm_photoresistor.png
    :width: 500
    :align: center

4. Touchez maintenant les deux broches de la photo-r√©sistance avec les sondes rouge et noire du multim√®tre.

.. image:: img/17_light_alarm_test.png
    :width: 500
    :align: center

5. Lisez la valeur de r√©sistance sous la lumi√®re ambiante actuelle et enregistrez-la dans le tableau ci-dessous.

.. list-table::
   :widths: 20 20
   :header-rows: 1

   * - Environnement
     - R√©sistance (kilohms)
   * - Lumi√®re normale
     - *5.48*
   * - Lumi√®re intense
     - 
   * - Obscurit√©
     - 

6. Demandez maintenant √† un ami d'√©clairer directement la photo-r√©sistance avec une lampe de poche ou une autre source lumineuse, enregistrez la valeur de r√©sistance, qui pourrait √™tre de quelques centaines d'ohms. Vous devrez donc peut-√™tre r√©gler le multim√®tre sur 2K, voire sur 200 ohms pour une lecture plus pr√©cise.

.. note::

    Nous avons d√©fini l'unit√© de r√©sistance dans le tableau en kilohms. 1 kilohm (kŒ©) = 1000 ohms.

    Si vous avez choisi la plage de 200 ohms et obtenu une lecture de 164,5 ohms, convertissez-la en 0,16 kilohms (arrondi recommand√© √† deux d√©cimales), puis entrez la valeur convertie dans le tableau.

.. list-table::
   :widths: 20 20
   :header-rows: 1

   * - Environnement
     - R√©sistance (kilohms)
   * - Lumi√®re normale
     - *‚âà5.48*
   * - Lumi√®re intense
     - *‚âà0.16*
   * - Obscurit√©
     - 

7. Pour les conditions d'obscurit√©, la r√©sistance de la photo-r√©sistance peut atteindre plusieurs m√©gaohms, nous devons donc r√©gler le multim√®tre sur la position 2 m√©gaohms.

.. image:: img/multimeter_2mŒ©.png
    :width: 300
    :align: center

8. Recouvrez compl√®tement la photo-r√©sistance avec un objet noir, puis enregistrez la r√©sistance mesur√©e dans le tableau.

.. note::
    Nous avons d√©fini l'unit√© de r√©sistance dans le tableau en kilohms. 1 m√©gaohm (MŒ©) = 1000 kilohms.

    Si vous avez choisi la plage de 2 m√©gaohms et obtenu une lecture de 1,954 m√©gaohms, convertissez-la en 1954 kilohms, qui est la valeur √† inscrire.

    Si la lecture d√©passe directement 2MŒ©, l'affichage indiquera "1.", auquel cas vous pouvez inscrire directement 2 m√©gaohms, ou envisager d'utiliser un multim√®tre plus pr√©cis pour obtenir une valeur exacte.

.. list-table::
   :widths: 20 20
   :header-rows: 1

   * - Environnement
     - R√©sistance (kilohms)
   * - Lumi√®re normale
     - *‚âà5.48*
   * - Lumi√®re intense
     - *‚âà0.16*
   * - Obscurit√©
     - *‚âà1954*

D'apr√®s les mesures, nous avons confirm√© les propri√©t√©s photoconductrices de la photo-r√©sistance : plus la lumi√®re est forte, plus la r√©sistance est faible ; plus la lumi√®re est faible, plus la r√©sistance est √©lev√©e, pouvant atteindre plusieurs m√©gaohms.

9. Continuez √† construire le circuit. Connectez une broche de la photo-r√©sistance √† la borne n√©gative de la plaque d'essai et l'autre broche au pin A0 de l'Arduino Uno R3.

.. image:: img/17_light_alarm_a0.png
    :width: 500
    :align: center

10. Ins√©rez une r√©sistance de 10K dans la m√™me rang√©e que la connexion de la photo-r√©sistance √† A0.

.. image:: img/17_light_alarm_resistor.png
    :width: 500
    :align: center

Dans ce circuit, la r√©sistance de 10K et la photo-r√©sistance sont connect√©es en s√©rie, et le courant qui les traverse est le m√™me. La r√©sistance de 10K agit comme protection, et le pin A0 lit la valeur apr√®s la conversion de la tension de la photo-r√©sistance.

Lorsque la lumi√®re augmente, la r√©sistance de la photo-r√©sistance diminue, donc sa tension diminue, et la valeur du pin A0 diminue ; si la lumi√®re est suffisamment forte, la r√©sistance de la photo-r√©sistance sera proche de 0, et la valeur du pin A0 sera proche de 0. √Ä ce moment-l√†, la r√©sistance de 10K joue un r√¥le de protection, emp√™chant un court-circuit en √©vitant que les 5V et la masse ne soient directement connect√©s.

Si vous placez la photo-r√©sistance dans l'obscurit√©, la valeur du pin A0 augmentera. Dans une obscurit√© totale, la r√©sistance de la photo-r√©sistance sera infinie, et sa tension sera proche de 5V (la r√©sistance de 10K devient n√©gligeable), et la valeur du pin A0 sera proche de 1023.

11. Connectez l'autre broche de la r√©sistance de 10K au pin 5V de l'Arduino Uno R3.

.. image:: img/17_light_alarm_5v.png
    :width: 500
    :align: center

12. Ensuite, comme dans la le√ßon pr√©c√©dente, ins√©rez le buzzer actif dans la plaque d'essai, en connectant son anode au pin 9 du R3 et sa cathode √† la borne n√©gative de la plaque d'essai.

.. image:: img/17_light_alarm_buzzer.png
    :width: 500
    :align: center

13. Enfin, connectez la borne n√©gative de la plaque d'essai au pin GND de l'Arduino Uno R3 √† l'aide d'un c√¢ble de connexion.


.. image:: img/17_light_alarm.png
    :width: 500
    :align: center

Cr√©ation du code
---------------------
1. Ouvrez l'IDE Arduino et d√©marrez un nouveau projet en s√©lectionnant "New Sketch" dans le menu "Fichier".
2. Enregistrez votre sketch sous le nom ``Lesson18_Light_Alarm`` en utilisant ``Ctrl + S`` ou en cliquant sur "Enregistrer".

3. Avant le ``void setup()``, cr√©ez des constantes pour la photo-r√©sistance et le buzzer, ainsi qu'une valeur de seuil qui d√©clenchera l'alarme lorsque la lecture de la photo-r√©sistance passera en dessous de ce seuil.

.. code-block:: Arduino
    :emphasize-lines: 1,2,3

    const int sensorPin = A0;   // Attribue le pin A0 √† la constante pour la photo-r√©sistance
    const int buzzerPin = 9;    // Attribue le pin 9 √† la constante pour le buzzer
    const int threshold = 300;  // D√©finit la valeur seuil

    void setup() {
        // Mettez votre code d'initialisation ici, qui sera ex√©cut√© une fois :
    }

4. Cr√©ez √©galement une variable pour stocker la valeur lue depuis la photo-r√©sistance.

.. code-block:: Arduino
    :emphasize-lines: 5

    const int sensorPin = A0;   // Attribue le pin A0 √† la constante pour la photo-r√©sistance
    const int buzzerPin = 9;    // Attribue le pin 9 √† la constante pour le buzzer
    const int threshold = 300;  // D√©finit la valeur seuil

    int sensorValue = 0;  // Pour stocker la lecture de la photo-r√©sistance

    void setup() {
        // Mettez votre code d'initialisation ici, qui sera ex√©cut√© une fois :
    }

5. Dans le ``void setup()``, configurez le buzzer comme une sortie et d√©marrez la communication s√©rie pour surveiller les lectures de la photo-r√©sistance.

.. code-block:: Arduino
    :emphasize-lines: 3,4

    void setup() {
        // Mettez ici votre code d'initialisation, √† ex√©cuter une seule fois :
        pinMode(buzzerPin, OUTPUT);  // Configurez la broche du buzzer comme une sortie
        Serial.begin(9600);          // Initialisez la communication s√©rie √† 9600 bauds
    }

6. Dans le ``void loop()``, utilisez la fonction ``analogRead()`` pour lire les donn√©es de la photo-r√©sistance et stockez la valeur dans la variable ``sensorValue``. Ensuite, imprimez cette valeur sur le moniteur s√©rie. N'oubliez pas de d√©finir un intervalle de temps entre chaque lecture.

.. code-block:: Arduino
    :emphasize-lines: 3,4,5

    void loop() {
        // Mettez ici votre code principal, √† ex√©cuter en boucle :
        sensorValue = analogRead(sensorPin);  // Lisez la valeur analogique de la photo-r√©sistance
        Serial.println(sensorValue);          // Imprimez la lecture de la photo-r√©sistance sur le moniteur s√©rie
        delay(100); // Attendez 0,1 seconde
    }

7. Lorsque l'environnement passe de l'obscurit√© √† la lumi√®re, la r√©sistance de la photo-r√©sistance diminue, tout comme la lecture au pin A0. Utilisez maintenant une instruction ``if`` pour v√©rifier si la valeur de la photo-r√©sistance est inf√©rieure au ``seuil`` ; si c'est le cas, activez le buzzer, sinon, d√©sactivez-le.

.. code-block:: Arduino
    :emphasize-lines: 7-12

    void loop() {
        // Mettez ici votre code principal, √† ex√©cuter en boucle :
        sensorValue = analogRead(sensorPin);  // Lisez la valeur analogique de la photo-r√©sistance
        Serial.println(sensorValue);          // Imprimez la lecture de la photo-r√©sistance sur le moniteur s√©rie
        delay(100);                           // Attendez 0,1 seconde

        // V√©rifiez si la lecture est inf√©rieure au seuil
        if (sensorValue < threshold) {
            digitalWrite(buzzerPin, HIGH);  // Si inf√©rieure au seuil, activez le buzzer
        } else {
            digitalWrite(buzzerPin, LOW);  // Si non inf√©rieure au seuil, d√©sactivez le buzzer
        }
    }

8. Voici votre code complet. Vous pouvez maintenant cliquer sur "T√©l√©verser" pour envoyer le code vers l'Arduino Uno R3.

.. code-block:: Arduino

    const int sensorPin = A0;   // Attribue la broche A0 √† la constante pour la photo-r√©sistance
    const int buzzerPin = 9;    // Attribue la broche 9 √† la constante pour le buzzer
    const int threshold = 300;  // D√©finit la valeur seuil

    int sensorValue = 0;  // Pour stocker la lecture de la photo-r√©sistance

    void setup() {
        // Mettez ici votre code d'initialisation, √† ex√©cuter une seule fois :
        pinMode(buzzerPin, OUTPUT);  // Configurez la broche du buzzer comme une sortie
        Serial.begin(9600);          // Initialisez la communication s√©rie √† 9600 bauds
    }

    void loop() {
        // Mettez ici votre code principal, √† ex√©cuter en boucle :
        sensorValue = analogRead(sensorPin);  // Lisez la valeur analogique de la photo-r√©sistance
        Serial.println(sensorValue);          // Imprimez la lecture de la photo-r√©sistance sur le moniteur s√©rie
        delay(100);                           // Attendez 0,1 seconde

        // V√©rifiez si la lecture est inf√©rieure au seuil
        if (sensorValue < threshold) {
            digitalWrite(buzzerPin, HIGH);  // Si inf√©rieure au seuil, activez le buzzer
        } else {
            digitalWrite(buzzerPin, LOW);  // Si non inf√©rieure au seuil, d√©sactivez le buzzer
        }
    }

9. Enfin, n'oubliez pas d'enregistrer votre code et de ranger votre espace de travail.

**Question**

Les voleurs astucieux pourraient choisir de voler la nuit, et si un tableau dispara√Æt, 
la photo-r√©sistance pourrait ne pas d√©tecter de changement de lumi√®re, √©chouant ainsi √† d√©clencher l'alarme. Que peut-on faire pour am√©liorer cette faille ?

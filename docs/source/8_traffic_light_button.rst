.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder des passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profond√©ment dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez et partagez** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et √† des promotions sp√©ciales.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

8. Feu de signalisation avec bouton pi√©ton
===========================================

Bienvenue dans la prochaine √©tape de notre voyage avec Arduino. Dans la le√ßon pr√©c√©dente, nous avons construit un syst√®me de feu de signalisation de base, essentiel √† la r√©gulation du trafic, avec des feux rouges, jaunes et verts. Nous allons maintenant ajouter une couche d'interaction refl√©tant les complexit√©s du monde r√©el : un bouton pour pi√©tons. Cette fonctionnalit√© introduit un √©l√©ment humain √† notre croisement √©lectronique, permettant une interaction dynamique entre les pi√©tons et la circulation.

.. raw:: html

    <video muted controls style = "max-width:90%">
        <source src="_static/video/8_traffic_light_button.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

Dans cette le√ßon, vous apprendrez √† :

* Comprendre le fonctionnement des boutons et leur r√¥le dans les circuits.
* Utiliser ``digitalRead()`` pour d√©tecter les niveaux d'entr√©e sur une broche.
* Impl√©menter des instructions ``if`` pour cr√©er des comportements conditionnels dans les syst√®mes de feu de signalisation.

Au cours de ce projet, nous allons explorer non seulement la configuration technique, mais aussi la logique et la programmation qui permettent √† ces syst√®mes d'√™tre √† la fois possibles et efficaces dans la gestion du trafic pi√©tonnier et automobile.

Construire le circuit
-------------------------

**Composants n√©cessaires**

.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * LED rouge
     - 1 * LED jaune
     - 1 * LED verte
   * - |list_uno_r3| 
     - |list_red_led| 
     - |list_yellow_led| 
     - |list_green_led| 
   * - 1 * Bouton-poussoir
     - 1 * Plaque d'essai
     - 3 * R√©sistance de 220Œ©
     - 1 * R√©sistance de 10KŒ©
   * - |list_button| 
     - |list_breadboard| 
     - |list_220ohm| 
     - |list_10kohm| 
   * - 1 * C√¢ble USB
     - C√¢bles de connexion
     - 1 * Multim√®tre
     - 
   * - |list_usb_cable| 
     - |list_wire| 
     - |list_meter| 
     - 


**√âtapes de construction**

Suivez le sch√©ma de c√¢blage ou les √©tapes ci-dessous pour construire votre circuit.

.. image:: img/8_traffic_light_button.png
    :width: 600
    :align: center  

1. Commencez avec le circuit du feu de signalisation de la le√ßon pr√©c√©dente.

.. image:: img/7_traffic_light.png
    :width: 600
    :align: center

2. Trouvez un bouton-poussoir.

.. image:: img/8_traffic_button.png
    :width: 500
    :align: center

Les boutons sont des composants omnipr√©sents en √©lectronique, agissant comme des interrupteurs pour ouvrir ou fermer des circuits. Voici la structure interne d'un bouton et son symbole courant utilis√© dans les sch√©mas de circuits.

.. image:: img/8_traffic_button_symbol.png
    :width: 500
    :align: center

Bien que les boutons aient quatre broches, les broches 1 et 2 sont connect√©es, tout comme les broches 3 et 4. En appuyant sur le bouton, toutes les broches sont connect√©es, fermant ainsi le circuit.

3. Ins√©rez le bouton dans la plaque d'essai au niveau de la fente centrale, avec les broches dans les trous 18e, 18f, 20e et 20f.

.. note::

    Si vous avez du mal √† ins√©rer le bouton, essayez dans les deux sens. Dans un sens, l'espacement des broches sera l√©g√®rement trop √©troit pour s'adapter.

.. image:: img/8_traffic_light_button_button.png
    :width: 600
    :align: center

4. Connectez la broche en haut √† droite du bouton √† la broche num√©rique 8 de l'Arduino Uno R3 avec un long c√¢ble de connexion, en ins√©rant une extr√©mit√© dans le trou 18j et l'autre dans la broche 8.

.. image:: img/8_traffic_light_button_pin8.png
    :width: 600
    :align: center

5. Placez une r√©sistance de 10KŒ© entre la broche en haut √† gauche du bouton et la masse, en connectant une extr√©mit√© au trou 18a et l'autre √† la borne n√©gative de la plaque d'essai. Cette r√©sistance tire la broche 8 vers la masse, la stabilisant √† LOW lorsque le bouton n'est pas press√©.

    .. image:: img/8_traffic_light_button_10k.png
        :width: 600
        :align: center

La broche 8 sert d'entr√©e pour lire l'√©tat du bouton. Les cartes Arduino lisent les tensions comprises entre 0 et environ 5 volts sur les broches d'entr√©e, les interpr√©tant comme LOW ou HIGH en fonction d'un seuil de tension. Pour qu'une broche soit lue comme HIGH, elle doit avoir plus de 3 volts. Pour √™tre lue comme LOW, elle doit avoir moins de 1,5 volt.

Sans la r√©sistance de 10KŒ©, si la broche 8 √©tait uniquement reli√©e au bouton, elle flotterait entre 0 et 5V, provoquant des fluctuations al√©atoires entre HIGH et LOW.

La r√©sistance de 10KŒ© connect√©e entre la broche 8 et la masse tire la tension de la broche vers le niveau de la masse, garantissant qu'elle soit lue comme LOW lorsque le bouton n'est pas press√©.

6. Enfin, alimentez le bouton en connectant la borne positive de la plaque d'essai √† la broche 5V de l'Arduino Uno R3 √† l'aide d'un fil rouge.

.. image:: img/8_traffic_light_button.png
    :width: 600
    :align: center


**Question :**

Votre feu de signalisation est un m√©lange de circuits en s√©rie et en parall√®le. Discutez des parties de votre circuit qui sont en s√©rie et expliquez pourquoi. Ensuite, expliquez quelles parties sont en parall√®le et pourquoi.


Cr√©ation de Code
--------------------

**Initialisation des Pins**

Jusqu'√† pr√©sent, vous avez programm√© les feux de circulation pour que les LED vertes, jaunes et rouges clignotent s√©quentiellement. Dans cette le√ßon, vous allez programmer le bouton pi√©ton afin que, lorsqu'il est press√©, les LED rouges et jaunes s'√©teignent tandis que la LED verte clignote, indiquant qu'il est s√ªr pour les pi√©tons de traverser.

1. Ouvrez le sketch que vous avez sauvegard√© pr√©c√©demment, ``Lesson7_Traffic_Light``. Cliquez sur "Enregistrer sous..." dans le menu "Fichier" et renommez-le en ``Lesson8_Traffic_Light_Button``. Cliquez sur "Enregistrer".

2. Dans la fonction ``void setup()``, ajoutez une autre commande ``pinMode()`` pour d√©clarer la pin 8 en tant qu'entr√©e (``INPUT``). Ensuite, ajoutez un commentaire de code pour expliquer cette nouvelle commande.

.. code-block:: Arduino
    :emphasize-lines: 6

    void setup() {
        // Configuration initiale ex√©cut√©e une seule fois :
        pinMode(3, OUTPUT); // D√©finir la pin 3 comme sortie
        pinMode(4, OUTPUT); // D√©finir la pin 4 comme sortie
        pinMode(5, OUTPUT); // D√©finir la pin 5 comme sortie
        pinMode(8, INPUT);  // D√©clarer la pin 8 (bouton) comme entr√©e
    }
    
    void loop() {
        // Code principal, ex√©cut√© en boucle :
        digitalWrite(3, HIGH);  // Allumer la LED sur la pin 3
        digitalWrite(4, LOW);   // √âteindre la LED sur la pin 4
        digitalWrite(5, LOW);   // √âteindre la LED sur la pin 5
        delay(10000);           // Attendre 10 secondes
        digitalWrite(3, LOW);   // √âteindre la LED sur la pin 3
        digitalWrite(4, HIGH);  // Allumer la LED sur la pin 4
        digitalWrite(5, LOW);   // √âteindre la LED sur la pin 5
        delay(3000);            // Attendre 3 secondes
        digitalWrite(3, LOW);   // √âteindre la LED sur la pin 3
        digitalWrite(4, LOW);   // √âteindre la LED sur la pin 4
        digitalWrite(5, HIGH);  // Allumer la LED sur la pin 5
        delay(10000);           // Attendre 10 secondes
    }

3. Apr√®s avoir cod√©, v√©rifiez votre sketch et t√©l√©versez le code sur l'Arduino Uno R3.

**Mesure de la Tension sur la Pin 8**

Nous savons d√©j√† comment fonctionne la section des LED de notre circuit gr√¢ce √† la le√ßon pr√©c√©dente. Chaque LED, agissant comme une sortie, est contr√¥l√©e par diff√©rentes pins de l'Arduino Uno R3.

Cependant, le bouton connect√© √† la pin 8 est diff√©rent. C'est un dispositif d'entr√©e. La pin 8 lira la tension entrante au lieu d'envoyer de la tension.

Utilisons un multim√®tre pour tester la tension √† la pin 8 lorsque le bouton est press√© et rel√¢ch√©. Vous pourriez avoir besoin de l'aide d'un ami pour appuyer sur le bouton pendant la mesure.

1. R√©glez le multim√®tre sur la position 20 volts DC.

.. image:: img/multimeter_dc_20v.png
    :width: 300
    :align: center

2. Lorsque le bouton n'est pas press√©, mesurez la tension √† la pin 8. Touchez le fil de test rouge du multim√®tre √† la pin 8 et le fil noir √† la masse (GND).

.. image:: img/8_traffic_voltage.png
    :width: 600
    :align: center

3. Notez la tension mesur√©e dans le tableau.

.. list-table::
   :widths: 25 25 25
   :header-rows: 1

   * - √âtat du Bouton
     - Tension √† la Pin 8
     - √âtat
   * - Rel√¢ch√©
     - *0,00 volts*
     - 
   * - Press√©
     - 
     - 

4. Demandez √† votre ami de vous aider √† appuyer sur le bouton, puis continuez √† mesurer la tension √† la pin 8.

.. image:: img/8_traffic_voltage.png
    :width: 600
    :align: center

5. Lorsque le bouton est press√©, enregistrez la tension √† la pin 8 dans le tableau.

.. list-table::
   :widths: 25 25 25
   :header-rows: 1

   * - √âtat du Bouton
     - Tension √† la Pin 8
     - √âtat
   * - Rel√¢ch√©
     - *0,00 volts*
     - 
   * - Press√©
     - *‚âà4,97 volts*
     - 

6. Les cartes Arduino lisent des tensions comprises entre 0 et environ 5 volts sur les pins d'entr√©e, les interpr√©tant comme ``LOW`` ou ``HIGH`` en fonction d'une tension de seuil. Pour qu'une pin soit lue comme ``HIGH``, elle doit recevoir plus de 3 volts. Pour √™tre lue comme ``LOW``, elle doit recevoir moins de 1,5 volts.

   En fonction de la tension mesur√©e, remplissez l'√©tat pour la pin 8.

.. list-table::
   :widths: 25 25 25
   :header-rows: 1

   * - √âtat du Bouton
     - Tension √† la Pin 8
     - √âtat de la Pin 8
   * - Rel√¢ch√©
     - *0,00 volts*
     - *LOW*
   * - Press√©
     - *‚âà4,97 volts*
     - *HIGH*


**Instructions Conditionnelles**

Le feu de circulation doit afficher deux comportements diff√©rents selon que le bouton est press√© ou non :

* Lorsque le bouton est press√©, le code pour le passage pi√©ton doit s'ex√©cuter, et la LED verte doit clignoter.
* Lorsque le bouton n'est pas press√©, le feu de circulation doit fonctionner normalement, comme vous l'avez programm√©.

Pour programmer ces comportements, vous utiliserez une nouvelle fonction de codage appel√©e instructions conditionnelles.

Les instructions conditionnelles sont parfois appel√©es instructions ``si-alors``, 
ou plus simplement, une instruction ``if``. Elles vous permettent d'ex√©cuter certaines 
lignes de code lorsqu'une condition ou un sc√©nario sp√©cifique est v√©rifi√©.

.. image:: img/if.png
    :width: 300
    :align: center

.. note::

    Vous utilisez souvent des instructions conditionnelles dans la vie quotidienne pour prendre des d√©cisions, par exemple :

    .. code-block:: Arduino

        start;
        if cold;
        then wear a coat;
        end;

Dans l'IDE Arduino, une instruction conditionnelle ressemble √† ceci :

    .. code-block:: Arduino

        if (condition) {
            commands to run when the condition is true 
        }

La ``condition`` se trouve entre parenth√®ses, et utilise des op√©rateurs de comparaison pour comparer deux ou plusieurs valeurs. Ces valeurs peuvent √™tre des nombres, des variables ou des entr√©es venant de l'Arduino Uno R3.

Voici une liste des op√©rateurs de comparaison et comment ils sont utilis√©s dans la partie conditionnelle d'une instruction if :

.. list-table::
    :widths: 20 20 60
    :header-rows: 1

    *   - Op√©rateur de Comparaison
        - Signification
        - Exemple
    *   - ==
        - √âgal √†
        - if (digitalRead(8) == HIGH) {faire quelque chose}
    *   - !=
        - Diff√©rent de
        - if (digitalRead(5) != LOW) {faire quelque chose}
    *   - <
        - Inf√©rieur √†
        - if (distance < 100) {faire quelque chose}
    *   - >
        - Sup√©rieur √†
        - if (count > 5) {faire quelque chose}
    *   - <=
        - Inf√©rieur ou √©gal √†
        - if (number <= minValue) {faire quelque chose}
    *   - >=
        - Sup√©rieur ou √©gal √†
        - if (number >= maxValue) {faire quelque chose}

.. note::

    La comparaison d'√©galit√© utilise deux signes √©gaux (``==``). Un signe √©gal seul (``=``) est utilis√© pour attribuer une valeur √† une variable (comme expliqu√© dans les sections suivantes), tandis que deux signes √©gaux sont utilis√©s pour comparer deux valeurs.

Lorsque vous comparez deux valeurs dans une condition, le r√©sultat peut √™tre ``True`` ou ``False``. Si la condition est ``True``, les commandes entre accolades sont ex√©cut√©es. Si la condition est ``False``, les commandes sont ignor√©es.

En programmation, les instructions conditionnelles peuvent √™tre simples ou impliquer des arguments logiques complexes avec plusieurs conditions et sc√©narios. Vous utiliserez la forme basique des instructions ``if`` dans les prochaines √©tapes.

**Bouton Non Press√©**

En nous basant sur notre compr√©hension des instructions conditionnelles, appliquons ce concept pour am√©liorer notre sketch du feu de circulation. Comme le fait d'appuyer sur un bouton modifie le flux de circulation, nous allons int√©grer une condition pour surveiller l'√©tat du bouton.

1. D'apr√®s nos mesures pr√©c√©dentes de la tension de la pin 8, nous savons que lorsque le bouton n'est pas press√©, la pin 8 est √† l'√©tat ``LOW``. Ainsi, si la lecture de l'√©tat de la pin 8 renvoie ``LOW``, cela signifie que le bouton n'est pas press√©. Maintenant, au d√©but de la fonction ``void loop()`` dans votre code pr√©c√©dent, entrez l'instruction suivante :

    .. code-block:: Arduino
        :emphasize-lines: 11,13

        void setup() {
            // Code de configuration ex√©cut√© une seule fois :
            pinMode(3, OUTPUT); // D√©finir la pin 3 comme sortie
            pinMode(4, OUTPUT); // D√©finir la pin 4 comme sortie
            pinMode(5, OUTPUT); // D√©finir la pin 5 comme sortie
            pinMode(8, INPUT);  // D√©clarer la pin 8 (bouton) comme entr√©e
        }

        void loop() {
            // Code principal, ex√©cut√© en boucle :
            if (digitalRead(8) == LOW) {
                
            }

            digitalWrite(3, HIGH);  // Allumer la LED sur la pin 3
            digitalWrite(4, LOW);   // √âteindre la LED sur la pin 4
            digitalWrite(5, LOW);   // √âteindre la LED sur la pin 5

            ...

Tout comme la commande ``digitalWrite()`` est utilis√©e pour les pins de sortie, la commande ``digitalRead()`` est utilis√©e pour les pins d'entr√©e. ``digitalRead(pin)`` est la commande permettant de lire si une pin num√©rique est √† l'√©tat ``HIGH`` ou ``LOW``.

Voici sa syntaxe :

    * ``digitalRead(pin)`` : Lit la valeur d'une pin num√©rique sp√©cifi√©e, soit ``HIGH``, soit ``LOW``.

        **Param√®tres**
            - ``pin`` : le num√©ro de la pin Arduino que vous souhaitez lire.
        
        **Retourne**
            ``HIGH`` ou ``LOW``.

2. Ensuite, ajoutez les commandes √† ex√©cuter lorsque le bouton n'est pas press√©. Ces commandes sont celles que vous avez d√©j√† cr√©√©es pour le fonctionnement normal du feu de circulation.

    * Vous pouvez couper et coller ces commandes √† l'int√©rieur des accolades de l'instruction ``if``,
    * Ou bien, vous pouvez simplement d√©placer l'accolade fermante de l'instruction ``if`` apr√®s le dernier ``delay``.
    * Utilisez la m√©thode qui vous convient le mieux. Apr√®s avoir effectu√© cette modification, votre fonction ``void loop()`` devrait ressembler √† ceci :

.. code-block:: Arduino
    :emphasize-lines: 11,24

    void setup() {
        // Code de configuration ex√©cut√© une seule fois :
        pinMode(3, OUTPUT); // D√©finir la pin 3 comme sortie
        pinMode(4, OUTPUT); // D√©finir la pin 4 comme sortie
        pinMode(5, OUTPUT); // D√©finir la pin 5 comme sortie
        pinMode(8, INPUT);  // D√©clarer la pin 8 (bouton) comme entr√©e
    }

    void loop() {
        // Code principal, ex√©cut√© en boucle :
        if (digitalRead(8) == LOW) {
            digitalWrite(3, HIGH);  // Allumer la LED sur la pin 3
            digitalWrite(4, LOW);   // √âteindre la LED sur la pin 4
            digitalWrite(5, LOW);   // √âteindre la LED sur la pin 5
            delay(10000);           // Attendre 10 secondes
            digitalWrite(3, LOW);   // √âteindre la LED sur la pin 3
            digitalWrite(4, HIGH);  // Allumer la LED sur la pin 4
            digitalWrite(5, LOW);   // √âteindre la LED sur la pin 5
            delay(3000);            // Attendre 3 secondes
            digitalWrite(3, LOW);   // √âteindre la LED sur la pin 3
            digitalWrite(4, LOW);   // √âteindre la LED sur la pin 4
            digitalWrite(5, HIGH);  // Allumer la LED sur la pin 5
            delay(10000);           // Attendre 10 secondes
        }
    }

Notez comment les commandes √† l'int√©rieur de l'instruction ``if`` sont indent√©es. Utiliser l'indentation permet de garder votre code ordonn√© et de clarifier quelles commandes sont ex√©cut√©es au sein d'une fonction. M√™me si cela prend quelques secondes suppl√©mentaires, l'indentation, les sauts de ligne et les commentaires dans le code permettent de maintenir la lisibilit√©, ce qui sera avantageux √† long terme.

Une erreur courante de syntaxe est d'oublier le nombre d'accolades requis. Parfois, l'accolade fermante est manquante dans une fonction, ou trop d'accolades fermantes sont ajout√©es. Dans votre sketch, chaque accolade ouvrante doit avoir une accolade fermante. Une bonne indentation aide √©galement √† r√©soudre les erreurs li√©es aux accolades mal appari√©es.

**Quand le bouton est press√©**

Il est maintenant temps d'√©crire le code qui permet aux pi√©tons de traverser la rue lorsque le bouton est press√©.

Cela n√©cessitera une deuxi√®me instruction conditionnelle. Cette fois-ci, vous devrez comparer la valeur de ``digitalRead()`` pour la pin 8 √† ``HIGH`` au lieu de ``LOW``.

Lorsque le bouton est press√©, le feu de circulation doit arr√™ter tous les v√©hicules et signaler qu'il est s√ªr pour les pi√©tons de traverser. Pour ce faire, vous devez √©teindre les LED rouges et jaunes et faire clignoter la LED verte. √Ä l'int√©rieur des accolades de votre deuxi√®me instruction conditionnelle, ajoutez trois commandes ``digitalWrite()`` :

* Allumez la LED verte connect√©e √† la pin 3.
* √âteignez la LED jaune connect√©e √† la pin 4.
* √âteignez la LED rouge connect√©e √† la pin 5.

Ensuite, faites clignoter la LED verte. N'oubliez pas que la fr√©quence de clignotement est d√©termin√©e par vos instructions ``delay()``.

Votre sketch devrait ressembler √† ceci :

.. code-block:: Arduino
    :emphasize-lines: 24-31

    void setup() {
        pinMode(3, OUTPUT);  // d√©clarer la pin 3 (LED verte) comme sortie
        pinMode(4, OUTPUT);  // d√©clarer la pin 4 (LED jaune) comme sortie
        pinMode(5, OUTPUT);  // d√©clarer la pin 5 (LED rouge) comme sortie
        pinMode(8, INPUT);   // d√©clarer la pin 8 (bouton) comme entr√©e
    }

    void loop() {
        // Code principal, ex√©cut√© en boucle :
        if (digitalRead(8) == LOW) {
            digitalWrite(3, HIGH);  // Allumer la LED sur la pin 3
            digitalWrite(4, LOW);   // √âteindre la LED sur la pin 4
            digitalWrite(5, LOW);   // √âteindre la LED sur la pin 5
            delay(10000);           // Attendre 10 secondes
            digitalWrite(3, LOW);   // √âteindre la LED sur la pin 3
            digitalWrite(4, HIGH);  // Allumer la LED sur la pin 4
            digitalWrite(5, LOW);   // √âteindre la LED sur la pin 5
            delay(3000);            // Attendre 3 secondes
            digitalWrite(3, LOW);   // √âteindre la LED sur la pin 3
            digitalWrite(4, LOW);   // √âteindre la LED sur la pin 4
            digitalWrite(5, HIGH);  // Allumer la LED sur la pin 5
            delay(10000);           // Attendre 10 secondes
        }
        if (digitalRead(8) == HIGH) {  // si le bouton est press√© :
            digitalWrite(3, HIGH);       // Allumer la LED sur la pin 3
            digitalWrite(4, LOW);        // √âteindre la LED sur la pin 4
            digitalWrite(5, LOW);        // √âteindre la LED sur la pin 5
            delay(500);                  // Attendre une demi-seconde
            digitalWrite(3, LOW);        // √âteindre la LED sur la pin 3
            delay(500);                  // Attendre une demi-seconde
        }
    }

T√©l√©versez votre code sur l'Arduino Uno R3. Une fois le sketch transf√©r√©, le code s'ex√©cutera.

Observez le comportement de votre feu de circulation. Appuyez sur le bouton et attendez que le feu termine son cycle. La LED verte pour pi√©tons clignote-t-elle ? Lorsque le bouton est rel√¢ch√©, le feu revient-il √† son mode de fonctionnement normal ? Si ce n'est pas le cas, ajustez votre sketch et t√©l√©versez-le √† nouveau sur la carte R3.

Une fois termin√©, sauvegardez votre sketch.

**Question**

Pendant les tests, vous pouvez remarquer que la LED verte ne clignote que lorsque le bouton pi√©ton est maintenu enfonc√©, mais les pi√©tons ne peuvent pas traverser la route en maintenant le bouton appuy√©. Comment pouvez-vous modifier le code pour vous assurer que, une fois le bouton pi√©ton press√©, la LED verte reste allum√©e suffisamment longtemps pour permettre une travers√©e s√©curis√©e sans avoir √† maintenir le bouton appuy√© ? Veuillez √©crire la solution en pseudo-code dans votre cahier.

**R√©sum√©**

Dans cette le√ßon, nous avons int√©gr√© un bouton pi√©ton dans un syst√®me de feux de circulation, simulant un sc√©nario r√©el qui √©quilibre le flux de pi√©tons et de v√©hicules. Nous avons explor√© le fonctionnement d'un bouton dans un circuit √©lectronique et utilis√© la fonction ``digitalRead()`` pour surveiller les entr√©es du bouton. En utilisant des instructions conditionnelles avec des structures ``if``, nous avons programm√© les feux pour qu'ils r√©agissent dynamiquement √† l'entr√©e des pi√©tons, renfor√ßant ainsi notre compr√©hension des syst√®mes interactifs. Cette le√ßon nous a non seulement permis de perfectionner nos comp√©tences en programmation Arduino, mais a √©galement mis en lumi√®re l'application pratique de ces technologies dans la gestion efficace de situations du quotidien.


.. note::

    ¬°Hola! Bienvenido a la comunidad de entusiastas de SunFounder Raspberry Pi & Arduino & ESP32 en Facebook. Sum√©rgete en el mundo de Raspberry Pi, Arduino y ESP32 junto con otros apasionados.

    **¬øPor qu√© unirte?**

    - **Soporte experto**: Soluciona problemas post-venta y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Previsualizaciones exclusivas**: Accede a los anuncios de nuevos productos y adelantos exclusivos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones y sorteos festivos**: Participa en sorteos y promociones de temporada.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo.

8. Sem√°foro con bot√≥n para peatones
===============================================

Bienvenido a la siguiente fase de nuestro recorrido con Arduino. En la lecci√≥n anterior, construimos un sistema b√°sico de sem√°foro, un componente esencial en nuestras carreteras, controlando el flujo con luces rojas, amarillas y verdes. Ahora, agregaremos un elemento de interacci√≥n que refleja la complejidad del mundo real: un bot√≥n para peatones. Esta funci√≥n introduce un componente humano en nuestro cruce electr√≥nico, permitiendo una interacci√≥n din√°mica entre los peatones y los veh√≠culos en nuestras concurridas intersecciones.

.. raw:: html

    <video muted controls style = "max-width:90%">
        <source src="_static/video/8_traffic_light_button.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

En esta lecci√≥n, aprender√°s a:

* Comprender c√≥mo funcionan los botones y su papel en los circuitos.
* Usar ``digitalRead()`` para detectar niveles de entrada en los pines.
* Implementar declaraciones ``if`` para crear comportamientos condicionales en sistemas de sem√°foros.

A medida que avanzamos en este proyecto, exploraremos no solo la configuraci√≥n t√©cnica, sino tambi√©n la l√≥gica y programaci√≥n que hacen que estos sistemas sean posibles y eficientes en la gesti√≥n del tr√°fico peatonal y vehicular.

Construyendo el circuito
-----------------------------

**Componentes necesarios**

.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * LED Rojo
     - 1 * LED Amarillo
     - 1 * LED Verde
   * - |list_uno_r3| 
     - |list_red_led| 
     - |list_yellow_led| 
     - |list_green_led| 
   * - 1 * Bot√≥n pulsador
     - 1 * Protoboard
     - 3 * Resistencias de 220Œ©
     - 1 * Resistencia de 10KŒ©
   * - |list_button| 
     - |list_breadboard| 
     - |list_220ohm| 
     - |list_10kohm| 
   * - 1 * Cable USB
     - Cables puente
     - 1 * Mult√≠metro
     - 
   * - |list_usb_cable| 
     - |list_wire| 
     - |list_meter| 
     - 


**Paso a paso para construir**

Sigue el diagrama de cableado o los pasos a continuaci√≥n para construir tu circuito.

.. image:: img/8_traffic_light_button.png
    :width: 600
    :align: center  

1. Comienza con el circuito del sem√°foro de la lecci√≥n anterior.

.. image:: img/7_traffic_light.png
    :width: 600
    :align: center

2. Encuentra un bot√≥n pulsador.

.. image:: img/8_traffic_button.png
    :width: 500
    :align: center

Los botones son componentes omnipresentes en la electr√≥nica, actuando como interruptores para abrir o cerrar circuitos. A continuaci√≥n, se muestra la estructura interna de un bot√≥n y su s√≠mbolo com√∫n utilizado en diagramas de circuitos.

.. image:: img/8_traffic_button_symbol.png
    :width: 500
    :align: center

Aunque los botones tienen cuatro pines, los pines 1 y 2 est√°n conectados entre s√≠, al igual que los pines 3 y 4. Al presionar el bot√≥n, se conectan los cuatro pines, cerrando el circuito.

3. Inserta el bot√≥n en el protoboard a trav√©s de la ranura central, con los pines en los agujeros 18e, 18f, 20e y 20f.

.. note::

    Si no est√°s seguro de c√≥mo insertar el bot√≥n, prueba ambas orientaciones. En una direcci√≥n, el espaciado de los pines ser√° ligeramente estrecho para encajar.

.. image:: img/8_traffic_light_button_button.png
    :width: 600
    :align: center

4. Conecta el pin superior derecho del bot√≥n al pin digital 8 del Arduino Uno R3 con un cable puente largo, insertando un extremo en el agujero 18j y el otro extremo en el pin 8.

.. image:: img/8_traffic_light_button_pin8.png
    :width: 600
    :align: center

5. Coloca una resistencia de 10KŒ© entre el pin superior izquierdo del bot√≥n y tierra, conectando un extremo al agujero 18a y el otro al riel negativo del protoboard. Esta resistencia conecta el pin 8 a tierra, estabiliz√°ndolo en LOW cuando el bot√≥n no est√° presionado.

.. image:: img/8_traffic_light_button_10k.png
    :width: 600
    :align: center

El pin 8 sirve como entrada para leer el estado del bot√≥n. Las placas Arduino leen voltajes entre 0 y aproximadamente 5 voltios en los pines de entrada, interpret√°ndolos como LOW o HIGH seg√∫n un umbral de voltaje. Para que un pin se lea como HIGH, debe tener m√°s de 3 voltios. Para que se lea como LOW, debe tener menos de 1.5 voltios.

Sin la resistencia de 10KŒ©, el pin 8 solo estar√≠a conectado al bot√≥n, flotando entre 0 y 5V, lo que har√≠a que su estado fluct√∫e aleatoriamente entre HIGH y LOW.

La resistencia de 10KŒ© conectada del pin 8 a tierra reduce el voltaje del pin al nivel de tierra, asegurando que se lea como LOW cuando el bot√≥n no est√° presionado.

6. Por √∫ltimo, alimenta el bot√≥n conectando el riel positivo del protoboard al pin de 5V del Arduino Uno R3 con un cable de alimentaci√≥n rojo.

.. image:: img/8_traffic_light_button.png
    :width: 600
    :align: center


**Pregunta:**

Tu sem√°foro es una mezcla de circuitos en serie y paralelo. Discute qu√© partes de tu circuito est√°n en serie y por qu√©. Luego, explica qu√© partes est√°n en paralelo y por qu√©.


Creaci√≥n del c√≥digo
-----------------------

**Inicializaci√≥n de pines**

Hasta ahora, has programado el sem√°foro para que las luces LED verde, amarilla y roja se enciendan secuencialmente. En esta lecci√≥n, programar√°s el bot√≥n de peatones para que, cuando se presione, las luces LED roja y amarilla se apaguen mientras la luz verde parpadea, indicando que es seguro para los peatones cruzar.

1. Abre el sketch que guardaste anteriormente, ``Lesson7_Traffic_Light``. Haz clic en "Guardar como..." en el men√∫ "Archivo" y ren√≥mbralo como ``Lesson8_Traffic_Light_Button``. Haz clic en "Guardar".

2. En la funci√≥n ``void setup()``, a√±ade otro comando ``pinMode()`` para declarar el pin 8 como entrada (``INPUT``). Luego, agrega un comentario en el c√≥digo para explicar tu nuevo comando.

.. code-block:: Arduino
    :emphasize-lines: 6

    void setup() {
        // Configuraci√≥n del c√≥digo, ejecutado una vez:
        pinMode(3, OUTPUT); // Configurar pin 3 como salida
        pinMode(4, OUTPUT); // Configurar pin 4 como salida
        pinMode(5, OUTPUT); // Configurar pin 5 como salida
        pinMode(8, INPUT);  // Declarar pin 8 (bot√≥n) como entrada
    }
    
    void loop() {
        // C√≥digo principal, ejecutado repetidamente:
        digitalWrite(3, HIGH);  // Encender el LED en el pin 3
        digitalWrite(4, LOW);   // Apagar el LED en el pin 4
        digitalWrite(5, LOW);   // Apagar el LED en el pin 5
        delay(10000);           // Esperar 10 segundos
        digitalWrite(3, LOW);   // Apagar el LED en el pin 3
        digitalWrite(4, HIGH);  // Encender el LED en el pin 4
        digitalWrite(5, LOW);   // Apagar el LED en el pin 5
        delay(3000);            // Esperar 3 segundos
        digitalWrite(3, LOW);   // Apagar el LED en el pin 3
        digitalWrite(4, LOW);   // Apagar el LED en el pin 4
        digitalWrite(5, HIGH);  // Encender el LED en el pin 5
        delay(10000);           // Esperar 10 segundos
    }

3. Despu√©s de codificar, verifica tu sketch y sube el c√≥digo al Arduino Uno R3.

**Midiendo el voltaje en el pin 8**

Ya sabemos c√≥mo funciona la secci√≥n de LEDs de nuestro circuito a partir de la lecci√≥n anterior. Cada LED, actuando como salida, es controlado por diferentes pines en el Arduino Uno R3.

Sin embargo, el bot√≥n conectado al pin 8 de la placa es diferente. Es un dispositivo de entrada. El pin 8 leer√° el voltaje entrante en lugar de enviar voltaje.

Usemos un mult√≠metro para probar el voltaje en el pin 8 cuando el bot√≥n est√© presionado y cuando no lo est√©. Puede que necesites la ayuda de un amigo para presionar el bot√≥n mientras realizas la medici√≥n.

1. Ajusta el mult√≠metro a la configuraci√≥n de 20 voltios DC.

.. image:: img/multimeter_dc_20v.png
    :width: 300
    :align: center

2. Cuando el bot√≥n no est√© presionado, mide el voltaje en el pin 8. Toca el terminal de prueba rojo del mult√≠metro en el pin 8 y el terminal negro en GND.

.. image:: img/8_traffic_voltage.png
    :width: 600
    :align: center

3. Registra el voltaje medido en la tabla.

.. list-table::
   :widths: 25 25 25
   :header-rows: 1

   * - Estado del bot√≥n
     - Voltaje en pin 8
     - Estado
   * - No presionado
     - *0.00 voltios*
     - 
   * - Presionado
     - 
     - 

4. Pide a tu amigo que te ayude presionando el bot√≥n, luego contin√∫a midiendo el voltaje en el pin 8.

.. image:: img/8_traffic_voltage.png
    :width: 600
    :align: center

5. Cuando el bot√≥n est√© presionado, registra el voltaje en el pin 8 en la tabla.

.. list-table::
   :widths: 25 25 25
   :header-rows: 1

   * - Estado del bot√≥n
     - Voltaje en pin 8
     - Estado
   * - No presionado
     - *0.00 voltios*
     - 
   * - Presionado
     - *‚âà4.97 voltios*
     - 

6. Las placas Arduino leen voltajes entre 0 y aproximadamente 5 voltios en los pines de entrada, interpret√°ndolos como ``LOW`` o ``HIGH`` seg√∫n un voltaje umbral. Para que un pin se lea como ``HIGH``, debe tener m√°s de 3 voltios. Para que se lea como ``LOW``, debe tener menos de 1.5 voltios.

   Basado en el voltaje medido, completa el estado del pin 8.

.. list-table::
   :widths: 25 25 25
   :header-rows: 1

   * - Estado del bot√≥n
     - Voltaje en el pin 8
     - Estado del pin 8
   * - No presionado
     - *0.00 voltios*
     - *LOW*
   * - Presionado
     - *‚âà4.97 voltios*
     - *HIGH*


**Condicionales**

El sem√°foro debe mostrar dos comportamientos diferentes dependiendo de si el bot√≥n est√° presionado o no:

* Cuando el bot√≥n est√° presionado, el c√≥digo del cruce de peatones debe ejecutarse y el LED verde debe parpadear.
* Cuando el bot√≥n no est√° presionado, el sem√°foro debe operar normalmente como lo has programado.

Para programar estos comportamientos, utilizar√°s una nueva funci√≥n de codificaci√≥n conocida como condicionales.

Las sentencias condicionales a veces se llaman declaraciones ``if-then`` o, 
simplemente, una declaraci√≥n ``if``. Estas sentencias permiten ejecutar ciertas 
l√≠neas de c√≥digo cuando una condici√≥n espec√≠fica es verdadera.

.. image:: img/if.png
    :width: 300
    :align: center


.. note::

    Utilizamos declaraciones condicionales en la vida cotidiana para tomar decisiones, por ejemplo:

    .. code-block:: Arduino

        start;
        if cold;
        then wear a coat;
        end;

En el IDE de Arduino, una declaraci√≥n condicional se ve as√≠:

    .. code-block:: Arduino

        if (condition) {
            commands to run when the condition is true 
        }

La ``condici√≥n`` est√° entre par√©ntesis y utiliza operadores de comparaci√≥n para comparar dos o m√°s valores. Estos valores pueden ser n√∫meros, variables o entradas que lleguen al Arduino Uno R3.

Aqu√≠ tienes una lista de operadores de comparaci√≥n y c√≥mo se utilizan en la parte de la condici√≥n de una sentencia if:

.. list-table::
    :widths: 20 20 60
    :header-rows: 1

    *   - Comparison Operator
        - Meaning
        - Example
    *   - ==
        - Equals
        - if (digitalRead(8) == HIGH) {do something}
    *   - !=
        - Not equal
        - if (digitalRead(5) != LOW) {do something}
    *   - <
        - Less than
        - if (distance < 100) {do something}
    *   - >
        - Greater than
        - if (count > 5) {do something}
    *   - <=
        - Less than or equal to
        - if (number <= minValue) {do something}
    *   - >=
        - Greater than or equal to
        - if (number >= maxValue) {do something}

.. note::

    La comparaci√≥n de igualdad utiliza dos signos de igual (``==``). Un solo signo de igual (``=``) se utiliza para asignar un valor a una variable (lo explicaremos m√°s adelante), mientras que el doble igual se usa para comparar dos valores.

Al comparar dos valores en una condici√≥n, el resultado puede ser ``True`` o ``False``. Si la condici√≥n es ``True``, los comandos dentro de las llaves se ejecutan. Si la condici√≥n es ``False``, se omiten los comandos.

En programaci√≥n, las sentencias condicionales pueden ser simples o involucrar argumentos l√≥gicos complejos con m√∫ltiples condiciones y escenarios. A continuaci√≥n, utilizar√°s la forma b√°sica de las sentencias ``if``.

**Bot√≥n no presionado**

Bas√°ndonos en nuestra comprensi√≥n de las sentencias condicionales, apliquemos este concepto para mejorar nuestro sketch del sem√°foro. Dado que la pulsaci√≥n de un bot√≥n altera el flujo del tr√°fico, incorporaremos una condici√≥n para monitorear el estado del bot√≥n.

1. De nuestras mediciones anteriores del voltaje del pin 8, sabemos que cuando el bot√≥n no est√° presionado, el pin 8 est√° en ``LOW``. Entonces, si el estado le√≠do del pin 8 es ``LOW``, significa que no est√° presionado. Ahora, al inicio de la funci√≥n ``void loop()`` en tu c√≥digo anterior, ingresa la siguiente declaraci√≥n:

    .. code-block:: Arduino
        :emphasize-lines: 11,13

        void setup() {
            // Configuraci√≥n del c√≥digo, ejecutado una vez:
            pinMode(3, OUTPUT); // Configurar pin 3 como salida
            pinMode(4, OUTPUT); // Configurar pin 4 como salida
            pinMode(5, OUTPUT); // Configurar pin 5 como salida
            pinMode(8, INPUT);  // Declarar pin 8 (bot√≥n) como entrada
        }

        void loop() {
            // C√≥digo principal, ejecutado repetidamente:
            if (digitalRead(8) == LOW) {
                
            }

            digitalWrite(3, HIGH);  // Encender el LED en el pin 3
            digitalWrite(4, LOW);   // Apagar el LED en el pin 4
            digitalWrite(5, LOW);   // Apagar el LED en el pin 5

            ...

Al igual que el comando ``digitalWrite()`` se utiliza para los pines de salida, el comando ``digitalRead()`` se usa para los pines de entrada. ``digitalRead(pin)`` es el comando para leer si un pin digital est√° en estado ``HIGH`` o ``LOW``.

Aqu√≠ est√° su sintaxis:

    * ``digitalRead(pin)``: Lee el valor de un pin digital especificado, ya sea ``HIGH`` o ``LOW``.

        **Par√°metros**
            - ``pin``: el n√∫mero del pin de Arduino que deseas leer
        
        **Devuelve**
            ``HIGH`` or ``LOW``

2. A continuaci√≥n, agrega los comandos que se ejecutar√°n cuando el bot√≥n no est√© presionado. Estos comandos son los que ya has creado para que el sem√°foro funcione de manera normal.

    * Puedes cortar y pegar estos comandos dentro de las llaves de la sentencia ``if``.
    * O bien, puedes mover la llave de cierre de la sentencia ``if`` hasta despu√©s del √∫ltimo ``delay``.
    * Usa el m√©todo que prefieras. Despu√©s de hacerlo, tu funci√≥n ``void loop()`` deber√≠a verse algo as√≠:

.. code-block:: Arduino
    :emphasize-lines: 11,24

    void setup() {
        // C√≥digo de configuraci√≥n, ejecutado una vez:
        pinMode(3, OUTPUT); // Configurar pin 3 como salida
        pinMode(4, OUTPUT); // Configurar pin 4 como salida
        pinMode(5, OUTPUT); // Configurar pin 5 como salida
        pinMode(8, INPUT);  // Declarar pin 8 (bot√≥n) como entrada
    }

    void loop() {
        // C√≥digo principal, ejecutado repetidamente:
        if (digitalRead(8) == LOW) {
            digitalWrite(3, HIGH);  // Encender el LED en el pin 3
            digitalWrite(4, LOW);   // Apagar el LED en el pin 4
            digitalWrite(5, LOW);   // Apagar el LED en el pin 5
            delay(10000);           // Esperar 10 segundos
            digitalWrite(3, LOW);   // Apagar el LED en el pin 3
            digitalWrite(4, HIGH);  // Encender el LED en el pin 4
            digitalWrite(5, LOW);   // Apagar el LED en el pin 5
            delay(3000);            // Esperar 3 segundos
            digitalWrite(3, LOW);   // Apagar el LED en el pin 3
            digitalWrite(4, LOW);   // Apagar el LED en el pin 4
            digitalWrite(5, HIGH);  // Encender el LED en el pin 5
            delay(10000);           // Esperar 10 segundos
        }
    }

Observa c√≥mo los comandos dentro de la sentencia ``if`` est√°n indentados. Usar indentaci√≥n ayuda a mantener tu c√≥digo ordenado y a clarificar los comandos que se ejecutan dentro de una funci√≥n. Aunque pueda llevar unos segundos extra, utilizar indentaci√≥n, saltos de l√≠nea y comentarios en el c√≥digo ayudar√° a mantener la est√©tica de tu c√≥digo, lo cual ser√° beneficioso a largo plazo.

Un error com√∫n de sintaxis es olvidar el n√∫mero correcto de llaves. A veces falta una llave de cierre en una funci√≥n o se agregan demasiadas llaves de cierre. En tu sketch, cada llave de apertura necesita una llave de cierre. La indentaci√≥n adecuada tambi√©n te ayuda a identificar y solucionar desajustes en las llaves.


**Cuando el bot√≥n est√° presionado**

Ahora es momento de escribir el c√≥digo que permite que los peatones crucen la calle cuando se presiona el bot√≥n.

Esto requerir√° una segunda sentencia condicional. Sin embargo, esta vez necesitar√°s comparar el valor de ``digitalRead()`` del pin 8 con ``HIGH`` en lugar de ``LOW``.

Cuando se presiona el bot√≥n, el sem√°foro debe detener todos los veh√≠culos y se√±alar que es seguro para los peatones cruzar. Para lograr esto, apagar√°s los LEDs rojo y amarillo y har√°s que el LED verde parpadee. Dentro de las llaves de tu segunda sentencia condicional, agrega tres comandos ``digitalWrite()``:

* Encender el LED verde conectado al pin 3.
* Apagar el LED amarillo conectado al pin 4.
* Apagar el LED rojo conectado al pin 5.

Luego, haz que el LED verde parpadee. Recuerda, la frecuencia del parpadeo est√° determinada por tus sentencias ``delay()``.

Tu sketch deber√≠a verse algo as√≠:


.. code-block:: Arduino
    :emphasize-lines: 24-31

    void setup() {
        pinMode(3, OUTPUT);  // declarar el pin 3 (LED verde) como salida
        pinMode(4, OUTPUT);  // declarar el pin 4 (LED amarillo) como salida
        pinMode(5, OUTPUT);  // declarar el pin 5 (LED rojo) como salida
        pinMode(8, INPUT);   // declarar el pin 8 (bot√≥n) como entrada
    }

    void loop() {
        // C√≥digo principal, ejecutado repetidamente:
        if (digitalRead(8) == LOW) {
            digitalWrite(3, HIGH);  // Encender el LED en el pin 3
            digitalWrite(4, LOW);   // Apagar el LED en el pin 4
            digitalWrite(5, LOW);   // Apagar el LED en el pin 5
            delay(10000);           // Esperar 10 segundos
            digitalWrite(3, LOW);   // Apagar el LED en el pin 3
            digitalWrite(4, HIGH);  // Encender el LED en el pin 4
            digitalWrite(5, LOW);   // Apagar el LED en el pin 5
            delay(3000);            // Esperar 3 segundos
            digitalWrite(3, LOW);   // Apagar el LED en el pin 3
            digitalWrite(4, LOW);   // Apagar el LED en el pin 4
            digitalWrite(5, HIGH);  // Encender el LED en el pin 5
            delay(10000);           // Esperar 10 segundos
        }
        if (digitalRead(8) == HIGH) {  //si el bot√≥n est√° presionado:
            digitalWrite(3, HIGH);       // Encender el LED en el pin 3
            digitalWrite(4, LOW);        // Apagar el LED en el pin 4
            digitalWrite(5, LOW);        // Apagar el LED en el pin 5
            delay(500);                  // Esperar medio segundo
            digitalWrite(3, LOW);        // Apagar el LED en el pin 3
            delay(500);                  // Esperar medio segundo
        }
    }

Sube tu c√≥digo al Arduino Uno R3. Una vez que el sketch se haya transferido por completo, el c√≥digo se ejecutar√°.

Observa el comportamiento de tu sem√°foro. Presiona el bot√≥n y espera a que el sem√°foro complete su ciclo. ¬øParpadea el LED verde para los peatones? ¬øVuelve el sem√°foro a su modo de operaci√≥n normal cuando se suelta el bot√≥n? Si no es as√≠, ajusta tu sketch y vuelve a subirlo al R3.

Una vez completado, guarda tu sketch.

**Pregunta**

Durante la prueba, puedes notar que el LED verde solo parpadea mientras se mantiene presionado el bot√≥n de peat√≥n, pero los peatones no pueden cruzar la calle mientras mantienen presionado el bot√≥n continuamente. ¬øC√≥mo podr√≠as modificar el c√≥digo para asegurar que, una vez que el bot√≥n de peat√≥n se presione, el LED verde permanezca encendido el tiempo suficiente para un cruce seguro sin necesidad de mantener el bot√≥n presionado? Por favor, escribe la soluci√≥n en pseudoc√≥digo en tu cuaderno.

**Resumen**

En esta lecci√≥n, hemos integrado un bot√≥n de peat√≥n en un sistema de sem√°foro, simulando un escenario real que equilibra el flujo de tr√°fico vehicular y peatonal. Exploramos el funcionamiento de un bot√≥n en un circuito electr√≥nico y utilizamos la funci√≥n ``digitalRead()`` para monitorear la entrada del bot√≥n. Al implementar sentencias condicionales con estructuras ``if``, programamos los sem√°foros para que respondan din√°micamente a la entrada de los peatones, mejorando nuestra comprensi√≥n de los sistemas interactivos. Esta lecci√≥n no solo reforz√≥ nuestras habilidades en programaci√≥n con Arduino, sino que tambi√©n destac√≥ la aplicaci√≥n pr√°ctica de estas tecnolog√≠as en la gesti√≥n eficiente de situaciones cotidianas.

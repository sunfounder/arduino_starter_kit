.. note::

    Bonjour et bienvenue dans la communaut√© Facebook des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 ! Plongez plus profond√©ment dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux nouvelles annonces de produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et tirages au sort** : Participez √† des promotions sp√©ciales et des concours lors des f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

24. Lumi√®re clignotante avec le 74HC595
===========================================

Dans cette le√ßon, nous allons plonger dans le monde du circuit int√©gr√© de registre √† d√©calage 74HC595. Ce composant puissant permet de contr√¥ler de nombreuses LED avec seulement quelques broches, ce qui le rend parfait pour mettre en ≈ìuvre des effets de lumi√®re clignotante. √Ä la fin de cette le√ßon, vous comprendrez parfaitement comment fonctionne le 74HC595, comment l'utiliser pour d√©caler des donn√©es binaires et comment l'appliquer dans une exp√©rience pratique de contr√¥le des LED.

.. raw:: html

    <video muted controls style = "max-width:90%">
        <source src="_static/video/24_flowing_light.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

Dans cette le√ßon, vous apprendrez √† :

* Comprendre le fonctionnement du circuit int√©gr√© 74HC595 et les fonctions de ses broches.
* Apprendre √† utiliser la fonction ``shiftOut()`` pour d√©caler des donn√©es.
* Construire un circuit de lumi√®re clignotante en utilisant la puce 74HC595 et Arduino.
* Contr√¥ler 8 LED en utilisant des donn√©es binaires et la puce 74HC595 pour cr√©er un effet de lumi√®re clignotante.

Comprendre la puce 74HC595
------------------------------

La puce 74HC595 se compose d'un registre √† d√©calage de 8 bits et d'un registre de stockage avec des sorties parall√®les √† trois √©tats. Elle convertit une entr√©e s√©rie en une sortie parall√®le, ce qui permet de sauvegarder des ports d'E/S d'un microcontr√¥leur (MCU).

.. image:: img/24_74hc595.png
    :width: 300
    :align: center

**Fonctions des broches**

.. image:: img/24_74hc595_pin.png
    :width: 500
    :align: center

* **Q0-Q7** : Broches de sortie de donn√©es parall√®les 8 bits, capables de contr√¥ler directement 8 LED ou 8 broches d'un afficheur √† 7 segments.
* **Q7'** : Broche de sortie s√©rie, connect√©e √† DS d'une autre 74HC595 pour connecter plusieurs 74HC595 en s√©rie.
* **MR** : Broche de r√©initialisation, active √† un niveau bas ;
* **SHcp** : Entr√©e de s√©quence de temps du registre √† d√©calage. √Ä la mont√©e du front, les donn√©es dans le registre √† d√©calage se d√©placent successivement d'un bit, c'est-√†-dire que les donn√©es de Q1 se d√©placent vers Q2, et ainsi de suite. √Ä la descente du front, les donn√©es dans le registre √† d√©calage restent inchang√©es.
* **STcp** : Entr√©e de s√©quence de temps du registre de stockage. √Ä la mont√©e du front, les donn√©es dans le registre √† d√©calage sont transf√©r√©es dans le registre de stockage.
* **CE** : Broche d'activation de sortie, active √† un niveau bas.
* **DS** : Broche d'entr√©e de donn√©es s√©rie.
* **VCC** : Broche de tension d'alimentation positive.
* **GND** : Broche de mise √† la terre.

**Principe de fonctionnement**

Lorsque MR (broche 10) est √† un niveau haut et OE (broche 13) est √† un niveau bas,
les donn√©es sont entr√©es √† la mont√©e du front de SHcp et vont dans le registre de stockage √† la mont√©e du front de STcp.

* Registre √† d√©calage

    * Supposons que nous voulions entrer les donn√©es binaires 1110 1110 dans le registre √† d√©calage du 74HC595.
    * Les donn√©es sont entr√©es √† partir du bit 0 du registre √† d√©calage.
    * √Ä chaque mont√©e du front d'horloge du registre √† d√©calage, les bits du registre se d√©calent d'un pas. Par exemple, le bit 7 accepte la valeur pr√©c√©dente du bit 6, le bit 6 prend la valeur du bit 5, etc.

.. image:: img/24_74hc595_shift.png
    :width: 600
    :align: center

* Registre de stockage

    * Lorsque le registre de stockage est √† l'√©tat de mont√©e, les donn√©es du registre √† d√©calage sont transf√©r√©es dans le registre de stockage.
    * Le registre de stockage est directement connect√© aux 8 broches de sortie, Q0 √† Q7 seront en mesure de recevoir un octet de donn√©es.
    * Le registre de stockage signifie que les donn√©es peuvent exister dans ce registre et ne dispara√Ætront pas avec une seule sortie.
    * Les donn√©es resteront valides et inchang√©es tant que le 74HC595 sera aliment√© en continu.
    * Lorsque de nouvelles donn√©es arrivent, les donn√©es dans le registre de stockage seront √©cras√©es et mises √† jour.

.. image:: img/24_74hc595_storage.png
    :width: 600
    :align: center

Construire le circuit
-------------------------

**Composants n√©cessaires**

.. list-table::
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 8 * LED
     - 8 * R√©sistance de 220Œ©
     - 1 * 74HC595
   * - |list_uno_r3|
     - |list_red_led|
     - |list_220ohm|
     - |list_74hc595|
   * - 1 * Plaque de montage (breadboard)
     - Fils de connexion
     - 1 * C√¢ble USB
     -
   * - |list_breadboard|
     - |list_wire|
     - |list_usb_cable|
     -

**√âtapes de construction**

Suivez le sch√©ma de c√¢blage ou les √©tapes ci-dessous pour construire votre circuit.

.. image:: img/24_flow_light.png
    :width: 600
    :align: center

1. Ins√©rez 8 LED sur la plaque de montage, dans la configuration de couleur de votre choix. Assurez-vous que toutes les cathodes (jambes courtes) des LED sont connect√©es au rail de mise √† la terre sur la plaque, tandis que les anodes sont connect√©es √† des rang√©es s√©par√©es.

.. image:: img/24_flow_light_led.png
    :width: 500
    :align: center

2. Connectez une r√©sistance de 220Œ© √† chaque anode des LED.

.. image:: img/24_flow_light_resistor.png
    :width: 500
    :align: center

3. Localisez la puce 74HC595 et ins√©rez-la dans la plaque de montage. Assurez-vous que la puce traverse la s√©paration centrale.

.. note::

    Faites tr√®s attention √† l'orientation du 74HC595 pour √©viter de l'endommager. Vous pouvez identifier l'orientation correcte en utilisant les indices suivants :

    * L'√©tiquette sur la puce est orient√©e vers le haut.
    * L'encoche sur la puce est √† gauche.

.. image:: img/24_flow_light_74hc595.png
    :width: 500
    :align: center

4. Connectez les broches VCC et MR du 74HC595 au rail positif de la plaque de montage.

.. image:: img/24_flow_light_vcc.png
    :width: 500
    :align: center

5. Connectez les broches CE et GND du 74HC595 au rail n√©gatif de la plaque de montage.

.. image:: img/24_flow_light_gnd.png
    :width: 500
    :align: center

6. Connectez les broches Q0-Q7 du 74HC595 aux rang√©es de la plaque de montage contenant les r√©sistances de 220Œ©.

.. image:: img/24_flow_light_q0_q7.png
    :width: 500
    :align: center

7. Connectez la broche DS du 74HC595 √† la broche 11 de l'Arduino Uno R3.

.. image:: img/24_flow_light_pin11.png
    :width: 600
    :align: center

8. Connectez la broche ST_CP du 74HC595 √† la broche 12 de l'Arduino Uno R3.

.. image:: img/24_flow_light_pin12.png
    :width: 600
    :align: center

9. Connectez la broche Sh_CP du 74HC595 √† la broche 8 de l'Arduino Uno R3.

.. image:: img/24_flow_light_pin8.png
    :width: 600
    :align: center

10. Enfin, connectez les broches GND et 5V de l'Arduino Uno R3 aux rails n√©gatif et positif de la plaque de montage, respectivement.

.. image:: img/24_flow_light.png
    :width: 600
    :align: center

11. Le tableau suivant montre les connexions des broches entre le 74HC595 et l'Arduino Uno R3.

.. list-table::
    :widths: 20 20
    :header-rows: 1

    *   - 74HC595
        - Arduino UNO R3
    *   - VCC
        - 5V
    *   - Q0~Q7
        - LEDs 
    *   - DS
        - 11
    *   - CE
        - GND
    *   - ST_CP
        - 12
    *   - SH_CP
        - 8
    *   - MR
        - 5V
    *   - GND
        - GND


Cr√©ation du code - Allumer les LEDs
--------------------------------------------

L'Arduino Uno R3 envoie des groupes de donn√©es binaires √† la puce 74HC595.
Les donn√©es binaires sont au c≈ìur des ordinateurs et de nombreux dispositifs √©lectroniques, utilisant des 0 et des 1 pour traiter des donn√©es complexes et des instructions.
En informatique et en √©lectronique num√©rique, les donn√©es binaires sont essentielles, car elles constituent la base du traitement de l'information et du stockage dans les ordinateurs √©lectroniques.
Ici, 0 et 1 peuvent √™tre consid√©r√©s comme des √©tats d'un interrupteur, o√π 0 repr√©sente √©teint (ferm√©), et 1 repr√©sente allum√© (ouvert).

Pour les nombres binaires, vous devez comprendre deux concepts de base :

* Bit : Un bit est l'unit√© de base dans le syst√®me binaire, et chaque bit peut √™tre soit 0, soit 1.
* Octet : Un octet est compos√© de 8 bits. C'est une unit√© courante de traitement des donn√©es dans les ordinateurs. (Et regardez, la puce 74HC595 accepte exactement 1 octet de donn√©es √† la fois !)

Les nombres binaires sont ordonn√©s du bit le moins significatif au plus significatif, avec le bit le plus √† droite √©tant le moins significatif et celui le plus √† gauche √©tant le plus significatif.

.. image:: img/24_binary_bit.png
    :width: 500
    :align: center

Voyons maintenant comment le 74HC595 re√ßoit des donn√©es binaires et les envoie aux LEDs !

1. Ouvrez l'Arduino IDE et d√©marrez un nouveau projet en s√©lectionnant "New Sketch" dans le menu "File".
2. Enregistrez votre projet sous le nom ``Lesson24_Lighting_up_LEDs`` en utilisant ``Ctrl + S`` ou en cliquant sur "Save".

3. Le contr√¥le du 74HC595 ne n√©cessite que trois broches pour fournir des signaux d'impulsion, donc d√©finissez-les comme des sorties.

.. code-block:: Arduino

    const int STcp = 12;  // Broche connect√©e √† ST_CP du 74HC595
    const int SHcp = 8;   // Broche connect√©e √† SH_CP du 74HC595
    const int DS = 11;    // Broche connect√©e √† DS du 74HC595

    void setup() {
        // D√©finir les broches en mode sortie
        pinMode(STcp, OUTPUT);
        pinMode(SHcp, OUTPUT);
        pinMode(DS, OUTPUT);
    }

4. Votre ordinateur envoie des donn√©es binaires √† la broche ``DS`` (entr√©e de donn√©es) du 74HC595, puis utilise le signal d'horloge provenant de la broche ``SH_CP`` (entr√©e de l'horloge du registre √† d√©calage) pour faire avancer chaque bit de donn√©es. Ce processus de transmission de donn√©es peut √™tre impl√©ment√© √† l'aide de la fonction ``shiftOut()``.

    * ``shiftOut(dataPin, clockPin, bitOrder, value)`` : D√©cale un octet de donn√©es un bit √† la fois. Le d√©calage commence soit par le bit le plus significatif (MSB), soit par le bit le moins significatif (LSB). Chaque bit est √©crit successivement sur une broche de donn√©es, puis une broche d'horloge est activ√©e (pass√©e de haut √† bas) pour indiquer que le bit est disponible.

    **Param√®tres**

        * ``dataPin`` : La broche sur laquelle chaque bit sera envoy√©. Type de donn√©es accept√© : int.
        * ``clockPin`` : La broche √† basculer une fois que la broche de donn√©es a √©t√© d√©finie sur la valeur correcte. Type de donn√©es accept√© : int.
        * ``bitOrder`` : L'ordre dans lequel d√©caler les bits : ``MSBFIRST`` ou ``LSBFIRST`` (bit le plus significatif ou bit le moins significatif en premier).
        * ``value`` : Les donn√©es √† d√©caler. Type de donn√©es accept√© : byte.

    **Retourne**
        Rien

5. Ici, nous essayons d'envoyer un octet (8 bits) de donn√©es au registre √† d√©calage 74HC595 en utilisant la fonction ``shiftOut()``.

.. code-block:: Arduino
    :emphasize-lines: 3

    void loop()
    {
        shiftOut(DS, SHcp, MSBFIRST, B11101110);  // D√©cale les donn√©es, MSB en premier
    }

* Cela envoie les donn√©es ``B11101110`` (binaire, B signifie binaire) au registre √† d√©calage du 74HC595, en commen√ßant par le bit le plus significatif.
* Chaque fois que la broche ``SH_CP`` re√ßoit un signal de front montant (moment o√π la tension passe de bas √† haut), les bits dans le registre √† d√©calage sont d√©cal√©s d'une √©tape.
* Par exemple, le bit 7 accepte la valeur pr√©c√©dente du bit 6, le bit 6 obtient la valeur du bit 5, etc.

.. image:: img/24_74hc595_shift.png
    :width: 500
    :align: center

6. Apr√®s que tous les bits de donn√©es ont √©t√© entr√©s via la broche DS et d√©cal√©s √† leur position correcte √† l'aide de plusieurs signaux d'horloge, l'√©tape suivante consiste √† copier ces donn√©es du registre √† d√©calage vers un registre de stockage.

.. code-block:: Arduino
    :emphasize-lines: 2,7

    void loop() {
        digitalWrite(STcp, LOW);  // Relie ST_CP (broche de verrouillage) √† la terre et maintient-la √† LOW pendant la transmission des donn√©es
        
        // Envoie des donn√©es au registre √† d√©calage en utilisant MSBFIRST (Bit le plus significatif en premier)
        shiftOut(DS, SHcp, MSBFIRST, B11101110);
        
        digitalWrite(STcp, HIGH);  // Tire ST_CP √† HIGH pour enregistrer les donn√©es sur les broches de sortie
        
        delay(1000);  // Attends une seconde avant de r√©p√©ter
    }

* Lorsque la broche ``ST_CP`` re√ßoit un signal de front montant, les donn√©es dans le registre √† d√©calage sont copi√©es dans le registre de stockage.
* Une fois que les donn√©es sont copi√©es dans le registre de stockage, les LEDs connect√©es aux broches de sortie correspondantes (Q0 √† Q7) s'allumeront ou resteront √©teintes selon que les donn√©es sont 1 ou 0.

.. image:: img/24_74hc595_storage_1data.png
    :width: 300
    :align: center

7. Voici votre code complet. Vous pouvez maintenant t√©l√©verser ce code sur l'Arduino Uno R3. Ensuite, vous verrez que les LEDs connect√©es √† Q0 et Q4 restent √©teintes tandis que les autres LEDs sont allum√©es.

.. code-block:: Arduino

    const int STcp = 12;  // Broche connect√©e √† ST_CP du 74HC595
    const int SHcp = 8;   // Broche connect√©e √† SH_CP du 74HC595
    const int DS = 11;    // Broche connect√©e √† DS du 74HC595

    void setup() {
        // Configurer les broches en mode sortie
        pinMode(STcp, OUTPUT);
        pinMode(SHcp, OUTPUT);
        pinMode(DS, OUTPUT);
    }

    void loop() {
        digitalWrite(STcp, LOW);  // Relie ST_CP √† la terre et maintient √† LOW pendant la transmission
        shiftOut(DS, SHcp, MSBFIRST, B11101110);  // D√©cale les donn√©es, MSB en premier
        digitalWrite(STcp, HIGH);  // Tire ST_CP √† HIGH pour enregistrer les donn√©es
        delay(1000);  // Attends une seconde
    }

**Question**

Que se passe-t-il si nous changeons ``MSBFIRST`` en ``LSBFIRST`` dans ``shiftOut(DS, SHcp, MSBFIRST, B11101110);`` ? Pourquoi ?



Cr√©ation du code - Lumi√®re d√©filante
------------------------------------------

Comment pourrions-nous impl√©menter un effet de lumi√®re d√©filante, o√π les LEDs s'allument une par une ?

1. Ouvrez l'esquisse que vous avez enregistr√©e pr√©c√©demment, ``Lesson24_Lighting_up_LEDs``. 

2. Cliquez sur "Enregistrer sous..." dans le menu "Fichier", et renommez-la ``Lesson24_Flowing_Light``. Cliquez sur "Enregistrer".

3. Ici, nous voulons configurer un effet de lumi√®re d√©filante, o√π les LEDs s'allument une par une. Nous allons √©crire les √©tats allum√©s/√©teints de cette s√©quence de lumi√®re d√©filante sous forme de tableau.

.. code-block:: Arduino
    :emphasize-lines: 4

    const int STcp = 12;  // Broche connect√©e √† ST_CP du 74HC595
    const int SHcp = 8;   // Broche connect√©e √† SH_CP du 74HC595
    const int DS = 11;    // Broche connect√©e √† DS du 74HC595
    int datArray[] = {B00000000, B00000001, B00000011, B00000111, B00001111, B00011111, B00111111, B01111111, B11111111};

4. Ensuite, utilisez une boucle ``for`` pour appeler s√©quentiellement ce tableau.

.. code-block:: Arduino
    :emphasize-lines: 3,5

    void loop()
    {
        for (int num = 0; num <= 8; num++) {
            digitalWrite(STcp, LOW);                      // Relie ST_CP √† la terre et maintient √† LOW pendant la transmission
            shiftOut(DS, SHcp, MSBFIRST, datArray[num]);  // D√©cale les donn√©es, MSB en premier
            digitalWrite(STcp, HIGH);                     // Tire ST_CP √† HIGH pour enregistrer les donn√©es
            delay(1000);                                  // Attends une seconde
        }
    }

5. Votre code complet est pr√©sent√© ci-dessous. Vous pouvez maintenant t√©l√©verser ce code sur l'Arduino Uno R3, et vous verrez les LEDs s'allumer une par une, comme une lumi√®re d√©filante.

.. code-block:: Arduino

    const int STcp = 12;  // Broche connect√©e √† ST_CP du 74HC595
    const int SHcp = 8;   // Broche connect√©e √† SH_CP du 74HC595
    const int DS = 11;    // Broche connect√©e √† DS du 74HC595
    int datArray[] = {B00000000, B00000001, B00000011, B00000111, B00001111, B00011111, B00111111, B01111111, B11111111};

    void setup ()
    {
        // Configurer les broches en mode sortie
        pinMode(STcp, OUTPUT);
        pinMode(SHcp, OUTPUT);
        pinMode(DS, OUTPUT);
    }

    void loop()
    {
        for (int num = 0; num <= 8; num++) {
            digitalWrite(STcp, LOW);                      // Relie ST_CP √† la terre et maintient √† LOW pendant la transmission
            shiftOut(DS, SHcp, MSBFIRST, datArray[num]);  // D√©cale les donn√©es, MSB en premier
            digitalWrite(STcp, HIGH);                     // Tire ST_CP √† HIGH pour enregistrer les donn√©es
            delay(1000);                                  // Attends une seconde
        }
    }

6. Enfin, n'oubliez pas de sauvegarder votre code et de ranger votre espace de travail.

**Question**

Si nous voulons que trois LEDs soient allum√©es √† la fois et qu'elles apparaissent en "flux", comment les √©l√©ments du tableau ``datArray[]`` devraient-ils √™tre modifi√©s ?

**R√©sum√©**

Dans cette le√ßon, nous avons explor√© la structure et la fonctionnalit√© de la puce 74HC595, en apprenant comment d√©caler des donn√©es binaires √† travers son registre √† d√©calage et construire une exp√©rience de lumi√®re d√©filante. En utilisant la fonction ``shiftOut()`` pour contr√¥ler la transmission des donn√©es binaires, nous avons r√©ussi √† g√©rer l'allumage s√©quentiel de 8 LEDs pour obtenir un effet de lumi√®re d√©filante. Avec cette nouvelle connaissance, vous devriez maintenant √™tre capable d'utiliser efficacement la puce 74HC595 pour ajouter des fonctionnalit√©s d'√©clairage impressionnantes √† vos propres projets.


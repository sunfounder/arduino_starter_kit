.. note::

    Hallo, willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Community auf Facebook! Tauche tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit Gleichgesinnten.

    **Warum mitmachen?**

    - **Expertenunterst√ºtzung**: L√∂se nach dem Kauf auftretende Probleme und technische Herausforderungen mit Hilfe unserer Community und unseres Teams.
    - **Lernen & Teilen**: Tausche Tipps und Tutorials aus, um deine F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalte fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und Einblicken.
    - **Spezielle Rabatte**: Genie√üe exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nimm an Gewinnspielen und festlichen Sonderaktionen teil.

    üëâ Bereit, mit uns zu erkunden und zu erschaffen? Klicke auf [|link_sf_facebook|] und tritt noch heute bei!

25. Nummern anzeigen mit dem 74HC595
========================================

In der vorherigen Lektion hast du m√∂glicherweise bemerkt, dass der 74HC595 und das 7-Segment-Display ein perfektes Paar bilden. Der 74HC595 kann gleichzeitig 8-Bit-Signale ausgeben, w√§hrend das 7-Segment-Display durch 8 elektrische Signale gesteuert wird (einschlie√ülich des Dezimalpunkt-LED-Segments, d.h. des dp-Segments).

Kann der 74HC595 also zur Steuerung des 7-Segment-Displays verwendet werden? Die Antwort lautet ja.

In dieser Lektion werden wir den 74HC595 verwenden, um das 7-Segment-Display zu steuern und verschiedene Zahlen anzuzeigen.

.. raw:: html

    <video muted controls style = "max-width:90%">
        <source src="_static/video/25_show_number.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

In dieser Lektion wirst du lernen:

* Wie man das Schieberegister 74HC595 verwendet, um ein 7-Segment-Display anzutreiben.
* Die Bin√§rdarstellungen der Ziffern 0 bis 9 zu verstehen und wie man sie in Dezimal- und Hexadezimalformate umwandelt.
* Wie man den seriellen Monitor verwendet, um Daten einzugeben und auf dem 7-Segment-Display anzuzeigen.


Aufbau der Schaltung
-----------------------------

**Ben√∂tigte Komponenten**

.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * 7-Segment-Display
     - 1 * 220Œ©-Widerstand
     - 1 * 74HC595
   * - |list_uno_r3| 
     - |list_7segment| 
     - |list_220ohm| 
     - |list_74hc595| 
   * - 1 * Steckbrett
     - Jumperkabel
     - 1 * USB-Kabel
     -
   * - |list_breadboard| 
     - |list_wire| 
     - |list_usb_cable| 
     -

**Schritt-f√ºr-Schritt-Aufbau**

Folge dem Verdrahtungsdiagramm oder den untenstehenden Schritten, um deine Schaltung aufzubauen.

.. image:: img/25_show_number.png
    :width: 500
    :align: center

1. Setze das 7-Segment-Display in das Steckbrett ein, wobei der Dezimalpunkt in der unteren rechten Ecke ist.

.. image:: img/25_show_number_7segment.png
    :width: 500
    :align: center

2. Verbinde den negativen (-) Anschluss des 7-Segment-Displays mit der Masse-Schiene des Steckbretts mittels eines Jumperkabels.

.. image:: img/25_show_number_resistor.png
    :width: 500
    :align: center

3. Finde den 74HC595-Chip und setze ihn in das Steckbrett ein. Achte darauf, dass der Chip die mittlere L√ºcke √ºberbr√ºckt.

.. image:: img/25_show_number_74hc595.png
    :width: 500
    :align: center

4. Verbinde die VCC- und MR-Pins des 74HC595 mit der Plus-Schiene des Steckbretts.

.. image:: img/25_show_number_vcc.png
    :width: 500
    :align: center

5. Verbinde die CE- und GND-Pins des 74HC595 mit der Minus-Schiene des Steckbretts.

.. image:: img/25_show_number_gnd.png
    :width: 500
    :align: center

6. Verbinde Q0 des 74HC595 mit dem 'a'-Pin des 7-Segment-Displays, Q1 mit dem 'b'-Pin, Q2 mit dem 'c'-Pin, Q3 mit dem 'd'-Pin und Q4 mit dem 'e'-Pin.

.. image:: img/25_show_number_q0_q4.png
    :width: 500
    :align: center

7. Verbinde Q5 des 74HC595 mit dem 'f'-Pin des 7-Segment-Displays, Q6 mit dem 'g'-Pin und Q7 mit dem 'dp'-Pin.

.. image:: img/25_show_number_q5_q7.png
    :width: 500
    :align: center

8. Verbinde den DS-Pin des 74HC595 mit Pin 11 des Arduino Uno R3.

.. image:: img/25_show_number_pin11.png
    :width: 500
    :align: center

9. Verbinde den ST_CP-Pin des 74HC595 mit Pin 12 des Arduino Uno R3.

.. image:: img/25_show_number_pin12.png
    :width: 500
    :align: center

10. Verbinde den SH_CP-Pin des 74HC595 mit Pin 8 des Arduino Uno R3.

.. image:: img/25_show_number_pin8.png
    :width: 500
    :align: center

11. Verbinde schlie√ülich die GND- und 5V-Pins des Arduino Uno R3 mit der Minus- und Plus-Schiene des Steckbretts.

.. image:: img/25_show_number.png
    :width: 500
    :align: center

12. Die folgende Tabelle zeigt die Pin-Verbindungen zwischen dem 74HC595, dem Arduino Uno R3 und dem 7-Segment-Display.

.. list-table::
    :widths: 20 20
    :header-rows: 1

    *   - 74HC595
        - Arduino UNO R3
    *   - VCC
        - 5V
    *   - DS
        - 11
    *   - CE
        - GND
    *   - ST_CP
        - 12
    *   - SH_CP
        - 8
    *   - MR
        - 5V
    *   - GND
        - GND

.. list-table::
    :widths: 20 20
    :header-rows: 1

    *   - 74HC595
        - 7-Segment-Display
    *   - Q0
        - a
    *   - Q1
        - b 
    *   - Q2
        - c
    *   - Q3
        - d
    *   - Q4
        - e
    *   - Q5
        - f
    *   - Q6
        - g
    *   - Q7
        - dp

Bin√§rzahlen f√ºr die Ziffern 0 bis 9
----------------------------------------

In diesem Projekt verwenden wir das 74HC595-Schieberegister, um das 7-Segment-Display zu steuern und verschiedene Ziffern anzuzeigen. Das 74HC595 empf√§ngt jedoch Bin√§rzahlen. Daher m√ºssen wir vor dem Programmieren die entsprechenden Bin√§rzahlen f√ºr die Ziffern 0 bis 9 kennen.

Angenommen, wir m√∂chten die Ziffer 2 auf dem 7-Segment-Display anzeigen. Daf√ºr m√ºssen die Segmente f und c ausgeschaltet und die √ºbrigen Segmente eingeschaltet werden.

.. image:: img/23_segment_2.png
    :align: center
    :width: 200

Laut dem Verdrahtungsdiagramm entsprechen die Ausgangspins Q0 bis Q7 des 74HC595 den jeweiligen Pins des 7-Segment-Displays, wie in der Abbildung gezeigt. Im Bin√§rsystem steht 0 f√ºr aus (geschlossen) und 1 f√ºr ein (offen). Um die Ziffer 2 anzuzeigen, m√ºssen dp, f und c 0 sein, w√§hrend die anderen Segmente 1 sind. Dies ergibt die Bin√§rzahl ``B01011011``.

.. image:: img/25_display_2_binary.png
    :align: center
    :width: 600

.. note::

    Wenn nur ein 7-Segment-Display vorhanden ist, wird der DP-Pin immer auf 0 gesetzt. Wenn mehrere 7-Segment-Displays in einer Daisy-Chain-Konfiguration verwendet werden, kann der DP-Pin zur Anzeige des Dezimalpunkts verwendet werden.

Um die Ziffer 0 anzuzeigen, m√ºssen dp und g 0 sein und alle anderen Segmente 1, was die Bin√§rzahl ``B00111111`` ergibt.

**Frage**

Da wir jetzt die Bin√§rdarstellungen f√ºr die Ziffern 0 und 2 kennen, f√ºllen Sie bitte die Bin√§rzahlen f√ºr die verbleibenden Ziffern in der folgenden Tabelle aus.

.. list-table::
    :widths: 20 20
    :header-rows: 1

    *   - Zahl
        - Bin√§r
    *   - 0
        - B00111111
    *   - 1
        -
    *   - 2
        - B01011011
    *   - 3
        -
    *   - 4
        -
    *   - 5
        -
    *   - 6
        -
    *   - 7
        -
    *   - 8
        -
    *   - 9
        -  


Code-Erstellung - Zahlen anzeigen
------------------------------------------
1. √ñffne das zuvor gespeicherte Sketch ``Lesson24_Flowing_Light``. 

2. W√§hle im Men√º ‚ÄûSpeichern unter...‚Äú und benenne es in ``Lesson25_Show_Number_Binary`` um. Klicke auf "Speichern".

3. √Ñndere das ``datArray[]``, um die Bin√§rzahlen anzuzeigen, die den Ziffern 0 bis 9 entsprechen.

.. code-block:: Arduino
    :emphasize-lines: 5

    const int STcp = 12;  //Pin verbunden mit ST_CP des 74HC595
    const int SHcp = 8;   //Pin verbunden mit SH_CP des 74HC595
    const int DS = 11;    //Pin verbunden mit DS des 74HC595
    //zeige 0,1,2,3,4,5,6,7,8,9 an
    int datArray[] = { B00111111, B00000110, B01011011, B01001111, B01100110, B01101101, B01111101, B00000111, B01111111, B01101111 };


4. Da das Array ``datArray[]`` 10 Elemente enth√§lt, √§ndere den Bereich der Variablen ``num`` auf ``num <= 9``.

.. code-block:: Arduino
    :emphasize-lines: 2

    void loop() {
        for (int num = 0; num <= 9; num++) {
            digitalWrite(STcp, LOW);                      // Setze ST_CP auf LOW und halte es w√§hrend der √úbertragung
            shiftOut(DS, SHcp, MSBFIRST, datArray[num]);  // Sende die Daten, MSB zuerst
            digitalWrite(STcp, HIGH);                     // Setze ST_CP auf HIGH, um die Daten zu speichern
            delay(1000);                                  // Warte eine Sekunde
        }
    }

5. Dein vollst√§ndiger Code sollte folgenderma√üen aussehen. Jetzt kannst du den Code auf den Arduino Uno R3 hochladen, und du wirst sehen, wie das 7-Segment-Display die Ziffern von 0 bis 9 durchl√§uft.

.. code-block:: Arduino

    const int STcp = 12;  //Pin verbunden mit ST_CP des 74HC595
    const int SHcp = 8;   //Pin verbunden mit SH_CP des 74HC595
    const int DS = 11;    //Pin verbunden mit DS des 74HC595
    //zeige 0,1,2,3,4,5,6,7,8,9 an
    int datArray[] = { B00111111, B00000110, B01011011, B01001111, B01100110, B01101101, B01111101, B00000111, B01111111, B01101111 };

    void setup() {
        //Pins als Ausgang setzen
        pinMode(STcp, OUTPUT);
        pinMode(SHcp, OUTPUT);
        pinMode(DS, OUTPUT);
    }

    void loop() {
        for (int num = 0; num <= 9; num++) {
            digitalWrite(STcp, LOW);                      // Setze ST_CP auf LOW und halte es w√§hrend der √úbertragung
            shiftOut(DS, SHcp, MSBFIRST, datArray[num]);  // Sende die Daten, MSB zuerst
            digitalWrite(STcp, HIGH);                     // Setze ST_CP auf HIGH, um die Daten zu speichern
            delay(1000);                                  // Warte eine Sekunde
        }
    }

Bin√§rumrechnung
------------------

In praktischen Anwendungen erm√∂glicht das Schreiben von Bin√§rzahlen eine klarere Darstellung des Zustands jedes Bits in den Daten. F√ºr die allgemeine Zahlendarstellung ist das Schreiben von Dezimalzahlen jedoch bequemer.

.. note::

    Das Schreiben von Bin√§r-, Dezimal- oder sogar Hexadezimalzahlen beeinflusst nicht das Ergebnis des Programms, sondern nur die Lesbarkeit des Codes. Zum Beispiel wird die Dezimalzahl ``91`` intern in die Bin√§rform ``B01011011`` umgewandelt.

Schauen wir uns an, wie Bin√§rzahlen in Dezimalzahlen umgewandelt werden.

**Umrechnung in Dezimal**

Im Bin√§rsystem repr√§sentiert jedes Bit einen entsprechenden Stellenwert. Der Stellenwert ist eine Potenz von 2, wie z. B. 2^0, 2^1, 2^2 usw. Durch Multiplikation jedes Bits mit seinem entsprechenden Stellenwert und Addition der Ergebnisse erhalten wir die Dezimalzahl.

Beispielsweise wird die Bin√§rzahl ``B01011011`` in die Dezimalzahl 91 umgewandelt.

.. image:: img/25_binary_dec.png
    :align: center
    :width: 600
 
**Verwendung eines Taschenrechners**

In praktischen Anwendungen kannst du den Rechner auf deinem Computer verwenden. Schalte in den Programmierermodus, und du kannst ganz einfach zwischen Bin√§r-, Dezimal- und Hexadezimalzahlen umrechnen.

Suche auf deinem Computer nach ‚ÄûRechner‚Äú und schalte dann in den **Programmierer**-Modus.

.. image:: img/25_calculator_programmer.png
    :align: center

2. Wenn du die Bin√§rzahl bereits kennst und sie in ein anderes Zahlensystem umrechnen m√∂chtest, w√§hle **BIN**.

.. image:: img/25_calculator_binary.png
    :align: center

3. Jetzt kannst du die Bin√§rzahl eingeben.

* Die effektiven Bits in Bin√§r beziehen sich auf den Bereich vom h√∂chstwertigen Bit (linkes, nicht null Bit) bis zum niedrigstwertigen Bit (rechtes, nicht null Bit).
* F√ºr die Bin√§rzahl ``B00111111`` sind die effektiven Bits ``111111``. 
* Gib nun ``111111`` in den Taschenrechner ein, um die entsprechende Dezimal- und Hexadezimalzahl zu erhalten.

.. image:: img/25_calculator_binary_0.png
    :align: center
    :width: 300

**Frage**

Bitte konvertiere die Bin√§rzahlen, die die Ziffern 0 bis 9 darstellen, in Dezimal- und Hexadezimalzahlen mit einem Taschenrechner und f√ºlle die Tabelle aus. Dies wird dir einen schnellen √úberblick √ºber die Basisumrechnungen verschaffen.

.. list-table::
    :widths: 20 40 30 30
    :header-rows: 1

    *   - Zahl
        - Bin√§r
        - Dezimal
        - Hexadezimal
    *   - 0
        - B00111111
        - 63
        - 0x3F
    *   - 1
        - B00000110
        -
        -
    *   - 2
        - B01011011
        -
        -
    *   - 3
        - B01001111
        -
        -
    *   - 4
        - B01100110
        -
        -
    *   - 5
        - B01101101
        -
        -
    *   - 6
        - B01111101
        -
        -
    *   - 7
        - B00000111
        -
        -
    *   - 8
        - B01111111
        -
        -
    *   - 9
        - B01101111
        -
        -

**Sketch modifizieren**

√ñffne nun dein ``Lesson25_Show_Number_Binary`` Sketch in der Arduino IDE. Klicke auf "Datei" -> "Speichern unter...", benenne die Datei in ``Lesson25_Show_Number_Decimal`` um und klicke auf "Speichern".

√Ñndere alle Elemente des ``datArray[]`` in Dezimalzahlen, wie im folgenden Code gezeigt. Sobald die √Ñnderungen vorgenommen wurden, kannst du den Code auf den Arduino Uno R3 hochladen, um den Effekt zu sehen.

.. code-block:: Arduino

    const int STcp = 12;  //Pin verbunden mit ST_CP des 74HC595
    const int SHcp = 8;   //Pin verbunden mit SH_CP des 74HC595
    const int DS = 11;    //Pin verbunden mit DS des 74HC595
    //zeige 0,1,2,3,4,5,6,7,8,9 an
    int datArray[] = { 63, 6, 91, 79, 102, 109, 125, 7, 127, 111 };

    void setup() {
        //setze Pins als Ausgang
        pinMode(STcp, OUTPUT);
        pinMode(SHcp, OUTPUT);
        pinMode(DS, OUTPUT);
    }

    void loop() {
        for (int num = 0; num <= 9; num++) {
            digitalWrite(STcp, LOW);                      // Setze ST_CP auf LOW und halte es w√§hrend der √úbertragung
            shiftOut(DS, SHcp, MSBFIRST, datArray[num]);  // Sende die Daten, MSB zuerst
            digitalWrite(STcp, HIGH);                     // Setze ST_CP auf HIGH, um die Daten zu speichern
            delay(1000);                                  // Warte eine Sekunde
        }
    }


Code-Erstellung - Serielle Eingabe
---------------------------------------

Der serielle Monitor ist ein leistungsf√§higes Werkzeug der Arduino IDE zur Kommunikation mit dem Arduino-Board. Wir haben ihn verwendet, um Daten wie analoge Werte von einem Fotowiderstand zu √ºberwachen. Er kann auch genutzt werden, um Daten an das Arduino zu senden, wodurch Aktionen basierend auf empfangenen Daten ausgef√ºhrt werden k√∂nnen.

In dieser Aktivit√§t geben wir eine Zahl zwischen 0 und 9 in den seriellen Monitor ein, um sie auf dem 7-Segment-Display anzuzeigen.

1. √ñffne dein ``Lesson25_Show_Number_Decimal`` Sketch in der Arduino IDE. Klicke auf "Datei" -> "Speichern unter...", benenne die Datei in ``Lesson25_Show_Number_Serial`` um. Klicke auf "Speichern".

2. Starte im ``void setup()`` den seriellen Monitor und setze dessen Baudrate auf 9600.

.. code-block:: Arduino
    :emphasize-lines: 6

    void setup() {
        //setze Pins als Ausgang
        pinMode(STcp, OUTPUT);
        pinMode(SHcp, OUTPUT);
        pinMode(DS, OUTPUT);
        Serial.begin(9600);  // Serielle Kommunikation auf 9600 Baud einrichten
    }

3. Beim Verwenden des seriellen Monitors kannst du die eingegebenen Daten √ºber den Arduino-Code auslesen. Hier sind zwei Funktionen wichtig:

* ``Serial.available()``: Gibt die Anzahl der Bytes (Zeichen) zur√ºck, die vom seriellen Port zum Lesen bereitstehen. Dies sind Daten, die bereits eingetroffen und im Empfangspuffer gespeichert sind (dieser kann 64 Bytes halten).
* ``Serial.read()``: Gibt den ASCII-Code des √ºber den seriellen Eingang empfangenen Zeichens zur√ºck.

Verwende nun eine ``if``-Anweisung in der Funktion ``loop()``, um zu √ºberpr√ºfen, ob Daten vom Port gelesen wurden, und drucke sie dann aus.

.. note::

    Kommentiere vor√ºbergehend die ``for``-Schleife in ``void loop()`` aus, die die Ziffern auf dem 7-Segment-Display anzeigt, um den Druckvorgang nicht zu st√∂ren.

.. code-block:: Arduino
    :emphasize-lines: 2-5

    void loop() {
        if (Serial.available() > 0) {
            //Gibt das vom seriellen Port empfangene Zeichen aus
            Serial.println(Serial.read());
        }

        // for (int num = 0; num <= 9; num++) {
        //   digitalWrite(STcp, LOW);                      // Setze ST_CP auf LOW und halte es w√§hrend der √úbertragung
        //   shiftOut(DS, SHcp, MSBFIRST, datArray[num]);  // Sende die Daten, MSB zuerst
        //   digitalWrite(STcp, HIGH);                     // Setze ST_CP auf HIGH, um die Daten zu speichern
        //   delay(1000);                                  // Warte eine Sekunde
        // }
    }

4. Dein vollst√§ndiger Code sieht folgenderma√üen aus. Jetzt kannst du den Code auf den Arduino Uno R3 hochladen.

.. code-block:: Arduino

    const int STcp = 12;  //Pin verbunden mit ST_CP des 74HC595
    const int SHcp = 8;   //Pin verbunden mit SH_CP des 74HC595
    const int DS = 11;    //Pin verbunden mit DS des 74HC595
    //zeige 0,1,2,3,4,5,6,7,8,9 an
    int datArray[] = { 63, 6, 91, 79, 102, 109, 125, 7, 127, 111 };

    void setup() {
        //setze Pins als Ausgang
        pinMode(STcp, OUTPUT);
        pinMode(SHcp, OUTPUT);
        pinMode(DS, OUTPUT);
        Serial.begin(9600);  // Serielle Kommunikation auf 9600 Baud einrichten
    }

    void loop() {
        if (Serial.available() > 0) {
            //Gibt das vom seriellen Port empfangene Zeichen aus
            Serial.println(Serial.read());
        }

        // for (int num = 0; num <= 9; num++) {
        //   digitalWrite(STcp, LOW);                      // Setze ST_CP auf LOW und halte es w√§hrend der √úbertragung
        //   shiftOut(DS, SHcp, MSBFIRST, datArray[num]);  // Sende die Daten, MSB zuerst
        //   digitalWrite(STcp, HIGH);                     // Setze ST_CP auf HIGH, um die Daten zu speichern
        //   delay(1000);                                  // Warte eine Sekunde
        // }
    }

5. Nach dem Hochladen √∂ffne den seriellen Monitor. Gib in das Eingabefeld die Zahl ``0`` (oder eine beliebige Ziffer zwischen 0 und 9) ein und dr√ºcke Enter. In diesem Moment wirst du feststellen, dass die serielle Ausgabe die Zahl ``48`` anzeigt.

.. note::

    * Wenn im seriellen Monitor die Option ‚ÄûNewline‚Äú ausgew√§hlt ist, kannst du auch eine ``10`` sehen.
    * ``10`` ist der ASCII-Code f√ºr ein Zeilenumbruchzeichen (auch als LF - Line Feed bezeichnet).


.. image:: img/25_serial_read.png
    :align: center
    :width: 600

Wo ist unser eingegebenes ``0`` hin? Woher kommt die ``48``? Kann es sein, dass ``0`` gleich ``48`` ist?

Das liegt daran, dass das ``0``, das wir in den seriellen Monitor eingegeben haben, als ‚ÄûZeichen‚Äú und nicht als ‚ÄûZahl‚Äú betrachtet wird.

Die Zeichen√ºbertragung folgt einem Codierungsstandard, der als ASCII (American Standard Code for Information Interchange) bekannt ist.

ASCII enth√§lt g√§ngige Zeichen wie Gro√übuchstaben (A-Z), Kleinbuchstaben (a-z), Ziffern (0-9) und Satzzeichen (Punkte, Kommas, Ausrufezeichen usw.). Es definiert auch Steuerzeichen, die zur Steuerung von Ger√§ten und Kommunikationsprotokollen verwendet werden. Diese Steuerzeichen werden normalerweise nicht auf dem Bildschirm angezeigt, steuern aber das Verhalten von Ger√§ten wie Druckern, Terminals usw., wie z. B. Zeilenumbruch, R√ºcktaste, Wagenr√ºcklauf usw.

Hier ist eine ASCII-Tabelle:

.. image:: img/25_ascii_table.png
    :align: center
    :width: 800

Wenn du das Zeichen ``0`` im seriellen Monitor eingibst, wird der ASCII-Code f√ºr das Zeichen ``0`` an das Arduino gesendet. Im ASCII-Code entspricht das Zeichen ``0`` dem Dezimalwert ``48``.

6. Bevor du mit der Programmierung fortf√§hrst, solltest du den vorherigen Code, der den ASCII-Code ausgibt, auskommentieren, um Konflikte mit dem nachfolgenden Code zu vermeiden.

.. code-block:: Arduino
    :emphasize-lines: 4

    void loop() {
        if (Serial.available() > 0) {
            // Den vom seriellen Port empfangenen Zeichen drucken
            // Serial.println(Serial.read());
        }

        // for (int num = 0; num <= 9; num++) {
        //   digitalWrite(STcp, LOW);                      // ST_CP auf LOW setzen und w√§hrend der √úbertragung halten
        //   shiftOut(DS, SHcp, MSBFIRST, datArray[num]);  // Daten √ºbertragen, MSB zuerst
        //   digitalWrite(STcp, HIGH);                     // ST_CP auf HIGH setzen, um die Daten zu speichern
        //   delay(1000);                                  // Eine Sekunde warten
        // }
    }

7. Du musst eine neue ``char``-Variable erstellen, um das Zeichen zu speichern, das vom seriellen Monitor gelesen wird.

.. code-block:: Arduino
    :emphasize-lines: 6,7

    void loop() {
        if (Serial.available() > 0) {
            // Den vom seriellen Port empfangenen Zeichen drucken
            // Serial.println(Serial.read());

            // Das vom seriellen Port empfangene Zeichen lesen
            char receivedChar = Serial.read();
        }
    }

8. Nun musst du das Zeichen in eine Zahl umwandeln. Im ASCII-Code entspricht das Zeichen ``'0'`` dem Wert ``48``, ``'1'`` dem Wert ``49`` und so weiter. Durch das Subtrahieren des ASCII-Codes f√ºr ``'0'`` kannst du den entsprechenden numerischen Wert erhalten.

.. code-block:: Arduino
    :emphasize-lines: 8,9

    void loop() {
        if (Serial.available() > 0) {
            //Den vom seriellen Port empfangenen Zeichen drucken
            Serial.println(Serial.read());

            // Das vom seriellen Port empfangene Zeichen lesen
            char receivedChar = Serial.read();
            // Das Zeichen in eine Ziffer umwandeln
            int digit = receivedChar - '0';
        }
    }

9. In diesem Beispiel gehen wir davon aus, dass die Eingabe numerische Zeichen ``'0'`` bis ``'9'`` sind. Daher interessieren uns nur Zeichen in diesem Bereich. Du musst also √ºberpr√ºfen, ob die Zahl im g√ºltigen Bereich liegt:

* W√§hle die zuvor auskommentierte ``for``-Schleife aus und dr√ºcke ``Ctrl + /``, um sie zu entkommentieren.
* √Ñndere dann die ``for``-Anweisung in eine ``if``-Anweisung, um zu √ºberpr√ºfen, ob das Eingabezeichen im Bereich ``'0'`` bis ``'9'`` liegt. Wenn dies der Fall ist, lasse die entsprechende Zahl auf dem 7-Segment-Display anzeigen.

.. code-block:: Arduino
    :emphasize-lines: 9

    void loop() {
        if (Serial.available() > 0) {
            // Den vom seriellen Port empfangenen Zeichen drucken
            // Serial.println(Serial.read());

            // Das vom seriellen Port empfangene Zeichen lesen
            char receivedChar = Serial.read();
            // Das Zeichen in eine Ziffer umwandeln
            int digit = receivedChar - '0';

            if (digit >= 0 && digit <= 9) {
                digitalWrite(STcp, LOW);                        // ST_CP auf LOW setzen und w√§hrend der √úbertragung halten
                shiftOut(DS, SHcp, MSBFIRST, datArray[digit]);  // Daten √ºbertragen, MSB zuerst
                digitalWrite(STcp, HIGH);                       // ST_CP auf HIGH setzen, um die Daten zu speichern
                delay(1000);                                    // Eine Sekunde warten
            }
        }
    }

10. Dein vollst√§ndiger Code sollte wie folgt aussehen. Du kannst den Code nun auf den Arduino Uno R3 hochladen und den seriellen Monitor √∂ffnen. Gib eine beliebige Zahl zwischen 0 und 9 ein, um zu √ºberpr√ºfen, ob das 7-Segment-Display die entsprechende Zahl anzeigt.

.. code-block:: Arduino

    const int STcp = 12;  //Pin verbunden mit ST_CP des 74HC595
    const int SHcp = 8;   //Pin verbunden mit SH_CP des 74HC595
    const int DS = 11;    //Pin verbunden mit DS des 74HC595
    //zeige 0,1,2,3,4,5,6,7,8,9 an
    int datArray[] = { 63, 6, 91, 79, 102, 109, 125, 7, 127, 111 };

    void setup() {
        //setze Pins als Ausgang
        pinMode(STcp, OUTPUT);
        pinMode(SHcp, OUTPUT);
        pinMode(DS, OUTPUT);
        Serial.begin(9600);  // Serielle Kommunikation auf 9600 Baud einrichten
    }

    void loop() {
        if (Serial.available() > 0) {
            // Den vom seriellen Port empfangenen Zeichen drucken
            // Serial.println(Serial.read());

            // Das vom seriellen Port empfangene Zeichen lesen
            char receivedChar = Serial.read();
            // Das Zeichen in eine Ziffer umwandeln
            int digit = receivedChar - '0';

            if (digit >= 0 && digit <= 9) {
                digitalWrite(STcp, LOW);                        // ST_CP auf LOW setzen und w√§hrend der √úbertragung halten
                shiftOut(DS, SHcp, MSBFIRST, datArray[digit]);  // Daten √ºbertragen, MSB zuerst
                digitalWrite(STcp, HIGH);                       // ST_CP auf HIGH setzen, um die Daten zu speichern
                delay(1000);                                    // Eine Sekunde warten
            }
        }
    }

11. Vergiss nicht, deinen Code zu speichern und deinen Arbeitsplatz aufzur√§umen.

**Zusammenfassung**

In dieser Lektion hast du gelernt, wie du das 74HC595-Schieberegister verwendest, um ein 7-Segment-Display anzusteuern und die Anzahl der ben√∂tigten Pins am Arduino Uno R3 zu reduzieren. Du hast auch die bin√§ren Darstellungen der Ziffern und die Umwandlung von bin√§ren Zahlen in Dezimal- und Hexadezimalformate kennengelernt, was die Lesbarkeit des Codes verbessert.

Zus√§tzlich hast du gelernt, wie der serielle Monitor f√ºr die serielle Eingabe genutzt wird und wie die eingegebenen Zeichen intern in ASCII-Codes umgewandelt werden. Durch das Verst√§ndnis dieser Umwandlung konntest du Zeichen in ihre numerischen Entsprechungen umwandeln und so die korrekte Anzeige auf dem 7-Segment-Display erm√∂glichen.

Insgesamt bot dir diese Lektion ein umfassendes Verst√§ndnis f√ºr die Verwendung von Schieberegistern, die Steuerung von 7-Segment-Anzeigen und den Umgang mit serieller Kommunikation f√ºr interaktive Projekte.

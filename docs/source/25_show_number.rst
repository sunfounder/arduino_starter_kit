.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez plus profond√©ment dans Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux nouvelles annonces de produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et √† des promotions sp√©ciales lors des f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

25. Afficher un chiffre avec le 74HC595
===========================================

Dans la le√ßon pr√©c√©dente, vous avez peut-√™tre remarqu√© que le 74HC595 et l'afficheur 7 segments forment un duo parfait. Le 74HC595 peut simultan√©ment produire des signaux sur 8 bits, tandis que l'afficheur 7 segments est contr√¥l√© par 8 signaux √©lectriques (y compris le segment LED du point d√©cimal, appel√© segment dp).

Alors, le 74HC595 peut-il √™tre utilis√© pour contr√¥ler l'afficheur 7 segments ? La r√©ponse est oui.

Dans cette le√ßon, nous allons utiliser le 74HC595 pour contr√¥ler l'afficheur 7 segments et afficher diff√©rents chiffres.

.. raw:: html

    <video muted controls style = "max-width:90%">
        <source src="_static/video/25_show_number.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

Dans cette le√ßon, vous apprendrez √† :

* Comprendre comment utiliser le registre √† d√©calage 74HC595 pour piloter un afficheur 7 segments.
* Apprendre les repr√©sentations binaires des chiffres de 0 √† 9 et comment les convertir en formats d√©cimal et hexad√©cimal.
* Comprendre comment utiliser le Moniteur S√©rie pour saisir des donn√©es et les afficher sur l'afficheur 7 segments.


Construction du circuit
--------------------------

**Composants n√©cessaires**

.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * Afficheur 7 segments
     - 1 * R√©sistance de 220Œ©
     - 1 * 74HC595
   * - |list_uno_r3| 
     - |list_7segment| 
     - |list_220ohm| 
     - |list_74hc595| 
   * - 1 * Plaque d'exp√©rimentation
     - C√¢bles de raccordement
     - 1 * C√¢ble USB
     - 
   * - |list_breadboard| 
     - |list_wire| 
     - |list_usb_cable| 
     - 

**√âtapes de montage**

Suivez le sch√©ma de c√¢blage ou les √©tapes ci-dessous pour monter votre circuit.

.. image:: img/25_show_number.png
    :width: 500
    :align: center

1. Ins√©rez l'afficheur 7 segments dans la plaque d'exp√©rimentation avec le point d√©cimal situ√© dans le coin inf√©rieur droit.

.. image:: img/25_show_number_7segment.png
    :width: 500
    :align: center

2. Connectez la borne n√©gative (-) de l'afficheur 7 segments au rail de masse de la plaque d'exp√©rimentation √† l'aide d'un c√¢ble de raccordement.

.. image:: img/25_show_number_resistor.png
    :width: 500
    :align: center

3. Localisez la puce 74HC595 et ins√©rez-la dans la plaque d'exp√©rimentation. Assurez-vous que la puce traverse le milieu de la plaque.

.. image:: img/25_show_number_74hc595.png
    :width: 500
    :align: center

4. Connectez les broches VCC et MR du 74HC595 au rail positif de la plaque d'exp√©rimentation.

.. image:: img/25_show_number_vcc.png
    :width: 500
    :align: center

5. Connectez les broches CE et GND du 74HC595 au rail n√©gatif de la plaque d'exp√©rimentation.

.. image:: img/25_show_number_gnd.png
    :width: 500
    :align: center

6. Connectez la broche Q0 du 74HC595 √† la broche 'a' de l'afficheur 7 segments, Q1 √† la broche 'b', Q2 √† la broche 'c', Q3 √† la broche 'd', et Q4 √† la broche 'e'.

.. image:: img/25_show_number_q0_q4.png
    :width: 500
    :align: center

7. Connectez la broche Q5 du 74HC595 √† la broche 'f' de l'afficheur 7 segments, Q6 √† la broche 'g', et Q7 √† la broche 'dp'.

.. image:: img/25_show_number_q5_q7.png
    :width: 500
    :align: center

8. Connectez la broche DS du 74HC595 √† la broche 11 de l'Arduino Uno R3.

.. image:: img/25_show_number_pin11.png
    :width: 500
    :align: center

9. Connectez la broche ST_CP du 74HC595 √† la broche 12 de l'Arduino Uno R3.

.. image:: img/25_show_number_pin12.png
    :width: 500
    :align: center

10. Connectez la broche SH_CP du 74HC595 √† la broche 8 de l'Arduino Uno R3.

.. image:: img/25_show_number_pin8.png
    :width: 500
    :align: center

11. Enfin, connectez les broches GND et 5V de l'Arduino Uno R3 aux rails n√©gatif et positif de la plaque d'exp√©rimentation, respectivement.

.. image:: img/25_show_number.png
    :width: 500
    :align: center

12. Le tableau suivant montre les connexions des broches entre le 74HC595, l'Arduino Uno R3 et l'afficheur 7 segments.

.. list-table::
    :widths: 20 20
    :header-rows: 1

    *   - 74HC595
        - Arduino UNO R3
    *   - VCC
        - 5V
    *   - DS
        - 11
    *   - CE
        - GND
    *   - ST_CP
        - 12
    *   - SH_CP
        - 8
    *   - MR
        - 5V
    *   - GND
        - GND

.. list-table::
    :widths: 20 20
    :header-rows: 1

    *   - 74HC595
        - 7-segment Display
    *   - Q0
        - a
    *   - Q1
        - b
    *   - Q2
        - c
    *   - Q3
        - d
    *   - Q4
        - e
    *   - Q5
        - f
    *   - Q6
        - g
    *   - Q7
        - dp

Nombres binaires pour les chiffres de 0 √† 9
----------------------------------------------

Dans ce projet, nous utilisons le registre √† d√©calage 74HC595 pour piloter l'afficheur 7 segments et afficher diff√©rents chiffres. Cependant, le 74HC595 re√ßoit des nombres binaires. Avant de programmer, nous devons conna√Ætre les nombres binaires correspondants aux chiffres de 0 √† 9.

Supposons que nous souhaitions afficher le chiffre 2 sur l'afficheur 7 segments, nous devons √©teindre les segments f et c, et allumer les autres segments.

.. image:: img/23_segment_2.png
    :align: center
    :width: 200

Selon le sch√©ma de c√¢blage, les broches de sortie Q0 √† Q7 du 74HC595 correspondent aux broches respectives de l'afficheur 7 segments, comme indiqu√© dans le diagramme. En binaire, 0 repr√©sente √©teint (ferm√©) et 1 repr√©sente allum√© (ouvert). Pour afficher le chiffre 2, dp, f et c doivent √™tre 0, tandis que les autres segments doivent √™tre 1, ce qui donne le nombre binaire ``B01011011``.

.. image:: img/25_display_2_binary.png
    :align: center
    :width: 600

.. note::

    Lorsque vous avez un seul afficheur 7 segments, la broche DP est toujours r√©gl√©e √† 0. Si vous avez plusieurs afficheurs 7 segments en configuration en cha√Æne, vous pouvez utiliser la broche DP pour indiquer le point d√©cimal.

Pour afficher le chiffre 0, dp et g doivent √™tre 0, et tous les autres segments doivent √™tre 1, ce qui donne le nombre binaire ``B00111111``.

**Question**

Maintenant que nous connaissons les repr√©sentations binaires des chiffres 0 et 2, veuillez remplir les nombres binaires des autres chiffres dans le tableau ci-dessous.

.. list-table::
    :widths: 20 20
    :header-rows: 1

    *   - Chiffre
        - Binaire
    *   - 0
        - B00111111
    *   - 1
        -
    *   - 2
        - B01011011
    *   - 3
        -
    *   - 4
        -
    *   - 5
        -
    *   - 6
        -
    *   - 7
        -
    *   - 8
        -
    *   - 9
        -         

Cr√©ation du code - Affichage des chiffres
---------------------------------------------
1. Ouvrez le sketch que vous avez enregistr√© pr√©c√©demment, ``Lesson24_Flowing_Light``. 

2. Cliquez sur ‚ÄúEnregistrer sous...‚Äù dans le menu ‚ÄúFichier‚Äù et renommez-le en ``Lesson25_Show_Number_Binary``. Cliquez sur "Enregistrer".


3. Modifiez le tableau ``datArray[]`` pour afficher les nombres binaires correspondant aux chiffres de 0 √† 9.

.. code-block:: Arduino
    :emphasize-lines: 5

    const int STcp = 12;  //Broche connect√©e √† ST_CP du 74HC595
    const int SHcp = 8;   //Broche connect√©e √† SH_CP du 74HC595
    const int DS = 11;    //Broche connect√©e √† DS du 74HC595
    //afficher 0,1,2,3,4,5,6,7,8,9
    int datArray[] = { B00111111, B00000110, B01011011, B01001111, B01100110, B01101101, B01111101, B00000111, B01111111, B01101111 };

4. Comme le tableau ``datArray[]`` contient 10 √©l√©ments, modifiez la plage de la variable ``num`` √† ``num <= 9``.

.. code-block:: Arduino
    :emphasize-lines: 2

    void loop() {
        for (int num = 0; num <= 9; num++) {
            digitalWrite(STcp, LOW);                      // Met ST_CP √† la masse et maintient bas pendant la transmission
            shiftOut(DS, SHcp, MSBFIRST, datArray[num]);  // Envoie les donn√©es, MSB en premier
            digitalWrite(STcp, HIGH);                     // Met ST_CP √† HIGH pour sauvegarder les donn√©es
            delay(1000);                                  // Attend une seconde
        }
    }

5. Votre code complet devrait ressembler √† ce qui suit. √Ä ce stade, vous pouvez t√©l√©charger le code sur l'Arduino Uno R3, et vous verrez l'afficheur 7 segments d√©filer les chiffres de 0 √† 9.

.. code-block:: Arduino

    const int STcp = 12;  // Broche connect√©e √† ST_CP du 74HC595
    const int SHcp = 8;   // Broche connect√©e √† SH_CP du 74HC595
    const int DS = 11;    // Broche connect√©e √† DS du 74HC595
    // afficher 0,1,2,3,4,5,6,7,8,9
    int datArray[] = { B00111111, B00000110, B01011011, B01001111, B01100110, B01101101, B01111101, B00000111, B01111111, B01101111 };

    void setup() {
        // configure les broches en sortie
        pinMode(STcp, OUTPUT);
        pinMode(SHcp, OUTPUT);
        pinMode(DS, OUTPUT);
    }

    void loop() {
        for (int num = 0; num <= 9; num++) {
            digitalWrite(STcp, LOW);                      // Met ST_CP √† la masse et maintient bas pendant la transmission
            shiftOut(DS, SHcp, MSBFIRST, datArray[num]);  // Envoie les donn√©es, MSB en premier
            digitalWrite(STcp, HIGH);                     // Met ST_CP √† HIGH pour sauvegarder les donn√©es
            delay(1000);                                  // Attend une seconde
        }
    }

Conversion binaire
----------------------

Dans les applications pratiques, √©crire des nombres binaires peut exprimer plus clairement l'√©tat de chaque bit dans les donn√©es. Cependant, pour une repr√©sentation num√©rique g√©n√©rale, √©crire des nombres d√©cimaux est plus pratique.

.. note::

    L'√©criture de nombres binaires, d√©cimaux ou m√™me hexad√©cimaux n'affecte pas le r√©sultat du programme mais uniquement la lisibilit√© du code. Par exemple, √©crire le nombre d√©cimal ``91`` sera converti en interne en forme binaire ``B01011011``.

Voyons comment convertir des nombres binaires en d√©cimaux.

**Conversion en d√©cimal**

Dans le syst√®me binaire, chaque bit repr√©sente une valeur de position correspondante. La valeur de position est une puissance de 2, comme 2^0, 2^1, 2^2, etc. En multipliant chaque bit par sa valeur de position correspondante et en additionnant tous les r√©sultats, nous obtenons le nombre d√©cimal.

Par exemple, le nombre binaire ``B01011011`` se convertit en nombre d√©cimal 91.

.. image:: img/25_binary_dec.png
    :align: center
    :width: 600

**Utiliser une calculatrice**

Dans les applications pratiques, vous pouvez utiliser la calculatrice de votre ordinateur. Passez en mode programmeur et vous pourrez facilement convertir entre les syst√®mes binaire, d√©cimal et hexad√©cimal.

Recherchez "Calculatrice" sur votre ordinateur, puis passez en mode **Programmeur**.

.. image:: img/25_calculator_programmer.png
    :align: center

2. Si vous connaissez d√©j√† le nombre binaire et que vous souhaitez le convertir dans une autre base, s√©lectionnez **BIN**.

.. image:: img/25_calculator_binary.png
    :align: center

3. Maintenant, vous pouvez commencer √† entrer le nombre binaire.

* Les bits significatifs en binaire se r√©f√®rent √† la plage du bit le plus significatif (bit non nul le plus √† gauche) au bit le moins significatif (bit non nul le plus √† droite).
* Donc, pour le nombre binaire ``B00111111``, les bits significatifs sont ``111111``.
* Maintenant, entrez ``111111`` dans la calculatrice pour obtenir les nombres d√©cimaux et hexad√©cimaux correspondants.

.. image:: img/25_calculator_binary_0.png
    :align: center
    :width: 300

**Question**

Veuillez convertir les nombres binaires repr√©sentant les chiffres de 0 √† 9 en nombres d√©cimaux et hexad√©cimaux √† l'aide d'une calculatrice, et remplir le tableau ci-dessous. Cela vous donnera un guide de r√©f√©rence rapide pour les conversions de base.

.. list-table::
    :widths: 20 40 30 30
    :header-rows: 1

    *   - Chiffre
        - Binaire
        - D√©cimal
        - Hexad√©cimal
    *   - 0
        - B00111111
        - 63
        - 0x3F
    *   - 1
        - B00000110
        -
        -
    *   - 2
        - B01011011
        -
        -
    *   - 3
        - B01001111
        -
        -
    *   - 4
        - B01100110
        -
        -
    *   - 5
        - B01101101
        -
        -
    *   - 6
        - B01111101
        -
        -
    *   - 7
        - B00000111
        -
        -
    *   - 8
        - B01111111
        -
        -
    *   - 9
        - B01101111
        -
        -

**Modifier le Croquis**

Ouvrez maintenant votre croquis ``Lesson25_Show_Number_Binary`` dans l'IDE Arduino. Cliquez sur "Fichier" -> "Enregistrer sous...", nommez le fichier ``Lesson25_Show_Number_Decimal``. Cliquez sur "Enregistrer".

Modifiez tous les √©l√©ments du tableau ``datArray[]`` en valeurs d√©cimales, comme indiqu√© dans le code ci-dessous. Une fois modifi√©, vous pouvez t√©l√©verser le code sur l'Arduino Uno R3 pour voir l'effet.

.. code-block:: Arduino

    const int STcp = 12;  // Broche connect√©e √† ST_CP du 74HC595
    const int SHcp = 8;   // Broche connect√©e √† SH_CP du 74HC595
    const int DS = 11;    // Broche connect√©e √† DS du 74HC595
    // afficher 0,1,2,3,4,5,6,7,8,9
    int datArray[] = { 63, 6, 91, 79, 102, 109, 125, 7, 127, 111 };

    void setup() {
        // configurer les broches en sortie
        pinMode(STcp, OUTPUT);
        pinMode(SHcp, OUTPUT);
        pinMode(DS, OUTPUT);
    }

    void loop() {
        for (int num = 0; num <= 9; num++) {
            digitalWrite(STcp, LOW);                      // Met ST_CP √† LOW et maintient bas pendant la transmission
            shiftOut(DS, SHcp, MSBFIRST, datArray[num]);  // Transmet les donn√©es, MSB en premier
            digitalWrite(STcp, HIGH);                     // Met ST_CP √† HIGH pour sauvegarder les donn√©es
            delay(1000);                                  // Attendre une seconde
        }
    }


Cr√©ation du Code - Entr√©e S√©ries
-------------------------------------

Le Moniteur S√©rie est un outil puissant fourni par l'IDE Arduino pour communiquer avec la carte Arduino. Nous l'avons utilis√© pour surveiller les donn√©es envoy√©es par l'Arduino, comme la lecture des valeurs analogiques d'une photor√©sistance. Il peut √©galement √™tre utilis√© pour envoyer des donn√©es √† l'Arduino, lui permettant d'effectuer des actions bas√©es sur les donn√©es re√ßues.

Dans cette activit√©, nous allons √©crire un nombre entre 0 et 9 dans le Moniteur S√©rie pour l'afficher sur l'afficheur 7 segments.

1. Ouvrez votre croquis ``Lesson25_Show_Number_Decimal`` dans l'IDE Arduino. Cliquez sur "Fichier" -> "Enregistrer sous...", nommez le fichier ``Lesson25_Show_Number_Serial``. Cliquez sur "Enregistrer".

2. Dans ``void setup()``, d√©marrez le moniteur s√©rie et r√©glez son d√©bit √† 9600 bauds.

.. code-block:: Arduino
    :emphasize-lines: 6

    void setup() {
        // configurer les broches en sortie
        pinMode(STcp, OUTPUT);
        pinMode(SHcp, OUTPUT);
        pinMode(DS, OUTPUT);
        Serial.begin(9600);  // Configuration de la communication s√©rie √† 9600 bauds
    }

3. Lorsque vous utilisez le Moniteur S√©rie, vous pouvez lire les donn√©es saisies via le code Arduino. Voici deux fonctions √† comprendre :

* ``Serial.available()`` : Renvoie le nombre d'octets disponibles √† la lecture dans le port s√©rie.
* ``Serial.read()`` : Retourne le code ASCII du caract√®re re√ßu via l'entr√©e s√©rie.

Utilisez une instruction ``if`` dans ``void loop()`` pour v√©rifier si des donn√©es ont √©t√© re√ßues, puis affichez-les.

.. note::

    Commentez temporairement l'instruction for dans ``void loop()`` qui affiche des caract√®res sur l'afficheur 7 segments pour √©viter d'interf√©rer avec le processus d'impression.

.. code-block:: Arduino
    :emphasize-lines: 2-5

    void loop() {
        if (Serial.available() > 0) {
            // Imprimer le caract√®re re√ßu du port s√©rie
            Serial.println(Serial.read());
        }

        // for (int num = 0; num <= 9; num++) {
        //   digitalWrite(STcp, LOW);                      // Met ST_CP √† LOW et maintient bas pendant la transmission
        //   shiftOut(DS, SHcp, MSBFIRST, datArray[num]);  // Transmet les donn√©es, MSB en premier
        //   digitalWrite(STcp, HIGH);                     // Met ST_CP √† HIGH pour sauvegarder les donn√©es
        //   delay(1000);                                  // Attendre une seconde
        // }
    }

4. Voici votre code complet. Vous pouvez maintenant t√©l√©verser le code sur l'Arduino Uno R3.

.. code-block:: Arduino

    const int STcp = 12;  // Broche connect√©e √† ST_CP du 74HC595
    const int SHcp = 8;   // Broche connect√©e √† SH_CP du 74HC595
    const int DS = 11;    // Broche connect√©e √† DS du 74HC595
    // afficher 0,1,2,3,4,5,6,7,8,9
    int datArray[] = { 63, 6, 91, 79, 102, 109, 125, 7, 127, 111 };

    void setup() {
        // configurer les broches en sortie
        pinMode(STcp, OUTPUT);
        pinMode(SHcp, OUTPUT);
        pinMode(DS, OUTPUT);
        Serial.begin(9600);  // Configuration de la communication s√©rie √† 9600 bauds
    }

    void loop() {
        if (Serial.available() > 0) {
            // Imprimer le caract√®re re√ßu du port s√©rie
            Serial.println(Serial.read());
        }

        // for (int num = 0; num <= 9; num++) {
        //   digitalWrite(STcp, LOW);                      // Met ST_CP √† LOW et maintient bas pendant la transmission
        //   shiftOut(DS, SHcp, MSBFIRST, datArray[num]);  // Transmet les donn√©es, MSB en premier
        //   digitalWrite(STcp, HIGH);                     // Met ST_CP √† HIGH pour sauvegarder les donn√©es
        //   delay(1000);                                  // Attendre une seconde
        // }
    }

5. Apr√®s t√©l√©versement, ouvrez le Moniteur S√©rie. Dans la zone de saisie, entrez le chiffre ``0`` (ou un chiffre entre 0 et 9) et appuyez sur Entr√©e. Vous constaterez que la sortie S√©rie affiche le nombre ``48``.

.. note::

    * Si "Nouvelle ligne" est s√©lectionn√© dans les options de fin de ligne du moniteur s√©rie, vous pouvez √©galement voir un ``10``.
    * ``10`` est le code ASCII du caract√®re de nouvelle ligne (√©galement appel√© LF - Line Feed).

.. image:: img/25_serial_read.png
    :align: center
    :width: 600

Alors, o√π est pass√© notre entr√©e de ``0`` ? D'o√π vient ce ``48`` ? Est-il possible que ``0`` soit ``48`` ?

C'est parce que le ``0`` que nous avons saisi dans le Moniteur S√©rie est consid√©r√© comme un "caract√®re" et non comme un "nombre".

La transmission de caract√®res suit une norme de codage appel√©e ASCII (American Standard Code for Information Interchange).

Voici un tableau ASCII :

.. image:: img/25_ascii_table.png
    :align: center
    :width: 800

Lorsque vous tapez le caract√®re ``0`` dans le Moniteur S√©rie, le code ASCII du caract√®re ``0`` est envoy√© √† l'Arduino. En ASCII, le code du caract√®re ``0`` est ``48`` en d√©cimal.

6. Avant de continuer √† coder, vous devez commenter le code pr√©c√©dent qui imprime le code ASCII pour √©viter les conflits avec le code suivant.

.. code-block:: Arduino
    :emphasize-lines: 4

    void loop() {
        if (Serial.available() > 0) {
            // Imprimer le caract√®re re√ßu du port s√©rie
            // Serial.println(Serial.read());
        }

        // for (int num = 0; num <= 9; num++) {
        //   digitalWrite(STcp, LOW);                      // Mettre ST_CP √† LOW et maintenir bas pendant la transmission
        //   shiftOut(DS, SHcp, MSBFIRST, datArray[num]);  // Transmettre les donn√©es, MSB en premier
        //   digitalWrite(STcp, HIGH);                     // Mettre ST_CP √† HIGH pour sauvegarder les donn√©es
        //   delay(1000);                                  // Attendre une seconde
        // }
    }

7. Vous devez cr√©er une nouvelle variable ``char`` pour stocker le caract√®re lu √† partir du Moniteur S√©rie.

.. code-block:: Arduino
    :emphasize-lines: 6,7

    void loop() {
        if (Serial.available() > 0) {
            // Imprimer le caract√®re re√ßu du port s√©rie
            // Serial.println(Serial.read());

            // Lire le caract√®re re√ßu du port s√©rie
            char receivedChar = Serial.read();
        }
    }

8. Convertissez maintenant le caract√®re en nombre. En ASCII, la valeur pour le caract√®re ``'0'`` est ``48``, ``'1'`` est ``49``, et ainsi de suite. En soustrayant le code ASCII de ``'0'``, nous obtenons la valeur num√©rique correspondante.

.. code-block:: Arduino
    :emphasize-lines: 8,9

    void loop() {
        if (Serial.available() > 0) {
            // Imprimer le caract√®re re√ßu du port s√©rie
            Serial.println(Serial.read());

            // Lire le caract√®re re√ßu du port s√©rie
            char receivedChar = Serial.read();
            // Convertir le caract√®re en chiffre
            int digit = receivedChar - '0';
        }
    }

9. Dans cet exemple, nous supposons que l'entr√©e est un caract√®re num√©rique entre ``'0'`` et ``'9'``. Nous devons donc v√©rifier si le caract√®re est dans cette plage. Ensuite, utilisez l'afficheur 7 segments pour afficher le nombre correspondant :

* S√©lectionnez l'instruction ``for`` pr√©c√©demment comment√©e et appuyez sur ``Ctrl + /`` pour la d√©commenter.
* Modifiez ensuite l'instruction ``for`` en une instruction ``if`` pour v√©rifier si le caract√®re d'entr√©e est dans la plage ``'0'`` √† ``'9'``. Si c'est le cas, laissez l'afficheur 7 segments afficher le chiffre correspondant.

.. code-block:: Arduino
    :emphasize-lines: 9

    void loop() {
        if (Serial.available() > 0) {
            // Imprimer le caract√®re re√ßu du port s√©rie
            // Serial.println(Serial.read());

            // Lire le caract√®re re√ßu du port s√©rie
            char receivedChar = Serial.read();
            // Convertir le caract√®re en chiffre
            int digit = receivedChar - '0';

            if (digit >= 0 && digit <= 9) {
                digitalWrite(STcp, LOW);                        // Mettre ST_CP √† LOW et maintenir bas pendant la transmission
                shiftOut(DS, SHcp, MSBFIRST, datArray[digit]);  // Transmettre les donn√©es, MSB en premier
                digitalWrite(STcp, HIGH);                       // Mettre ST_CP √† HIGH pour sauvegarder les donn√©es
                delay(1000);                                    // Attendre une seconde
            }
        }
    }

10. Votre code complet doit √™tre le suivant. Vous pouvez maintenant t√©l√©verser le code sur l'Arduino Uno R3 et ouvrir le Moniteur S√©rie. Entrez un nombre entre 0 et 9 pour voir si l'afficheur 7 segments affiche le chiffre correspondant.

.. code-block:: Arduino

    const int STcp = 12;  // Broche connect√©e √† ST_CP du 74HC595
    const int SHcp = 8;   // Broche connect√©e √† SH_CP du 74HC595
    const int DS = 11;    // Broche connect√©e √† DS du 74HC595
    // Afficher 0,1,2,3,4,5,6,7,8,9
    int datArray[] = { 63, 6, 91, 79, 102, 109, 125, 7, 127, 111 };

    void setup() {
        // Configurer les broches en sortie
        pinMode(STcp, OUTPUT);
        pinMode(SHcp, OUTPUT);
        pinMode(DS, OUTPUT);
        Serial.begin(9600);  // Configurer la communication s√©rie √† 9600 bauds
    }   

    void loop() {
        if (Serial.available() > 0) {
            // Imprimer le caract√®re re√ßu du port s√©rie
            // Serial.println(Serial.read());

            // Lire le caract√®re re√ßu du port s√©rie
            char receivedChar = Serial.read();
            // Convertir le caract√®re en chiffre
            int digit = receivedChar - '0';

            if (digit >= 0 && digit <= 9) {
                digitalWrite(STcp, LOW);                        // Mettre ST_CP √† LOW et maintenir bas pendant la transmission
                shiftOut(DS, SHcp, MSBFIRST, datArray[digit]);  // Transmettre les donn√©es, MSB en premier
                digitalWrite(STcp, HIGH);                       // Mettre ST_CP √† HIGH pour sauvegarder les donn√©es
                delay(1000);                                    // Attendre une seconde
            }
        }
    }

11. Enfin, n'oubliez pas de sauvegarder votre code et de ranger votre espace de travail.

**R√©sum√©**

Dans cette le√ßon, vous avez appris √† utiliser le registre √† d√©calage 74HC595 pour piloter un afficheur 7 segments et r√©duire le nombre de broches n√©cessaires sur l'Arduino Uno R3. Vous avez √©galement explor√© les repr√©sentations binaires des chiffres √† afficher et compris comment convertir les nombres binaires en formats d√©cimal et hexad√©cimal, rendant le code plus lisible.

De plus, vous avez appris √† utiliser le Moniteur S√©rie pour l'entr√©e s√©rie et comment les caract√®res d'entr√©e sont convertis en codes ASCII. En comprenant cette conversion, vous avez pu mapper les caract√®res √† leurs √©quivalents num√©riques, permettant un affichage pr√©cis sur l'afficheur 7 segments.

Dans l'ensemble, cette le√ßon vous a offert une compr√©hension approfondie de l'utilisation des registres √† d√©calage, du contr√¥le des afficheurs 7 segments et de la gestion de la communication s√©rie pour des projets interactifs.


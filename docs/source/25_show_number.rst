.. note::

    ¬°Hola! Bienvenido a la comunidad de entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. Sum√©rgete en el fascinante mundo de Raspberry Pi, Arduino y ESP32 junto con otros aficionados.

    **¬øPor qu√© unirte?**

    - **Soporte experto**: Resuelve problemas postventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Preestrenos exclusivos**: Obt√©n acceso anticipado a nuevos anuncios de productos y avances exclusivos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones y sorteos festivos**: Participa en sorteos y promociones especiales durante las festividades.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo.

25. Mostrar N√∫meros con 74HC595
=====================================

En la lecci√≥n anterior, quiz√° hayas notado que el 74HC595 y la pantalla de 7 segmentos hacen una pareja perfecta. El 74HC595 puede emitir simult√°neamente se√±ales de 8 bits, mientras que la pantalla de 7 segmentos se controla mediante 8 se√±ales el√©ctricas (incluyendo el segmento del punto decimal, es decir, el segmento "dp").

Entonces, ¬øse puede usar el 74HC595 para controlar la pantalla de 7 segmentos? La respuesta es s√≠.

En esta lecci√≥n, utilizaremos el 74HC595 para controlar la pantalla de 7 segmentos y mostrar diferentes n√∫meros.

.. raw:: html

    <video muted controls style = "max-width:90%">
        <source src="_static/video/25_show_number.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

En esta lecci√≥n, podr√°s:

* Entender c√≥mo usar el registro de desplazamiento 74HC595 para controlar una pantalla de 7 segmentos.
* Aprender las representaciones binarias de los d√≠gitos del 0 al 9 y c√≥mo convertirlas a formatos decimales y hexadecimales.
* Comprender c√≥mo utilizar el Monitor Serial para introducir datos y mostrarlos en la pantalla de 7 segmentos.

Construcci√≥n del Circuito
--------------------------------

**Componentes Necesarios**

.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * Pantalla de 7 segmentos
     - 1 * Resistor de 220Œ©
     - 1 * 74HC595
   * - |list_uno_r3| 
     - |list_7segment| 
     - |list_220ohm| 
     - |list_74hc595| 
   * - 1 * Protoboard
     - Cables de conexi√≥n
     - 1 * Cable USB
     - 
   * - |list_breadboard| 
     - |list_wire| 
     - |list_usb_cable| 
     - 

**Construcci√≥n Paso a Paso**

Sigue el diagrama de conexi√≥n o los pasos a continuaci√≥n para armar tu circuito.

.. image:: img/25_show_number.png
    :width: 500
    :align: center

1. Inserta la pantalla de 7 segmentos en el protoboard, con el punto decimal en la esquina inferior derecha.

.. image:: img/25_show_number_7segment.png
    :width: 500
    :align: center

2. Conecta el terminal negativo (-) de la pantalla de 7 segmentos al riel de tierra del protoboard usando un cable de conexi√≥n.

.. image:: img/25_show_number_resistor.png
    :width: 500
    :align: center

3. Ubica el chip 74HC595 e ins√©rtalo en el protoboard, asegur√°ndote de que abarque la separaci√≥n central.

.. image:: img/25_show_number_74hc595.png
    :width: 500
    :align: center

4. Conecta los pines VCC y MR del 74HC595 al riel positivo del protoboard.

.. image:: img/25_show_number_vcc.png
    :width: 500
    :align: center

5. Conecta los pines CE y GND del 74HC595 al riel negativo del protoboard.

.. image:: img/25_show_number_gnd.png
    :width: 500
    :align: center

6. Conecta el pin Q0 del 74HC595 al pin "a" de la pantalla de 7 segmentos, Q1 al pin "b", Q2 al pin "c", Q3 al pin "d" y Q4 al pin "e".

.. image:: img/25_show_number_q0_q4.png
    :width: 500
    :align: center

7. Conecta el pin Q5 del 74HC595 al pin "f" de la pantalla de 7 segmentos, Q6 al pin "g" y Q7 al pin "dp".

.. image:: img/25_show_number_q5_q7.png
    :width: 500
    :align: center

8. Conecta el pin DS del 74HC595 al pin 11 del Arduino Uno R3.

.. image:: img/25_show_number_pin11.png
    :width: 500
    :align: center

9. Conecta el pin ST_CP del 74HC595 al pin 12 del Arduino Uno R3.

.. image:: img/25_show_number_pin12.png
    :width: 500
    :align: center

10. Conecta el pin SH_CP del 74HC595 al pin 8 del Arduino Uno R3.

.. image:: img/25_show_number_pin8.png
    :width: 500
    :align: center

11. Finalmente, conecta los pines GND y 5V del Arduino Uno R3 a los rieles negativo y positivo del protoboard, respectivamente.

.. image:: img/25_show_number.png
    :width: 500
    :align: center

12. Las siguientes tablas muestran las conexiones de pines entre el 74HC595, el Arduino Uno R3 y la pantalla de 7 segmentos.

.. list-table::
    :widths: 20 20
    :header-rows: 1

    *   - 74HC595
        - Arduino UNO R3
    *   - VCC
        - 5V
    *   - DS
        - 11
    *   - CE
        - GND
    *   - ST_CP
        - 12
    *   - SH_CP
        - 8
    *   - MR
        - 5V
    *   - GND
        - GND

.. list-table::
    :widths: 20 20
    :header-rows: 1

    *   - 74HC595
        - Pantalla de 7 segmentos
    *   - Q0
        - a
    *   - Q1
        - b 
    *   - Q2
        - c
    *   - Q3
        - d
    *   - Q4
        - e
    *   - Q5
        - f
    *   - Q6
        - g
    *   - Q7
        - dp

N√∫meros Binarios para los D√≠gitos 0 al 9
-----------------------------------------------

En este proyecto, usamos el registro de desplazamiento 74HC595 para controlar la pantalla de 7 segmentos y mostrar diferentes n√∫meros. Sin embargo, el 74HC595 recibe n√∫meros binarios, por lo que antes de programar, debemos conocer los n√∫meros binarios correspondientes a los d√≠gitos del 0 al 9.

Supongamos que queremos mostrar el d√≠gito 2 en la pantalla de 7 segmentos, necesitamos apagar los segmentos f y c y encender los segmentos restantes.

.. image:: img/23_segment_2.png
    :align: center
    :width: 200

De acuerdo con el diagrama de cableado, los pines de salida Q0 a Q7 del 74HC595 corresponden a los pines respectivos de la pantalla de 7 segmentos, como se muestra en el diagrama. En binario, 0 representa apagado (cerrado) y 1 representa encendido (abierto). Para mostrar el d√≠gito 2, dp, f y c deben ser 0, mientras que los otros segmentos deben ser 1, lo que resulta en el n√∫mero binario ``B01011011``.

.. image:: img/25_display_2_binary.png
    :align: center
    :width: 600

.. note::

    Cuando solo tienes una pantalla de 7 segmentos, el pin DP siempre se establece en 0. Cuando tienes m√∫ltiples pantallas de 7 segmentos en una configuraci√≥n en cadena, puedes usar el pin DP para indicar el punto decimal.

Para mostrar el d√≠gito 0, dp y g deben ser 0, y todos los dem√°s segmentos deben ser 1, dando como resultado el n√∫mero binario ``B00111111``.

**Pregunta**

Ahora que conocemos las representaciones binarias para los d√≠gitos 0 y 2, por favor completa los n√∫meros binarios para los d√≠gitos restantes en la siguiente tabla.

.. list-table::
    :widths: 20 20
    :header-rows: 1

    *   - N√∫mero
        - Binario
    *   - 0
        - B00111111
    *   - 1
        - 
    *   - 2
        - B01011011
    *   - 3
        - 
    *   - 4
        - 
    *   - 5
        - 
    *   - 6
        - 
    *   - 7
        - 
    *   - 8
        - 
    *   - 9
        - 


Creaci√≥n de C√≥digo - Mostrando N√∫meros
------------------------------------------------
1. Abre el sketch que guardaste anteriormente, ``Lesson24_Flowing_Light``.

2. Haz clic en ‚ÄúGuardar como...‚Äù en el men√∫ ‚ÄúArchivo‚Äù y ren√≥mbralo como ``Lesson25_Show_Number_Binary``. Haz clic en "Guardar".

3. Cambia el ``datArray[]`` para mostrar los n√∫meros binarios correspondientes a los d√≠gitos del 0 al 9.

.. code-block:: Arduino
    :emphasize-lines: 5

    const int STcp = 12;  // Pin conectado a ST_CP del 74HC595
    const int SHcp = 8;   // Pin conectado a SH_CP del 74HC595
    const int DS = 11;    // Pin conectado a DS del 74HC595
    //mostrar 0,1,2,3,4,5,6,7,8,9
    int datArray[] = { B00111111, B00000110, B01011011, B01001111, B01100110, B01101101, B01111101, B00000111, B01111111, B01101111 };

4. Dado que el array ``datArray[]`` contiene 10 elementos, modifica el rango de la variable ``num`` a ``num <= 9``.

.. code-block:: Arduino
    :emphasize-lines: 2

    void loop() {
        for (int num = 0; num <= 9; num++) {
            digitalWrite(STcp, LOW);                      // Conectar ST_CP a tierra y mantenerlo bajo mientras se transmite
            shiftOut(DS, SHcp, MSBFIRST, datArray[num]);  // Desplazar los datos, empezando por el bit m√°s significativo
            digitalWrite(STcp, HIGH);                     // Subir ST_CP para guardar los datos
            delay(1000);                                  // Esperar un segundo
        }
    }

5. Tu c√≥digo completo deber√≠a verse as√≠. En este punto, puedes cargar el c√≥digo al Arduino Uno R3 y ver√°s que la pantalla de 7 segmentos mostrar√° los n√∫meros del 0 al 9 en secuencia.

.. code-block:: Arduino

    const int STcp = 12;  // Pin conectado a ST_CP del 74HC595
    const int SHcp = 8;   // Pin conectado a SH_CP del 74HC595
    const int DS = 11;    // Pin conectado a DS del 74HC595
    //mostrar 0,1,2,3,4,5,6,7,8,9
    int datArray[] = { B00111111, B00000110, B01011011, B01001111, B01100110, B01101101, B01111101, B00000111, B01111111, B01101111 };

    void setup() {
        // configurar los pines como salida
        pinMode(STcp, OUTPUT);
        pinMode(SHcp, OUTPUT);
        pinMode(DS, OUTPUT);
    }

    void loop() {
        for (int num = 0; num <= 9; num++) {
            digitalWrite(STcp, LOW);                      // Conectar ST_CP a tierra y mantenerlo bajo mientras se transmite
            shiftOut(DS, SHcp, MSBFIRST, datArray[num]);  // Desplazar los datos, empezando por el bit m√°s significativo
            digitalWrite(STcp, HIGH);                     // Subir ST_CP para guardar los datos
            delay(1000);                                  // Esperar un segundo
        }
    }

Conversi√≥n Binaria
----------------------

En aplicaciones pr√°cticas, escribir n√∫meros binarios puede expresar m√°s claramente el estado de cada bit en los datos. Sin embargo, para la representaci√≥n num√©rica general, escribir n√∫meros decimales es m√°s conveniente.

.. note::

    Escribir n√∫meros en binario, decimal o incluso hexadecimal no afecta el resultado del programa, sino solo la legibilidad del c√≥digo. Por ejemplo, escribir el n√∫mero decimal ``91`` se convertir√° internamente en su forma binaria ``B01011011``.

Veamos c√≥mo convertir n√∫meros binarios a decimales.

**Conversi√≥n a Decimal**

En el sistema binario, cada bit representa un valor posicional correspondiente. El valor posicional es una potencia de 2, como 2^0, 2^1, 2^2‚Ä¶, etc. Al multiplicar cada bit por su valor posicional correspondiente y sumar todos los resultados, obtenemos el n√∫mero decimal.

Por ejemplo, el n√∫mero binario ``B01011011`` se convierte en el n√∫mero decimal 91.

.. image:: img/25_binary_dec.png
    :align: center
    :width: 600
 
**Uso de la Calculadora**

En aplicaciones pr√°cticas, puedes usar la calculadora de tu computadora. Cambia al modo de Programador, y podr√°s convertir f√°cilmente entre binario, decimal y hexadecimal.

Busca "Calculadora" en tu computadora y luego cambia a modo **Programador**.

.. image:: img/25_calculator_programmer.png
    :align: center

2. Si ya conoces el n√∫mero binario y deseas convertirlo a otra base, selecciona **BIN**.

.. image:: img/25_calculator_binary.png
    :align: center

3. Ahora, puedes comenzar a ingresar el n√∫mero binario.

* Los bits efectivos en binario se refieren al rango desde el bit m√°s significativo (el bit m√°s a la izquierda que no es cero) hasta el bit menos significativo (el bit m√°s a la derecha que no es cero).
* Entonces, para el n√∫mero binario ``B00111111``, los bits efectivos son ``111111``. 
* Ahora, ingresa ``111111`` en la calculadora para obtener los n√∫meros decimales y hexadecimales correspondientes.

.. image:: img/25_calculator_binary_0.png
    :align: center
    :width: 300

**Pregunta**

Convierte los n√∫meros binarios que representan los d√≠gitos del 0 al 9 en n√∫meros decimales y hexadecimales usando una calculadora, y completa la tabla. Esto te proporcionar√° una gu√≠a r√°pida para las conversiones de base.

.. list-table::
    :widths: 20 40 30 30
    :header-rows: 1

    *   - N√∫mero
        - Binario
        - Decimal
        - Hexadecimal
    *   - 0
        - B00111111
        - 63
        - 0x3F
    *   - 1
        - B00000110
        - 6
        - 0x06
    *   - 2
        - B01011011
        - 91
        - 0x5B
    *   - 3
        - B01001111
        - 79
        - 0x4F
    *   - 4
        - B01100110
        - 102
        - 0x66
    *   - 5
        - B01101101
        - 109
        - 0x6D
    *   - 6
        - B01111101
        - 125
        - 0x7D
    *   - 7
        - B00000111
        - 7
        - 0x07
    *   - 8
        - B01111111
        - 127
        - 0x7F
    *   - 9
        - B01101111
        - 111
        - 0x6F

**Modificar el Sketch**

Ahora, abre tu sketch ``Lesson25_Show_Number_Binary`` en el IDE de Arduino. Haz clic en "Archivo" -> "Guardar como...", nombra el archivo ``Lesson25_Show_Number_Decimal``. Haz clic en "Guardar".

Cambia todos los elementos de ``datArray[]`` a decimales, como se muestra en el c√≥digo. Una vez modificado, puedes cargar el c√≥digo en el Arduino Uno R3 para ver el efecto.

.. code-block:: Arduino

    const int STcp = 12;  // Pin conectado a ST_CP del 74HC595
    const int SHcp = 8;   // Pin conectado a SH_CP del 74HC595
    const int DS = 11;    // Pin conectado a DS del 74HC595
    //mostrar 0,1,2,3,4,5,6,7,8,9
    int datArray[] = { 63, 6, 91, 79, 102, 109, 125, 7, 127, 111 };

    void setup() {
        // Configurar pines como salida
        pinMode(STcp, OUTPUT);
        pinMode(SHcp, OUTPUT);
        pinMode(DS, OUTPUT);
    }

    void loop() {
        for (int num = 0; num <= 9; num++) {
            digitalWrite(STcp, LOW);                      // Conectar ST_CP a tierra y mantenerlo bajo mientras se transmite
            shiftOut(DS, SHcp, MSBFIRST, datArray[num]);  // Desplazar los datos, empezando por el bit m√°s significativo
            digitalWrite(STcp, HIGH);                     // Subir ST_CP para guardar los datos
            delay(1000);                                  // Esperar un segundo
        }
    }


Creaci√≥n de C√≥digo - Entrada Serial
-----------------------------------------

El Monitor Serial es una herramienta poderosa proporcionada por el IDE de Arduino para la comunicaci√≥n con la placa Arduino. Lo hemos utilizado para monitorear la salida de datos del Arduino, como leer valores anal√≥gicos de un fotorresistor. Tambi√©n puede usarse para enviar datos al Arduino, permiti√©ndole realizar acciones en funci√≥n de los datos recibidos.

En esta actividad, escribiremos un n√∫mero entre 0 y 9 en el Monitor Serial para mostrarlo en la pantalla de 7 segmentos.

1. Abre tu sketch ``Lesson25_Show_Number_Decimal`` en el IDE de Arduino. Haz clic en "Archivo" -> "Guardar como...", nombra el archivo ``Lesson25_Show_Number_Serial``. Haz clic en "Guardar".

2. En ``void setup()``, inicia el monitor serial y configura su velocidad en baudios a 9600.

.. code-block:: Arduino
    :emphasize-lines: 6

    void setup() {
        // Configurar pines como salida
        pinMode(STcp, OUTPUT);
        pinMode(SHcp, OUTPUT);
        pinMode(DS, OUTPUT);
        Serial.begin(9600);  // Configuraci√≥n de la comunicaci√≥n serial a 9600 baudios
    }

3. Cuando uses el Monitor Serial, puedes leer los datos ingresados a trav√©s del c√≥digo de Arduino. Aqu√≠, necesitas entender dos funciones:

* ``Serial.available()``: Obtiene el n√∫mero de bytes (caracteres) disponibles para leer desde el puerto serie. Estos son los datos que ya han llegado y est√°n almacenados en el b√∫fer de recepci√≥n serie (que tiene una capacidad de 64 bytes).
* ``Serial.read()``: Devuelve el c√≥digo ASCII del car√°cter recibido a trav√©s de la entrada serie.

Ahora, usa una declaraci√≥n ``if`` en ``void loop()`` para verificar si se han le√≠do datos del puerto y luego impr√≠melos.

.. note::

    Temporalmente, comenta la declaraci√≥n for en ``void loop()`` que muestra caracteres en la pantalla de 7 segmentos para evitar que afecte el proceso de impresi√≥n.

.. code-block:: Arduino
    :emphasize-lines: 2-5

    void loop() {
        if (Serial.available() > 0) {
            // Imprimir el car√°cter recibido desde el puerto serie
            Serial.println(Serial.read());
        }

        // for (int num = 0; num <= 9; num++) {
        //   digitalWrite(STcp, LOW);                      // Conectar ST_CP a tierra y mantenerlo bajo mientras se transmite
        //   shiftOut(DS, SHcp, MSBFIRST, datArray[num]);  // Desplazar los datos, empezando por el bit m√°s significativo
        //   digitalWrite(STcp, HIGH);                     // Subir ST_CP para guardar los datos
        //   delay(1000);                                  // Esperar un segundo
        // }
    }

4. A continuaci√≥n, se muestra tu c√≥digo completo. En este punto, puedes cargar el c√≥digo en el Arduino Uno R3.

.. code-block:: Arduino

    const int STcp = 12;  // Pin conectado a ST_CP del 74HC595
    const int SHcp = 8;   // Pin conectado a SH_CP del 74HC595
    const int DS = 11;    // Pin conectado a DS del 74HC595
    // mostrar 0,1,2,3,4,5,6,7,8,9
    int datArray[] = { 63, 6, 91, 79, 102, 109, 125, 7, 127, 111 };

    void setup() {
        // configurar pines como salida
        pinMode(STcp, OUTPUT);
        pinMode(SHcp, OUTPUT);
        pinMode(DS, OUTPUT);
        Serial.begin(9600);  // Configuraci√≥n de comunicaci√≥n serial a 9600 baudios
    }

    void loop() {
        if (Serial.available() > 0) {
            // Imprimir el car√°cter recibido desde el puerto serie
            Serial.println(Serial.read());
        }

        // for (int num = 0; num <= 9; num++) {
        //   digitalWrite(STcp, LOW);                      // Conectar ST_CP a tierra y mantener bajo mientras se transmite
        //   shiftOut(DS, SHcp, MSBFIRST, datArray[num]);  // Desplazar los datos, comenzando por el bit m√°s significativo
        //   digitalWrite(STcp, HIGH);                     // Subir ST_CP para guardar los datos
        //   delay(1000);                                  // Esperar un segundo
        // }
    }

5. Despu√©s de cargar el c√≥digo, abre el Monitor Serial. En el cuadro de entrada, escribe el n√∫mero ``0`` (o cualquier d√≠gito entre 0-9) y presiona Enter. En ese momento, ver√°s que el Serial imprime un n√∫mero ``48``.

.. note::

    * Si est√° seleccionada la opci√≥n "Nueva l√≠nea" en el final de l√≠nea del Monitor Serial, tambi√©n ver√°s un ``10``.
    * ``10`` es el c√≥digo ASCII para un car√°cter de nueva l√≠nea (tambi√©n llamado LF - Line Feed).

.. image:: img/25_serial_read.png
    :align: center
    :width: 600

Entonces, ¬øa d√≥nde fue nuestro input de ``0``? ¬øDe d√≥nde sali√≥ ese ``48``? ¬øEs posible que ``0`` sea ``48``?

Esto se debe a que el ``0`` que ingresamos en el Monitor Serial se considera un "car√°cter", no un "n√∫mero".

La transferencia de caracteres sigue un est√°ndar de codificaci√≥n conocido como ASCII (C√≥digo Est√°ndar Americano para el Intercambio de Informaci√≥n).

ASCII incluye caracteres comunes como letras may√∫sculas (A-Z), letras min√∫sculas (a-z), d√≠gitos (0-9) y signos de puntuaci√≥n (como puntos, comas, signos de exclamaci√≥n, etc.). Tambi√©n define algunos caracteres de control utilizados para controlar dispositivos y protocolos de comunicaci√≥n. Estos caracteres de control generalmente no se muestran en la pantalla, pero se utilizan para controlar el comportamiento de dispositivos como impresoras, terminales, etc., tales como salto de l√≠nea, retroceso, retorno de carro, etc.

Aqu√≠ tienes una tabla ASCII:

.. image:: img/25_ascii_table.png
    :align: center
    :width: 800

Cuando escribes el car√°cter ``0`` en el Monitor Serial, el c√≥digo ASCII para el car√°cter ``0`` se env√≠a al Arduino.
En ASCII, el c√≥digo para el car√°cter ``0`` es ``48`` en decimal.

6. Antes de continuar programando, debes comentar el c√≥digo anterior que imprime el c√≥digo ASCII para evitar conflictos con el siguiente c√≥digo.

.. code-block:: Arduino
    :emphasize-lines: 4

    void loop() {
        if (Serial.available() > 0) {
            // Imprimir el car√°cter recibido desde el puerto serie
            // Serial.println(Serial.read());
        }

        // for (int num = 0; num <= 9; num++) {
        //   digitalWrite(STcp, LOW);                      // Conectar ST_CP a tierra y mantener bajo mientras se transmite
        //   shiftOut(DS, SHcp, MSBFIRST, datArray[num]);  // Desplazar los datos, comenzando por el bit m√°s significativo
        //   digitalWrite(STcp, HIGH);                     // Subir ST_CP para guardar los datos
        //   delay(1000);                                  // Esperar un segundo
        // }
    }

7. Necesitas crear una nueva variable ``char`` para almacenar el car√°cter le√≠do desde el Monitor Serial.

.. code-block:: Arduino
    :emphasize-lines: 6,7

    void loop() {
        if (Serial.available() > 0) {
            // Imprimir el car√°cter recibido desde el puerto serie
            // Serial.println(Serial.read());

            // Leer el car√°cter recibido desde el puerto serie
            char receivedChar = Serial.read();
        }
    }

8. Ahora, convierte el car√°cter a un n√∫mero. En ASCII, el valor para el car√°cter ``'0'`` es ``48``, ``'1'`` es ``49``, y as√≠ sucesivamente. Por lo tanto, restando el c√≥digo ASCII de ``'0'``, podemos obtener el valor num√©rico correspondiente.

.. code-block:: Arduino
    :emphasize-lines: 8,9

    void loop() {
        if (Serial.available() > 0) {
            // Imprimir el car√°cter recibido desde el puerto serie
            Serial.println(Serial.read());

            // Leer el car√°cter recibido desde el puerto serie
            char receivedChar = Serial.read();
            // Convertir el car√°cter a un d√≠gito
            int digit = receivedChar - '0';
        }
    }

9. En este ejemplo, asumimos que la entrada son caracteres num√©ricos de ``'0'`` a ``'9'``. Por lo tanto, solo nos importa si el car√°cter de entrada est√° dentro de este rango. Necesitas verificar si el n√∫mero est√° dentro del rango v√°lido:

* Selecciona la sentencia ``for`` previamente comentada y presiona ``Ctrl + /`` para descomentarlo.
* Luego, modifica la sentencia ``for`` a una sentencia ``if`` para verificar si el car√°cter de entrada est√° dentro del rango de ``'0'`` a ``'9'``. Si lo est√°, haz que la pantalla de 7 segmentos muestre el n√∫mero correspondiente.

.. code-block:: Arduino
    :emphasize-lines: 9

    void loop() {
        if (Serial.available() > 0) {
            // Imprimir el car√°cter recibido desde el puerto serie
            // Serial.println(Serial.read());

            // Leer el car√°cter recibido desde el puerto serie
            char receivedChar = Serial.read();
            // Convertir el car√°cter a un d√≠gito
            int digit = receivedChar - '0';

            if (digit >= 0 && digit <= 9) {
                digitalWrite(STcp, LOW);                        // Conectar ST_CP a tierra y mantener bajo mientras se transmite
                shiftOut(DS, SHcp, MSBFIRST, datArray[digit]);  // Enviar los datos, comenzando por el bit m√°s significativo
                digitalWrite(STcp, HIGH);                       // Subir ST_CP para guardar los datos
                delay(1000);                                    // Esperar un segundo
            }
        }
    }

10. Tu c√≥digo completo deber√≠a verse de la siguiente manera. Ahora puedes cargar el c√≥digo en el Arduino Uno R3 y abrir el Monitor Serial. Ingresa cualquier n√∫mero entre 0 y 9 para ver si la pantalla de 7 segmentos muestra el n√∫mero correspondiente.

.. code-block:: Arduino

    const int STcp = 12;  // Pin conectado a ST_CP del 74HC595
    const int SHcp = 8;   // Pin conectado a SH_CP del 74HC595
    const int DS = 11;    // Pin conectado a DS del 74HC595
    // mostrar 0,1,2,3,4,5,6,7,8,9
    int datArray[] = { 63, 6, 91, 79, 102, 109, 125, 7, 127, 111 };

    void setup() {
        // Configurar pines como salida
        pinMode(STcp, OUTPUT);
        pinMode(SHcp, OUTPUT);
        pinMode(DS, OUTPUT);
        Serial.begin(9600);  // Configuraci√≥n de comunicaci√≥n serial a 9600 baudios
    }   

    void loop() {
        if (Serial.available() > 0) {
            // Imprimir el car√°cter recibido desde el puerto serie
            // Serial.println(Serial.read());

            // Leer el car√°cter recibido desde el puerto serie
            char receivedChar = Serial.read();
            // Convertir el car√°cter a un d√≠gito
            int digit = receivedChar - '0';

            if (digit >= 0 && digit <= 9) {
                digitalWrite(STcp, LOW);                        // Conectar ST_CP a tierra y mantener bajo mientras se transmite
                shiftOut(DS, SHcp, MSBFIRST, datArray[digit]);  // Enviar los datos, comenzando por el bit m√°s significativo
                digitalWrite(STcp, HIGH);                       // Subir ST_CP para guardar los datos
                delay(1000);                                    // Esperar un segundo
            }
        }
    }

11. Finalmente, recuerda guardar tu c√≥digo y organizar tu espacio de trabajo.

**Resumen**

En esta lecci√≥n, aprendiste c√≥mo usar el registro de desplazamiento 74HC595 para controlar una pantalla de 7 segmentos y reducir la cantidad de pines necesarios en el Arduino Uno R3. Tambi√©n exploraste las representaciones binarias para los d√≠gitos a mostrar y comprendiste c√≥mo convertir n√∫meros binarios a formatos decimales y hexadecimales, haciendo el c√≥digo m√°s legible.

Adem√°s, aprendiste a usar el Monitor Serial para la entrada de datos seriales y c√≥mo los caracteres ingresados se convierten internamente en c√≥digos ASCII. Al comprender esta conversi√≥n, pudiste mapear caracteres a sus equivalentes num√©ricos, permitiendo una visualizaci√≥n precisa en la pantalla de 7 segmentos.

En resumen, esta lecci√≥n proporcion√≥ un entendimiento integral de c√≥mo utilizar registros de desplazamiento, controlar pantallas de 7 segmentos y manejar la comunicaci√≥n serial para proyectos interactivos.

.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder sur Facebook ! Plongez plus profond√©ment dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez & Partagez** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux nouvelles annonces de produits et √† des aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : B√©n√©ficiez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions et concours festifs** : Participez √† des concours et √† des promotions sp√©ciales pendant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

20. Le Timer Pomodoro
===========================================

Dans cette le√ßon, nous allons explorer l'intersection entre la gestion du temps et la technologie en cr√©ant un Timer Pomodoro √† l'aide d'un Arduino et d'un buzzer actif. Vous apprendrez √† utiliser les capacit√©s internes de temporisation de l'Arduino pour construire un minuteur qui segmente le travail en p√©riodes concentr√©es de 25 minutes suivies de pauses de 5 minutes. Cette m√©thode, connue sous le nom de Technique Pomodoro, am√©liore la productivit√© et la concentration. Tout au long du cours, vous acquerrez une solide base en temporisation √©lectronique et une exp√©rience pratique en programmation et assemblage de circuits, culminant dans la cr√©ation d'un Timer Pomodoro fonctionnel. Rejoignez-nous pour ma√Ætriser votre temps et augmenter votre efficacit√© dans vos activit√©s quotidiennes !

.. image:: img/19_tomato_timer.jpg
  :width: 500
  :align: center

.. raw:: html

     <video controls style = "max-width:90%">
        <source src="_static/video/20_beep_timer.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

√Ä la fin de cette le√ßon, vous serez capable de :

* Comprendre l'importance historique du son dans la gestion du temps.
* Identifier les composants n√©cessaires pour construire un circuit de minuterie √©lectronique.
* Programmer un Arduino pour contr√¥ler un buzzer pour la gestion du temps en utilisant les fonctions ``delay()`` et ``millis()``.
* Appliquer la Technique Pomodoro dans un contexte pratique en cr√©ant un minuteur qui alterne entre p√©riodes de travail et de pause.

Horloges et Son
--------------------

Dans l'Antiquit√©, de grandes cloches √©taient utilis√©es pour marquer le passage du temps et certains √©v√©nements sociaux sp√©cifiques.
Par exemple, les villes europ√©ennes m√©di√©vales utilisaient les cloches des √©glises pour signaler les heures de pri√®re et le d√©but et la fin des journ√©es de travail.
Ces cloches √©taient bien plus que de simples indicateurs temporels ; elles servaient d'outils d'organisation sociale, autour desquels la vie quotidienne de la communaut√© s'articulait.

**Horloges m√©caniques et son**

.. image:: img/7_big_ben.png
  :width: 500
  :align: center

Avec le d√©veloppement des horloges m√©caniques, et en particulier avec la conception du Big Ben, les horloges ont commenc√© √† √™tre √©quip√©es de cloches plus complexes et de m√©canismes de temporisation plus √©labor√©s.
Le son du Big Ben est produit par ses grandes cloches en bronze, ce qui amplifie la port√©e du son et la pr√©cision des annonces temporelles.
Dans de nombreuses villes, le son du Big Ben est devenu une r√©f√©rence pour les habitants, leur permettant d'ajuster leurs activit√©s quotidiennes et jouant un r√¥le crucial dans la planification plus pr√©cise du temps pour la navigation, les horaires de chemin de fer, et plus encore.

**La gestion du temps sonore √† l'√®re √©lectronique**

.. image:: img/19_timer.jpg
  :width: 500
  :align: center

Avec l'entr√©e dans l'√®re √©lectronique, les minuteurs sonores ont √©volu√©. L'introduction 
des buzzers √©lectroniques, avec l'aide de microcontr√¥leurs comme l'Arduino, a permis de 
rendre la gestion du temps ind√©pendante des grands dispositifs m√©caniques. Ces petits 
appareils peuvent produire des sons √† diff√©rentes fr√©quences et hauteurs, ce qui permet 
leur utilisation dans diverses applications de temporisation, allant des minuteurs de 
cuisine simples aux syst√®mes complexes de contr√¥le de processus industriels. Parmi les 
exemples, on trouve les syst√®mes d'appel infirmier dans les h√¥pitaux modernes, les sonneries 
des √©coles et les rappels dans les dispositifs √©lectroniques personnels, tous utilisant des 
buzzers √©lectroniques pour la gestion du temps.

Construction du circuit
---------------------------

**Composants n√©cessaires**


.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * Plaque d'essai
     - 1 * Buzzer actif
     - Fils de connexion
   * - |list_uno_r3| 
     - |list_breadboard| 
     - |list_active_buzzer| 
     - |list_wire| 
   * - 1 * C√¢ble USB
     - 
     - 
     - 
   * - |list_usb_cable| 
     - 
     - 
     - 



**√âtapes de construction**

Cette le√ßon utilise le m√™me circuit que celui de la le√ßon 17.

.. image:: img/16_morse_code.png
    :width: 500
    :align: center


Cr√©ation du code - Tic Tic
------------------------------

En Arduino, ``delay()`` est la fonction de temporisation la plus simple et la plus utilis√©e.
Nous l'utilisons souvent pour suspendre le programme pendant un court laps de temps, ce qui, combin√© avec des boucles, peut cr√©er un effet de clignotement de LED. Ici, nous utilisons la fonction ``delay()`` pour faire sonner le buzzer toutes les secondes.

1. Ouvrez l'IDE Arduino et d√©marrez un nouveau projet en s√©lectionnant "New Sketch" dans le menu "Fichier".
2. Enregistrez votre sketch sous le nom ``Lesson20_Timer_Tick_Tick`` en utilisant ``Ctrl + S`` ou en cliquant sur "Enregistrer".

3. √âcrivez le code suivant :

.. code-block:: Arduino

  const int buzzerPin = 9;   // Assigne la broche 9 √† la constante pour le buzzer  
  
  void setup() {
    // Mettre ici le code de configuration, ex√©cut√© une seule fois :
    pinMode(buzzerPin, OUTPUT);  // D√©finir la broche 9 comme sortie
  } 

  void loop() {
    // Mettre ici le code principal, ex√©cut√© en boucle :
    digitalWrite(buzzerPin, HIGH);  // Allumer le buzzer
    delay(100);                     // Dur√©e du bip : 100 millisecondes
    digitalWrite(buzzerPin, LOW);   // √âteindre le buzzer
    delay(1000);                    // Intervalle entre les signaux : 1000 millisecondes
  }

Dans cette configuration, la premi√®re fonction ``delay()`` suspend l'Arduino Uno R3 pendant 100 millisecondes, pendant lesquelles le buzzer continue de sonner. La seconde fonction ``delay()`` suspend l'Arduino pendant 1000 millisecondes (1 seconde), pendant lesquelles le buzzer est silencieux.

4. Apr√®s avoir t√©l√©vers√© le code sur l'Arduino Uno R3, vous entendrez le buzzer √©mettre un bip toutes les secondes.

Cr√©ation du code - ``millis()``
----------------------------------

L'utilisation de ``delay()`` suspend votre code, ce qui peut √™tre peu pratique.

Par exemple, imaginez que vous chauffez une pizza au micro-ondes tout en attendant des emails importants.
Vous mettez la pizza dans le micro-ondes et r√©glez le minuteur √† 10 minutes. L'analogie avec l'utilisation de ``delay()`` serait de rester devant le micro-ondes, regardant le d√©compte des 10 minutes jusqu'√† z√©ro. Si vous recevez un email important pendant ce temps, vous le manquerez.

Ce que vous feriez normalement, c'est mettre la pizza dans le micro-ondes, puis v√©rifier vos emails, voire faire autre chose, en revenant p√©riodiquement voir si le minuteur a atteint z√©ro, indiquant que la pizza est pr√™te.

Arduino dispose √©galement d'un outil de temporisation qui ne suspend pas le programme : la fonction ``millis()``.

``millis()`` est une fonction tr√®s importante en programmation Arduino. Elle renvoie le nombre de millisecondes √©coul√©es depuis que la carte Arduino a √©t√© mise sous tension ou r√©initialis√©e.

  * ``time = millis()`` : Renvoie le nombre de millisecondes √©coul√©es depuis que la carte Arduino ex√©cute le programme actuel. Ce nombre se r√©initialise (retourne √† z√©ro) apr√®s environ 50 jours.

  **Param√®tres**
    Aucun

  **Renvoie**
    Nombre de millisecondes √©coul√©es depuis le d√©marrage du programme. Type de donn√©es : unsigned long.

Ici, nous faisons de m√™me pour faire sonner le buzzer une fois par seconde.

1. Ouvrez l'IDE Arduino et d√©marrez un nouveau projet en s√©lectionnant "New Sketch" dans le menu "Fichier".
2. Enregistrez votre sketch sous le nom ``Lesson20_Timer_Millis`` en utilisant ``Ctrl + S`` ou en cliquant sur "Enregistrer".

3. Tout d'abord, cr√©ez une constante appel√©e ``buzzerPin`` et attribuez-lui la broche 9.

.. code-block:: Arduino
  :emphasize-lines: 1

  const int buzzerPin = 9;   // Assigne la broche 9 √† la constante pour le buzzer

  void setup() {
    // Mettez ici votre code de configuration, qui s'ex√©cute une seule fois :
  }

4. Cr√©ez deux variables de type long : ``previousMillis`` stockera le temps du dernier bip du buzzer, et ``interval`` d√©finit la fr√©quence des bips du buzzer, en millisecondes. Ici, il est r√©gl√© pour sonner toutes les 1000 millisecondes (ou chaque seconde).

.. code-block:: Arduino
  :emphasize-lines: 3,4

  const int buzzerPin = 9;  // Assigne la broche 9 √† la constante pour le buzzer

  unsigned long previousMillis = 0;  // Stocke l'horodatage du dernier bip du buzzer
  long interval = 1000;              // Intervalle de bip (en millisecondes)

5. Dans la fonction ``void setup()``, configurez la broche du buzzer en mode sortie.

.. code-block:: Arduino
  :emphasize-lines: 8

  const int buzzerPin = 9;  // Assigne la broche 9 √† la constante pour le buzzer

  unsigned long previousMillis = 0;  // Stocke l'horodatage du dernier bip du buzzer
  long interval = 1000;              // Intervalle de bip (en millisecondes)

  void setup() {
    // Mettez ici votre code de configuration, qui s'ex√©cute une seule fois :
    pinMode(buzzerPin, OUTPUT);  // D√©finir la broche 9 comme sortie
  }

6. Dans la fonction ``void loop()``, cr√©ez une variable de type ``unsigned long`` appel√©e ``currentMillis`` pour stocker l'heure actuelle.

.. code-block:: Arduino
  :emphasize-lines: 3

  void loop() {
    // Mettez ici votre code principal, qui s'ex√©cute en boucle :
    unsigned long currentMillis = millis();
  }

7. Lorsque le temps √©coul√© depuis la derni√®re mise √† jour d√©passe 1000ms, d√©clenchez certaines fonctions. Mettez √©galement √† jour la valeur de ``previousMillis`` avec l'heure actuelle, pour que le prochain d√©clenchement se produise dans 1 seconde.

.. code-block:: Arduino
  :emphasize-lines: 5,6

  void loop() {
    // Mettez ici votre code principal, qui s'ex√©cute en boucle :
    unsigned long currentMillis = millis();

    if (currentMillis - previousMillis >= interval) {
      previousMillis = currentMillis;  // Sauvegarder l'heure du dernier bip
    }
  }

8. Ajoutez les fonctions principales √† ex√©cuter p√©riodiquement. Dans ce cas, faites sonner le buzzer.

.. code-block:: Arduino
  :emphasize-lines: 7,8,9

  void loop() {
    // Mettez ici votre code principal, qui s'ex√©cute en boucle :
    unsigned long currentMillis = millis();

    if (currentMillis - previousMillis >= interval) {
      previousMillis = currentMillis;  // Sauvegarder l'heure du dernier bip
      digitalWrite(buzzerPin, HIGH);   // Faire sonner le buzzer
      delay(100);
      digitalWrite(buzzerPin, LOW);  // Arr√™ter le buzzer
    }
  }

9. Votre code complet devrait ressembler √† ceci. T√©l√©versez-le sur l'Arduino Uno R3 et vous entendrez le buzzer √©mettre un bip toutes les secondes.

.. code-block:: Arduino

  const int buzzerPin = 9;  // Assigne la broche 9 √† la constante pour le buzzer

  unsigned long previousMillis = 0;  // Stocke l'horodatage du dernier bip du buzzer
  long interval = 1000;              // Intervalle de bip (en millisecondes)

  void setup() {
    // Mettez ici votre code de configuration, qui s'ex√©cute une seule fois :
    pinMode(buzzerPin, OUTPUT);  // D√©finir la broche 9 comme sortie
  }

  void loop() {
    // Mettez ici votre code principal, qui s'ex√©cute en boucle :
    unsigned long currentMillis = millis();

    if (currentMillis - previousMillis >= interval) {
      previousMillis = currentMillis;  // Sauvegarder l'heure du dernier bip
      digitalWrite(buzzerPin, HIGH);   // Faire sonner le buzzer
      delay(100);
      digitalWrite(buzzerPin, LOW);  // Arr√™ter le buzzer
    }
  }

**Question**

Si la fonction ``delay(100);`` est remplac√©e par ``delay(1000);``, que se passera-t-il dans le programme ? Pourquoi ?


Cr√©ation du code - Timer Pomodoro
-------------------------------------

La Technique Pomodoro, √©galement connue sous le nom de Technique de la tomate, est une m√©thode de gestion du temps d√©velopp√©e par Francesco Cirillo √† la fin des ann√©es 1980.
Cette m√©thode utilise un minuteur pour diviser le travail en intervalles de 25 minutes, suivis de courtes pauses.
Chaque intervalle de travail est appel√© un "pomodoro", en r√©f√©rence au minuteur de cuisine en forme de tomate que Cirillo utilisait durant ses ann√©es universitaires.

.. image:: img/19_tomato_timer.jpg
  :width: 500
  :align: center

Les √©tapes de base de la Technique Pomodoro comprennent :

1. **D√©finir la t√¢che** : D√©cidez de la t√¢che √† accomplir avant de commencer.
2. **R√©gler le minuteur Pomodoro** : R√©glez un minuteur pour 25 minutes de travail.
3. **Travail intense** : Concentrez-vous pleinement sur la t√¢che pendant ces 25 minutes, en √©vitant toute distraction.
4. **Faire une courte pause** : Une fois le temps de travail √©coul√©, prenez une pause de 5 minutes. Pendant cette pause, vous pouvez marcher, vous √©tirer, boire de l'eau, etc., mais √©vitez les activit√©s li√©es au travail.

Les avantages de la Technique Pomodoro incluent une meilleure concentration, une r√©duction de la fatigue, une distinction claire entre le travail et les pauses, aidant √† g√©rer les distractions, et une motivation accrue gr√¢ce √† l'accomplissement des t√¢ches. De plus, la Technique Pomodoro ne n√©cessite pas d'outils ou de technologies complexes ‚Äî un simple minuteur suffit.

Ensuite, nous allons programmer un minuteur qui √©mettra un bip toutes les 25 minutes pour signaler la fin d'une p√©riode de travail, suivie d'un rappel pour une pause de 5 minutes :

1. Ouvrez l'IDE Arduino et d√©marrez un nouveau projet en s√©lectionnant "New Sketch" dans le menu "Fichier".
2. Enregistrez votre sketch sous le nom ``Lesson20_Timer_Millis_Pomodoro`` en utilisant ``Ctrl + S`` ou en cliquant sur "Enregistrer".

3. D√©finissez quelques constantes et variables avant la fonction ``void setup()``.

* ``buzzerPin`` identifie la broche √† laquelle le buzzer est connect√©.
* ``startMillis`` enregistre le moment o√π le minuteur commence.
* ``workPeriod`` et ``breakPeriod`` d√©finissent la dur√©e de chaque p√©riode.
* ``isWorkPeriod`` est une variable bool√©enne utilis√©e pour savoir s'il s'agit d'une p√©riode de travail ou de pause.

.. code-block:: Arduino

  const int buzzerPin = 9;          // Assigne la broche 9 √† la constante pour le buzzer
  unsigned long startMillis;        // Stocke l'heure de d√©but du minuteur
  const long workPeriod = 1500000;  // P√©riode de travail de 25 minutes
  const long breakPeriod = 300000;  // P√©riode de pause de 5 minutes
  static bool isWorkPeriod = true;  // Indique s'il s'agit d'une p√©riode de travail ou de pause


4. Initialisez la broche du buzzer comme une sortie et d√©marrez le minuteur en enregistrant l'heure de d√©but avec ``millis()``.

.. code-block:: Arduino
  :emphasize-lines: 2,3
  
  void setup() {
    pinMode(buzzerPin, OUTPUT); // Initialiser la broche du buzzer en tant que sortie
    startMillis = millis(); // Enregistrer l'heure de d√©but
  }

5. Dans la fonction ``void loop()``, cr√©ez une variable ``unsigned long`` appel√©e ``currentMillis`` pour stocker l'heure actuelle.

.. code-block:: Arduino
  :emphasize-lines: 2

  void loop() {
    unsigned long currentMillis = millis(); // Mettre √† jour l'heure actuelle
  }

6. Utilisez des instructions conditionnelles ``if else if`` pour d√©terminer s'il s'agit d'une p√©riode de travail.

.. code-block:: Arduino
  :emphasize-lines: 4-6

  void loop() {
    unsigned long currentMillis = millis(); // Mettre √† jour l'heure actuelle

    if (isWorkPeriod){ 
    } else if (!isWorkPeriod){
    }
  }

7. Si c'est le cas, v√©rifiez si l'heure actuelle a d√©pass√© la dur√©e de la ``workPeriod``. Si oui, r√©initialisez le minuteur, passez √† la p√©riode de pause et d√©clenchez deux bips longs avec le buzzer.

.. code-block:: Arduino
  :emphasize-lines: 5-16

  void loop() {
    unsigned long currentMillis = millis();  // Mettre √† jour l'heure actuelle

    if (isWorkPeriod) {
      if (currentMillis - startMillis >= workPeriod) {
        startMillis = currentMillis;  // R√©initialiser le minuteur
        isWorkPeriod = false;         // Passer √† la p√©riode de pause
        digitalWrite(buzzerPin, HIGH);  // Allumer le buzzer
        delay(500);                     // Buzzer allum√© pendant 500 millisecondes
        digitalWrite(buzzerPin, LOW);   // √âteindre le buzzer
        delay(200);                     // Buzzer √©teint pendant 200 millisecondes
        digitalWrite(buzzerPin, HIGH);  // Allumer le buzzer
        delay(500);                     // Buzzer allum√© pendant 500 millisecondes
        digitalWrite(buzzerPin, LOW);   // √âteindre le buzzer
        delay(200);                     // Buzzer √©teint pendant 200 millisecondes
      }
    } else if (!isWorkPeriod) {
    }
  }

8. Utilisez des instructions conditionnelles ``else if`` pour d√©terminer s'il s'agit d'une p√©riode de pause et v√©rifiez de la m√™me mani√®re si le temps √©coul√© a d√©pass√© la dur√©e de la ``breakPeriod``. Si c'est le cas, r√©initialisez le minuteur, revenez √† la p√©riode de travail et faites sonner le buzzer bri√®vement deux fois.

.. code-block:: Arduino

  } else if (!isWorkPeriod) {
    if (currentMillis - startMillis >= breakPeriod) {
      startMillis = currentMillis;  // R√©initialiser le minuteur
      isWorkPeriod = true;          // Repasser √† la p√©riode de travail
      digitalWrite(buzzerPin, HIGH);  // Allumer le buzzer
      delay(200);                     // Buzzer allum√© pendant 200 millisecondes
      digitalWrite(buzzerPin, LOW);   // √âteindre le buzzer
      delay(200);                     // Buzzer √©teint pendant 200 millisecondes
      digitalWrite(buzzerPin, HIGH);  // Allumer le buzzer
      delay(200);                     // Buzzer allum√© pendant 200 millisecondes
      digitalWrite(buzzerPin, LOW);   // √âteindre le buzzer
      delay(200);                     // Buzzer √©teint pendant 200 millisecondes
    }
  }

9. Votre code complet devrait ressembler √† ceci, et vous pouvez le t√©l√©verser sur l'Arduino Uno R3 pour voir les effets.

.. note::

  Si vous trouvez que 25 minutes de p√©riode de travail et 5 minutes de pause sont trop longues lors du d√©bogage, 
  vous pouvez raccourcir ``workPeriod`` √† 15000 millisecondes et ``breakPeriod`` √† 3000 millisecondes. Vous entendrez alors le buzzer sonner deux fois longuement toutes les 15 secondes, suivi de deux bips courts apr√®s 3 secondes.

.. code-block:: Arduino

  const int buzzerPin = 9;          // Assigner la broche 9 √† la constante pour le buzzer
  unsigned long startMillis;        // Stocker l'heure de d√©but du minuteur
  const long workPeriod = 1500000;  // P√©riode de travail de 25 minutes
  const long breakPeriod = 300000;  // P√©riode de pause de 5 minutes
  static bool isWorkPeriod = true;  // Suivre s'il s'agit d'une p√©riode de travail ou de pause

  void setup() {
    pinMode(buzzerPin, OUTPUT); // Initialiser la broche du buzzer en tant que sortie
    startMillis = millis(); // Enregistrer l'heure de d√©but
  }

  void loop() {
    unsigned long currentMillis = millis(); // Mettre √† jour l'heure actuelle

    if (isWorkPeriod){ 
      if(currentMillis - startMillis >= workPeriod) {
        startMillis = currentMillis; // R√©initialiser le minuteur
        isWorkPeriod = false; // Passer √† la p√©riode de pause
        digitalWrite(buzzerPin, HIGH);  // Allumer le buzzer
        delay(500);                     // Buzzer allum√© pendant 500 millisecondes
        digitalWrite(buzzerPin, LOW);   // √âteindre le buzzer
        delay(200);                     // Buzzer √©teint pendant 200 millisecondes
        digitalWrite(buzzerPin, HIGH);  // Allumer le buzzer
        delay(500);                     // Buzzer allum√© pendant 500 millisecondes
        digitalWrite(buzzerPin, LOW);   // √âteindre le buzzer
        delay(200);                     // Buzzer √©teint pendant 200 millisecondes
      }
    } else if (!isWorkPeriod) 
      if(currentMillis - startMillis >= breakPeriod) {
        startMillis = currentMillis; // R√©initialiser le minuteur
        isWorkPeriod = true; // Repasser √† la p√©riode de travail
        digitalWrite(buzzerPin, HIGH);  // Allumer le buzzer
        delay(200);                     // Buzzer allum√© pendant 200 millisecondes
        digitalWrite(buzzerPin, LOW);   // √âteindre le buzzer
        delay(200);                     // Buzzer √©teint pendant 200 millisecondes
        digitalWrite(buzzerPin, HIGH);  // Allumer le buzzer
        delay(200);                     // Buzzer allum√© pendant 200 millisecondes
        digitalWrite(buzzerPin, LOW);   // √âteindre le buzzer
        delay(200);                     // Buzzer √©teint pendant 200 millisecondes
      }
    }
  }

10. Enfin, n'oubliez pas d'enregistrer votre code et de ranger votre espace de travail.

**Question**

Pensez √† d'autres moments dans votre vie o√π vous pouvez "entendre" le temps. Listez quelques exemples et notez-les dans votre carnet !

**R√©sum√©**

Dans le cours d'aujourd'hui, nous avons construit avec succ√®s une version √©lectronique du Timer Pomodoro, un outil pr√©cieux pour am√©liorer la productivit√© gr√¢ce √† des p√©riodes de travail et de pause structur√©es. √Ä travers ce projet, les √©tudiants ont appris l'utilit√© des buzzers dans la gestion du temps et l'application pratique de la fonction ``millis()`` pour cr√©er du code non bloquant dans Arduino. Cette approche permet le multit√¢che dans les applications de microcontr√¥leurs, refl√©tant des syst√®mes plus complexes dans les technologies et l'industrie.


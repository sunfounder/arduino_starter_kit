.. note::

    Hallo, willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Community auf Facebook! Tauche tiefer in Raspberry Pi, Arduino und ESP32 ein, gemeinsam mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂se Probleme nach dem Kauf und technische Herausforderungen mit Hilfe unserer Community und unseres Teams.
    - **Lernen & Teilen**: Tausche Tipps und Tutorials aus, um deine F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalte fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und Sneak Peeks.
    - **Sonderrabatte**: Genie√üe exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Verlosungen**: Nimm an Verlosungen und Sonderaktionen zu Feiertagen teil.

    üëâ Bereit, mit uns zu erkunden und zu erschaffen? Klicke auf [|link_sf_facebook|] und tritt noch heute bei!

20. Der Pomodoro-Timer
===========================================

In dieser Lektion werden wir den Schnittpunkt von Zeitmanagement und Technologie erkunden, indem wir einen Pomodoro-Timer mit einem Arduino und einem aktiven Summer erstellen. Du wirst lernen, wie du die internen Timing-F√§higkeiten des Arduino nutzt, um einen Timer zu bauen, der Arbeit in 25-min√ºtige fokussierte Intervalle mit anschlie√üenden 5-min√ºtigen Pausen unterteilt. Diese Methode, bekannt als Pomodoro-Technik, steigert Produktivit√§t und Konzentration. Im Laufe des Kurses wirst du ein solides Fundament in elektronischer Zeitmessung erlangen und praktische Erfahrungen in Programmierung und Schaltungsaufbau sammeln, die in der Erstellung eines funktionsf√§higen Pomodoro-Timers gipfeln. Schlie√üe dich uns an, um deine Zeit zu meistern und die Effizienz in deinen t√§glichen Aktivit√§ten zu steigern!

.. image:: img/19_tomato_timer.jpg
  :width: 500
  :align: center

.. raw:: html

     <video controls style = "max-width:90%">
        <source src="_static/video/20_beep_timer.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

Am Ende dieser Lektion wirst du in der Lage sein:

* Die historische Bedeutung von Klang in der Zeitmessung zu verstehen.
* Die Komponenten zu identifizieren, die ben√∂tigt werden, um eine elektronische Timer-Schaltung zu bauen.
* Ein Arduino zu programmieren, um einen Summer f√ºr das Zeitmanagement mit den Funktionen ``delay()`` und ``millis()`` zu steuern.
* Die Pomodoro-Technik praktisch anzuwenden, indem du einen Timer erstellst, der zwischen Arbeits- und Pausenzeiten wechselt.

Uhren und Klang
--------------------

In der Antike wurden gro√ü angelegte Glockenschl√§ge verwendet, um den Zeitablauf und bestimmte gesellschaftliche Ereignisse zu markieren.
Zum Beispiel nutzten mittelalterliche europ√§ische St√§dte Kirchenglockenschl√§ge, um Gebetszeiten und den Beginn sowie das Ende der Arbeitstage zu kennzeichnen.
Diese Glockenschl√§ge waren mehr als nur Zeitmarkierungen; sie dienten als Werkzeuge der sozialen Ordnung, um die sich das t√§gliche Leben der Gemeinschaft drehte.

**Mechanische Uhren und Klang**

.. image:: img/7_big_ben.png
  :width: 500
  :align: center

Mit der Entwicklung mechanischer Uhren, insbesondere mit dem Design des Big Ben, begannen Uhren, komplexere Glocken und Zeitmechanismen zu integrieren.
Der Klang des Big Ben wird von seinen gro√üen Bronzeglocken getragen, was sowohl die Reichweite der Schallausbreitung als auch die Pr√§zision der Zeitansagen verbessert.
In vielen St√§dten wurde der Klang des Big Ben f√ºr die Bewohner zum Referenzpunkt, um ihre t√§glichen Aktivit√§ten anzupassen, und spielte eine entscheidende Rolle bei der genaueren Zeitplanung f√ºr die Navigation, Fahrpl√§ne der Eisenbahnen und mehr.

**Klang und Zeitmessung im Elektronischen Zeitalter**

.. image:: img/19_timer.jpg
  :width: 500
  :align: center

Mit dem Eintritt in das elektronische Zeitalter entwickelten sich Klang-Timer neu. 
Die Einf√ºhrung elektronischer Summer, insbesondere mit der Hilfe von Mikrocontrollern 
wie dem Arduino, machte die Zeitmarkierung unabh√§ngig von gro√üen mechanischen Ger√§ten. 
Diese kleinen Ger√§te k√∂nnen T√∂ne in verschiedenen Frequenzen und Tonh√∂hen erzeugen, die 
f√ºr verschiedene Zeitmessungsanwendungen verwendet werden k√∂nnen, von einfachen K√ºchentimern 
bis hin zu komplexen industriellen Prozesssteuerungssystemen. Beispiele hierf√ºr sind die 
Rufsysteme in modernen Krankenh√§usern, Schulglocken und Erinnerungen in pers√∂nlichen 
elektronischen Ger√§ten, die alle elektronische Summer zur Zeitverwaltung nutzen.

Schaltungsaufbau
-----------------------

**Ben√∂tigte Komponenten**

.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * Breadboard
     - 1 * Aktiver Summer
     - Jumper-Kabel
   * - |list_uno_r3| 
     - |list_breadboard| 
     - |list_active_buzzer| 
     - |list_wire| 
   * - 1 * USB-Kabel
     -
     - 
     - 
   * - |list_usb_cable| 
     -
     - 
     - 



**Schritt-f√ºr-Schritt-Aufbau**

Diese Lektion verwendet denselben Schaltkreis wie Lektion 17.

.. image:: img/16_morse_code.png
    :width: 500
    :align: center

Codeerstellung - Tick Tick
----------------------------

Im Arduino ist ``delay()`` die einfachste und am h√§ufigsten verwendete Timing-Funktion.
Wir verwenden sie oft, um das Programm f√ºr kurze Zeit anzuhalten, was in Kombination mit Schleifen einen Blinkeffekt bei LEDs erzeugen kann. Hier verwenden wir die ``delay()``-Funktion, um den Summer jede Sekunde einmal ert√∂nen zu lassen.

1. √ñffne die Arduino-IDE und starte ein neues Projekt, indem du ‚ÄûNew Sketch‚Äú aus dem Men√º ‚ÄûFile‚Äú ausw√§hlst.
2. Speichere deinen Sketch als ``Lesson20_Timer_Tick_Tick`` mit ``Ctrl + S`` oder durch Klicken auf ‚ÄûSpeichern‚Äú.

3. Schreibe den folgenden Code:

.. code-block:: Arduino

  const int buzzerPin = 9;   // Weist Pin 9 der Konstanten f√ºr den Summer zu  
  
  void setup() {
    // setze deinen Setup-Code hier, um ihn einmal auszuf√ºhren:
    pinMode(buzzerPin, OUTPUT);  // Setze Pin 9 als Ausgang
  } 

  void loop() {
    // setze deinen Hauptcode hier, um ihn wiederholt auszuf√ºhren:
    digitalWrite(buzzerPin, HIGH);  // Summer einschalten
    delay(100);                     // Beep-Dauer: 100 Millisekunden
    digitalWrite(buzzerPin, LOW);   // Summer ausschalten
    delay(1000);                    // Intervall zwischen den Signalen: 1000 Millisekunden
  }

In diesem Setup pausiert die erste ``delay()``-Funktion den Arduino Uno R3 f√ºr 100 Millisekunden, w√§hrend der Summer weiterhin ert√∂nt. Die zweite ``delay()``-Funktion pausiert den Arduino f√ºr 1000 Millisekunden (1 Sekunde), w√§hrend der Summer stumm ist.

4. Nachdem du den Code auf den Arduino Uno R3 hochgeladen hast, wirst du h√∂ren, dass der Summer jede Sekunde einmal piept.

Coding Creation - ``millis()``
------------------------------

Die Verwendung von ``delay()`` pausiert deinen Code, was manchmal unpraktisch sein kann.

Stell dir zum Beispiel vor, du erw√§rmst eine Pizza in der Mikrowelle und wartest gleichzeitig auf wichtige E-Mails.
Du legst die Pizza in die Mikrowelle und stellst die Zeit auf 10 Minuten ein. Die Analogie zur Nutzung von ``delay()`` w√§re, vor der Mikrowelle zu sitzen und den Timer dabei zu beobachten, wie er von 10 Minuten auf null herunterz√§hlt. Solltest du in dieser Zeit eine wichtige E-Mail erhalten, w√ºrdest du sie verpassen.

Was du normalerweise tust, ist, die Pizza in die Mikrowelle zu legen, dann deine E-Mails zu pr√ºfen und vielleicht noch etwas anderes zu erledigen, w√§hrend du hin und wieder kontrollierst, ob der Timer auf null steht und deine Pizza fertig ist.

Arduino bietet auch ein Timing-Tool, das das Programm nicht pausiert: ``millis()``.

``millis()`` ist eine sehr wichtige Funktion in der Arduino-Programmierung. Sie gibt die Anzahl der Millisekunden zur√ºck, die seit dem Einschalten oder dem letzten Zur√ºcksetzen des Arduino-Boards vergangen sind.

  * ``time = millis()``: Gibt die Anzahl der Millisekunden zur√ºck, die seit dem Start des aktuellen Programms auf dem Arduino vergangen sind. Dieser Wert wird nach etwa 50 Tagen √ºberlaufen (zur√ºck auf null).

  **Parameter**
    Keine

  **R√ºckgabewert**
    Anzahl der Millisekunden seit Programmstart. Datentyp: unsigned long.

Hier lassen wir den Summer ebenfalls einmal pro Sekunde ert√∂nen.

1. √ñffne die Arduino-IDE und starte ein neues Projekt, indem du ‚ÄûNew Sketch‚Äú aus dem Men√º ‚ÄûFile‚Äú ausw√§hlst.
2. Speichere deinen Sketch als ``Lesson20_Timer_Millis`` mit ``Ctrl + S`` oder durch Klicken auf ‚ÄûSpeichern‚Äú.

3. Zuerst erstellst du eine Konstante namens ``buzzerPin`` und setzt sie auf Pin 9.

.. code-block:: Arduino
  :emphasize-lines: 1

  const int buzzerPin = 9;   // Weist Pin 9 der Konstanten f√ºr den Summer zu

  void setup() {
    // setze deinen Setup-Code hier, um ihn einmal auszuf√ºhren:
  }

4. Erstelle zwei Variablen vom Typ long: ``previousMillis`` speichert den Zeitpunkt, an dem der Summer zuletzt ert√∂nte, und ``interval`` legt fest, wie oft der Summer ert√∂nt, in Millisekunden. Hier ist es auf jede Sekunde (1000 Millisekunden) eingestellt.

.. code-block:: Arduino
  :emphasize-lines: 3,4

  const int buzzerPin = 9;  // Weist Pin 9 der Konstanten f√ºr den Summer zu

  unsigned long previousMillis = 0;  // Speichert den Zeitpunkt des letzten Summertons
  long interval = 1000;              // Intervall f√ºr den Summerton (Millisekunden)

5. In der Funktion ``void setup()`` setzt du den Pin des Summers auf den Ausgangsmodus.

.. code-block:: Arduino
  :emphasize-lines: 8

  const int buzzerPin = 9;  // Weist Pin 9 der Konstanten f√ºr den Summer zu

  unsigned long previousMillis = 0;  // Speichert den Zeitpunkt des letzten Summertons
  long interval = 1000;              // Intervall f√ºr den Summerton (Millisekunden)

  void setup() {
    // setze deinen Setup-Code hier, um ihn einmal auszuf√ºhren:
    pinMode(buzzerPin, OUTPUT);  // Setze Pin 9 als Ausgang
  }

6. In der Funktion ``void loop()`` erstellst du eine Variable vom Typ ``unsigned long`` namens ``currentMillis``, um die aktuelle Zeit zu speichern.

.. code-block:: Arduino
  :emphasize-lines: 3

  void loop() {
    // setze deinen Hauptcode hier, um ihn wiederholt auszuf√ºhren:
    unsigned long currentMillis = millis();
  }

7. Wenn die aktuelle Laufzeit minus der letzten Aktualisierungszeit 1000ms √ºberschreitet, wird eine Funktion ausgel√∂st. Aktualisiere zudem ``previousMillis`` auf die aktuelle Zeit, damit die n√§chste Ausl√∂sung in einer Sekunde erfolgt.

.. code-block:: Arduino
  :emphasize-lines: 5,6

  void loop() {
    // setze deinen Hauptcode hier, um ihn wiederholt auszuf√ºhren:
    unsigned long currentMillis = millis();

    if (currentMillis - previousMillis >= interval) {
      previousMillis = currentMillis;  // Speichere die Zeit des letzten Summertons
    }
  }

8. F√ºge die Hauptfunktionen hinzu, die periodisch ausgef√ºhrt werden sollen. In diesem Fall l√§sst du den Summer ert√∂nen.

.. code-block:: Arduino
  :emphasize-lines: 7,8,9

  void loop() {
    // setze deinen Hauptcode hier, um ihn wiederholt auszuf√ºhren:
    unsigned long currentMillis = millis();

    if (currentMillis - previousMillis >= interval) {
      previousMillis = currentMillis;  // Speichere die Zeit des letzten Summertons
      digitalWrite(buzzerPin, HIGH);   // Summer einschalten
      delay(100);
      digitalWrite(buzzerPin, LOW);    // Summer ausschalten
    }
  }

9. Dein kompletter Code sollte nun wie folgt aussehen. Lade ihn auf den Arduino Uno R3 hoch, und der Summer wird jede Sekunde einmal ert√∂nen.

.. code-block:: Arduino

  const int buzzerPin = 9;  // Weist Pin 9 der Konstanten f√ºr den Summer zu

  unsigned long previousMillis = 0;  // Speichert den Zeitpunkt des letzten Summertons
  long interval = 1000;              // Intervall f√ºr den Summerton (Millisekunden)

  void setup() {
    // setze deinen Setup-Code hier, um ihn einmal auszuf√ºhren:
    pinMode(buzzerPin, OUTPUT);  // Setze Pin 9 als Ausgang
  }

  void loop() {
    // setze deinen Hauptcode hier, um ihn wiederholt auszuf√ºhren:
    unsigned long currentMillis = millis();

    if (currentMillis - previousMillis >= interval) {
      previousMillis = currentMillis;  // Speichere die Zeit des letzten Summertons
      digitalWrite(buzzerPin, HIGH);   // Summer einschalten
      delay(100);
      digitalWrite(buzzerPin, LOW);    // Summer ausschalten
    }
  }

**Frage**

Was passiert, wenn ``delay(100);`` auf ``delay(1000);`` ge√§ndert wird? Warum?

Coding Creation - Pomodoro-Timer
-----------------------------------

Die Pomodoro-Technik, auch bekannt als Tomaten-Technik, ist eine Methode des Zeitmanagements, die von Francesco Cirillo Ende der 1980er Jahre entwickelt wurde.
Diese Methode nutzt einen Timer, um die Arbeit in 25-min√ºtige Intervalle zu unterteilen, gefolgt von kurzen Pausen.
Jedes Arbeitsintervall wird ‚ÄûPomodoro‚Äú genannt, nach dem tomatenf√∂rmigen K√ºchentimer, den Cirillo w√§hrend seiner Studienzeit verwendete.

.. image:: img/19_tomato_timer.jpg
  :width: 500
  :align: center

Die grundlegenden Schritte der Pomodoro-Technik sind:

1. **Aufgabe festlegen**: Bestimme die Aufgabe, die du vor Beginn erledigen m√∂chtest.
2. **Pomodoro-Timer einstellen**: Stelle den Timer auf 25 Minuten Arbeitszeit.
3. **Intensiv arbeiten**: Konzentriere dich vollst√§ndig auf die Aufgabe w√§hrend dieser 25 Minuten und vermeide jegliche Ablenkungen.
4. **Kurze Pause machen**: Sobald die Arbeitszeit vorbei ist, mache eine 5-min√ºtige Pause. In dieser Zeit kannst du herumlaufen, dich strecken, Wasser trinken usw., aber vermeide es, arbeitsbezogene T√§tigkeiten auszuf√ºhren.

Die Vorteile der Pomodoro-Technik umfassen gesteigerte Konzentration, reduzierte Erm√ºdung, klare Abgrenzung von Arbeits- und Pausenzeiten, die helfen, Ablenkungen zu vermeiden, sowie erh√∂hte Motivation und Zufriedenheit durch das Erledigen von Aufgaben. Dar√ºber hinaus erfordert die Pomodoro-Technik keine komplexen Werkzeuge oder Technologien ‚Äì ein einfacher Timer reicht aus.

Als N√§chstes programmieren wir einen Timer, der alle 25 Minuten einen Summer ert√∂nen l√§sst, um das Ende einer Arbeitsphase anzuzeigen, gefolgt von einer Erinnerung an eine 5-min√ºtige Pause:

1. √ñffne die Arduino IDE und starte ein neues Projekt, indem du ‚ÄûNew Sketch‚Äú aus dem Men√º ‚ÄûFile‚Äú ausw√§hlst.
2. Speichere deinen Sketch als ``Lesson20_Timer_Millis_Pomodoro`` mit ``Ctrl + S`` oder durch Klicken auf ‚ÄûSpeichern‚Äú.

3. Definiere einige Konstanten und Variablen vor ``void setup()``.

* ``buzzerPin`` identifiziert, an welchem Pin der Summer angeschlossen ist.
* ``startMillis`` verfolgt, wann der Timer gestartet wurde.
* ``workPeriod`` und ``breakPeriod`` legen fest, wie lange jede Phase dauert.
* ``isWorkPeriod`` ist eine boolesche Variable, die festlegt, ob es Zeit f√ºr Arbeit oder eine Pause ist.

.. code-block:: Arduino

  const int buzzerPin = 9;          // Weist Pin 9 der Konstanten f√ºr den Summer zu
  unsigned long startMillis;        // Speichert die Zeit, zu der der Timer startet
  const long workPeriod = 1500000;  // Arbeitsphase von 25 Minuten
  const long breakPeriod = 300000;  // Pausenphase von 5 Minuten
  static bool isWorkPeriod = true;  // Verfolgt, ob es eine Arbeits- oder Pausenphase ist

4. Initialisiere den Pin des Summers als Ausgang und starte den Timer, indem du die Startzeit mit ``millis()`` speicherst.

.. code-block:: Arduino
  :emphasize-lines: 2,3

  void setup() {
    pinMode(buzzerPin, OUTPUT); // Initialisiere den Pin des Summers als Ausgang
    startMillis = millis(); // Speichere die Startzeit
  }

5. Erstelle in der Funktion ``void loop()`` eine Variable vom Typ ``unsigned long`` namens ``currentMillis``, um die aktuelle Zeit zu speichern.

.. code-block:: Arduino
  :emphasize-lines: 2

  void loop() {
    unsigned long currentMillis = millis(); // Aktualisiere die aktuelle Zeit
  }

6. Verwende ``if else if``-Bedingungen, um festzustellen, ob es sich um eine Arbeitsphase handelt.

.. code-block:: Arduino
  :emphasize-lines: 4-6

  void loop() {
    unsigned long currentMillis = millis(); // Aktualisiere die aktuelle Zeit

    if (isWorkPeriod){ 
    } else if (!isWorkPeriod){
    }
  }

7. Falls es eine Arbeitsphase ist, pr√ºfe, ob die aktuelle Zeit die ``workPeriod`` √ºberschritten hat. Wenn ja, setze den Timer zur√ºck, wechsle zur Pausenphase und lass den Summer zweimal f√ºr eine l√§ngere Dauer ert√∂nen.

.. code-block:: Arduino
  :emphasize-lines: 5-16

  void loop() {
    unsigned long currentMillis = millis();  // Aktualisiere die aktuelle Zeit

    if (isWorkPeriod) {
      if (currentMillis - startMillis >= workPeriod) {
        startMillis = currentMillis;  // Setze den Timer zur√ºck
        isWorkPeriod = false;         // Wechsle zur Pausenphase
        digitalWrite(buzzerPin, HIGH);  // Summer einschalten
        delay(500);                     // Summer f√ºr 500 Millisekunden eingeschaltet
        digitalWrite(buzzerPin, LOW);   // Summer ausschalten
        delay(200);                     // Summer f√ºr 200 Millisekunden ausgeschaltet
        digitalWrite(buzzerPin, HIGH);  // Summer einschalten
        delay(500);                     // Summer f√ºr 500 Millisekunden eingeschaltet
        digitalWrite(buzzerPin, LOW);   // Summer ausschalten
        delay(200);                     // Summer f√ºr 200 Millisekunden ausgeschaltet
      }
    } else if (!isWorkPeriod) {
    }
  }


8. Verwende ``else if``-Bedingungen, um festzustellen, ob es sich um eine Pausenphase handelt, und pr√ºfe ebenfalls, ob die aktuelle Zeit die ``breakPeriod`` √ºberschritten hat. Wenn ja, setze den Timer zur√ºck, wechsle zur Arbeitsphase und lass den Summer zweimal kurz ert√∂nen.

.. code-block:: Arduino

  } else if (!isWorkPeriod) {
    if (currentMillis - startMillis >= breakPeriod) {
      startMillis = currentMillis;  // Timer zur√ºcksetzen
      isWorkPeriod = true;          // Wechsel zur Arbeitsphase
      digitalWrite(buzzerPin, HIGH);  // Summer einschalten
      delay(200);                     // Summer f√ºr 200 Millisekunden eingeschaltet
      digitalWrite(buzzerPin, LOW);   // Summer ausschalten
      delay(200);                     // Summer f√ºr 200 Millisekunden ausgeschaltet
      digitalWrite(buzzerPin, HIGH);  // Summer einschalten
      delay(200);                     // Summer f√ºr 200 Millisekunden eingeschaltet
      digitalWrite(buzzerPin, LOW);   // Summer ausschalten
      delay(200);                     // Summer f√ºr 200 Millisekunden ausgeschaltet
    }
  }


9. Dein vollst√§ndiger Code sollte nun wie folgt aussehen. Du kannst ihn auf den Arduino Uno R3 hochladen, um die Wirkung zu sehen.

.. note::

  Wenn dir das Warten von 25 Minuten f√ºr eine Arbeitsphase und 5 Minuten f√ºr eine Pause w√§hrend des Debuggings zu lang ist, 
  kannst du die ``workPeriod`` auf 15000 Millisekunden und die ``breakPeriod`` auf 3000 Millisekunden verk√ºrzen. Du wirst dann den Summer zweimal lang alle 15 Sekunden h√∂ren, gefolgt von einem kurzen Doppelton nach 3 Sekunden.

.. code-block:: Arduino

  const int buzzerPin = 9;          // Weist Pin 9 der Konstanten f√ºr den Summer zu
  unsigned long startMillis;        // Speichert die Zeit, zu der der Timer startet
  const long workPeriod = 1500000;  // Arbeitsphase von 25 Minuten
  const long breakPeriod = 300000;  // Pausenphase von 5 Minuten
  static bool isWorkPeriod = true;  // Verfolgt, ob es eine Arbeits- oder Pausenphase ist

  void setup() {
    pinMode(buzzerPin, OUTPUT); // Summerpin als Ausgang initialisieren
    startMillis = millis(); // Startzeit speichern
  }

  void loop() {
    unsigned long currentMillis = millis(); // Aktualisiere die aktuelle Zeit

    if (isWorkPeriod){ 
      if(currentMillis - startMillis >= workPeriod) {
        startMillis = currentMillis; // Timer zur√ºcksetzen
        isWorkPeriod = false; // Wechsel zur Pausenphase
        digitalWrite(buzzerPin, HIGH);  // Summer einschalten
        delay(500);                     // Summer f√ºr 500 Millisekunden eingeschaltet
        digitalWrite(buzzerPin, LOW);   // Summer ausschalten
        delay(200);                     // Summer f√ºr 200 Millisekunden ausgeschaltet
        digitalWrite(buzzerPin, HIGH);  // Summer einschalten
        delay(500);                     // Summer f√ºr 500 Millisekunden eingeschaltet
        digitalWrite(buzzerPin, LOW);   // Summer ausschalten
        delay(200);                     // Summer f√ºr 200 Millisekunden ausgeschaltet
      }
    } else if (!isWorkPeriod) 
      if(currentMillis - startMillis >= breakPeriod) {
        startMillis = currentMillis; // Timer zur√ºcksetzen
        isWorkPeriod = true; // Wechsel zur Arbeitsphase
        digitalWrite(buzzerPin, HIGH);  // Summer einschalten
        delay(200);                     // Summer f√ºr 200 Millisekunden eingeschaltet
        digitalWrite(buzzerPin, LOW);   // Summer ausschalten
        delay(200);                     // Summer f√ºr 200 Millisekunden ausgeschaltet
        digitalWrite(buzzerPin, HIGH);  // Summer einschalten
        delay(200);                     // Summer f√ºr 200 Millisekunden eingeschaltet
        digitalWrite(buzzerPin, LOW);   // Summer ausschalten
        delay(200);                     // Summer f√ºr 200 Millisekunden ausgeschaltet
      }
    }
  }

10. Vergiss nicht, deinen Code zu speichern und deinen Arbeitsplatz aufzur√§umen.

**Frage**

Denke √ºber andere Bereiche in deinem Leben nach, in denen du die Zeit ‚Äûh√∂ren‚Äú kannst. Liste einige Beispiele auf und schreibe sie in dein Handbuch!


**Zusammenfassung**

In der heutigen Stunde haben wir erfolgreich eine elektronische Version des Pomodoro-Timers gebaut, ein wertvolles Werkzeug zur Steigerung der Produktivit√§t durch strukturierte Arbeits- und Pausenphasen. Durch dieses Projekt haben die Sch√ºler die N√ºtzlichkeit von Summern im Zeitmanagement kennengelernt und die praktische Anwendung der ``millis()``-Funktion zur Erstellung eines nicht-blockierenden Timer-Codes im Arduino verstanden. Dieser Ansatz erm√∂glicht Multitasking in Mikrocontroller-Anwendungen und spiegelt komplexere Systeme in Technologie und Industrie wider.

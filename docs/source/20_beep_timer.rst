.. note::

    ¬°Hola! Bienvenido a la comunidad de entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. Sum√©rgete en el mundo de Raspberry Pi, Arduino y ESP32 junto a otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte experto**: Resuelve problemas postventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Preestrenos exclusivos**: Obt√©n acceso anticipado a nuevos anuncios de productos y avances.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones festivas y sorteos**: Participa en sorteos y promociones de temporada.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo.


20. El Temporizador Pomodoro
===========================================

En esta lecci√≥n, exploraremos la intersecci√≥n entre la gesti√≥n del tiempo y la tecnolog√≠a creando un Temporizador Pomodoro con un Arduino y un zumbador activo. Aprender√°s a utilizar las capacidades de temporizaci√≥n interna del Arduino para construir un temporizador que segmenta el trabajo en intervalos de enfoque de 25 minutos seguidos de descansos de 5 minutos. Este m√©todo, conocido como la T√©cnica Pomodoro, mejora la productividad y la concentraci√≥n. A lo largo del curso, obtendr√°s una base s√≥lida en temporizaci√≥n electr√≥nica y experiencia pr√°ctica en programaci√≥n y ensamblaje de circuitos, culminando en la creaci√≥n de un temporizador Pomodoro funcional. ¬°√önete para dominar tu tiempo y aumentar la eficiencia en tus actividades diarias!

.. image:: img/19_tomato_timer.jpg
  :width: 500
  :align: center

.. raw:: html

     <video controls style = "max-width:90%">
        <source src="_static/video/20_beep_timer.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

Al final de esta lecci√≥n, ser√°s capaz de:

* Comprender la importancia hist√≥rica del sonido en la medici√≥n del tiempo.
* Identificar los componentes necesarios para construir un circuito de temporizador electr√≥nico.
* Programar un Arduino para controlar un zumbador en la gesti√≥n del tiempo utilizando las funciones ``delay()`` y ``millis()``.
* Aplicar la T√©cnica Pomodoro en un contexto pr√°ctico creando un temporizador que alterna entre periodos de trabajo y descanso.


Relojes y Sonido
--------------------

En el mundo antiguo, se usaban campanadas a gran escala para marcar el paso del tiempo y eventos sociales espec√≠ficos.
Por ejemplo, en las ciudades europeas medievales, las campanas de las iglesias marcaban los horarios de oraci√≥n y el inicio y fin de las jornadas laborales.
Estas campanadas no solo marcaban el tiempo; tambi√©n serv√≠an como herramientas para el orden social, en torno al cual giraba la vida cotidiana de la comunidad.

**Relojes mec√°nicos y sonido**

.. image:: img/7_big_ben.png
  :width: 500
  :align: center

Con el desarrollo de los relojes mec√°nicos, especialmente con el dise√±o del Big Ben, los relojes comenzaron a equiparse con campanas m√°s complejas y mecanismos de cronometraje.
El sonido del Big Ben se transmite por sus grandes campanas de bronce, mejorando tanto el alcance del sonido como la precisi√≥n de los anuncios de tiempo.
En muchas ciudades, el sonido del Big Ben se convirti√≥ en una referencia para que los residentes ajustaran sus actividades diarias, desempe√±ando un papel crucial en la programaci√≥n m√°s precisa del tiempo para la navegaci√≥n,
horarios de trenes y m√°s.

**Cronometraje sonoro en la era electr√≥nica**

.. image:: img/19_timer.jpg
  :width: 500
  :align: center

Con la llegada de la era electr√≥nica, los temporizadores sonoros evolucionaron nuevamente. La introducci√≥n de zumbadores electr√≥nicos, especialmente con la ayuda de microcontroladores como Arduino,
permiti√≥ que la medici√≥n del tiempo se independizara de los grandes dispositivos mec√°nicos. Estos peque√±os dispositivos pueden producir sonidos de diferentes frecuencias y tonos,
que se pueden utilizar para diversas aplicaciones de temporizaci√≥n, desde simples temporizadores de cocina hasta sistemas de control de procesos industriales complejos.
Ejemplos de esto incluyen los sistemas de llamadas de enfermer√≠a en hospitales modernos, las campanas de clase en las escuelas y los recordatorios en dispositivos electr√≥nicos personales, todos utilizando zumbadores electr√≥nicos para la gesti√≥n del tiempo.


Construcci√≥n del Circuito
------------------------------

**Componentes necesarios**

.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * Protoboard
     - 1 * Zumbador Activo
     - Cables Jumper
   * - |list_uno_r3| 
     - |list_breadboard| 
     - |list_active_buzzer| 
     - |list_wire| 
   * - 1 * Cable USB
     - 
     - 
     - 
   * - |list_usb_cable| 
     - 
     - 
     - 

**Construcci√≥n paso a paso**

Esta lecci√≥n utiliza el mismo circuito que la Lecci√≥n 17.

.. image:: img/16_morse_code.png
    :width: 500
    :align: center


Creaci√≥n de c√≥digo - Tick Tick
----------------------------------

En Arduino, ``delay()`` es la funci√≥n de temporizaci√≥n m√°s simple y com√∫nmente utilizada.
A menudo la usamos para pausar el programa por un tiempo corto, lo que, combinado con bucles, puede crear un efecto de parpadeo en un LED. Aqu√≠, utilizamos la funci√≥n ``delay()`` para hacer que el zumbador suene una vez cada segundo.

1. Abre el IDE de Arduino y comienza un nuevo proyecto seleccionando ‚ÄúNuevo Boceto‚Äù desde el men√∫ ‚ÄúArchivo‚Äù.
2. Guarda tu boceto como ``Lesson20_Timer_Tick_Tick`` usando ``Ctrl + S`` o haciendo clic en ‚ÄúGuardar‚Äù.

3. Escribe el c√≥digo como sigue:

.. code-block:: Arduino

  const int buzzerPin = 9;   // Asigna el pin 9 a la constante para el zumbador  
  
  void setup() {
    // Configura tu c√≥digo aqu√≠ para que se ejecute una vez:
    pinMode(buzzerPin, OUTPUT);  // Establece el pin 9 como salida
  } 

  void loop() {
    // El c√≥digo principal aqu√≠, para ejecutar repetidamente:
    digitalWrite(buzzerPin, HIGH);  // Encender el zumbador
    delay(100);                     // Duraci√≥n del pitido: 100 milisegundos
    digitalWrite(buzzerPin, LOW);   // Apagar el zumbador
    delay(1000);                    // Intervalo entre se√±ales: 1000 milisegundos
  }

En esta configuraci√≥n, la primera funci√≥n ``delay()`` pausa el Arduino Uno R3 durante 100 milisegundos, durante los cuales el zumbador contin√∫a sonando. La segunda funci√≥n ``delay()`` pausa el Arduino durante 1000 milisegundos (1 segundo), durante los cuales el zumbador permanece en silencio.

4. Despu√©s de cargar el c√≥digo en el Arduino Uno R3, escuchar√°s que el zumbador emite un pitido una vez por segundo.

Creaci√≥n de c√≥digo - ``millis()``
-------------------------------------

Usar ``delay()`` pausa tu c√≥digo, lo cual puede ser inconveniente.

Por ejemplo, imagina que calientas una pizza en el microondas mientras esperas correos electr√≥nicos importantes.
Colocas la pizza en el microondas y la programas por 10 minutos. La analog√≠a con usar ``delay()`` es sentarse frente al microondas, viendo c√≥mo la cuenta regresiva baja de 10 minutos a cero. Si recibes un correo electr√≥nico importante durante este tiempo, lo perder√≠as.

Lo que normalmente haces es colocar la pizza en el microondas, luego revisas tus correos electr√≥nicos, quiz√°s incluso haces otra cosa, y peri√≥dicamente vuelves para ver si el temporizador lleg√≥ a cero, indicando que tu pizza est√° lista.

Arduino tambi√©n tiene una herramienta de temporizaci√≥n que no pausa el programa, que es ``millis()``.

``millis()`` es una funci√≥n muy importante en la programaci√≥n de Arduino. Devuelve el n√∫mero de milisegundos que han pasado desde que la placa de Arduino fue encendida o reiniciada.

  * ``time = millis()``: Devuelve el n√∫mero de milisegundos que han pasado desde que la placa Arduino comenz√≥ a ejecutar el programa actual. Este n√∫mero se desbordar√° (volver√° a cero) despu√©s de aproximadamente 50 d√≠as.

  **Par√°metros**
    Ninguno

  **Devuelve**
    N√∫mero de milisegundos que han pasado desde que comenz√≥ el programa. Tipo de dato: unsigned long.

Aqu√≠, de manera similar, hacemos que el zumbador emita un pitido una vez cada segundo.

1. Abre el IDE de Arduino y comienza un nuevo proyecto seleccionando ‚ÄúNuevo Boceto‚Äù desde el men√∫ ‚ÄúArchivo‚Äù.
2. Guarda tu boceto como ``Lesson20_Timer_Millis`` usando ``Ctrl + S`` o haciendo clic en ‚ÄúGuardar‚Äù.

3. Primero, crea una constante llamada ``buzzerPin`` y as√≠gnale el valor del pin 9.

.. code-block:: Arduino
  :emphasize-lines: 1

  const int buzzerPin = 9;   // Asigna el pin 9 a la constante para el zumbador

  void setup() {
    // Configura tu c√≥digo aqu√≠ para que se ejecute una vez:
  }

4. Crea dos variables de tipo long, ``previousMillis`` almacenar√° la marca de tiempo de la √∫ltima vez que son√≥ el zumbador, y ``interval`` establece con qu√© frecuencia suena el zumbador, en milisegundos. Aqu√≠, se configura para que suene cada 1000 milisegundos (o cada segundo).

.. code-block:: Arduino
  :emphasize-lines: 3,4

  const int buzzerPin = 9;  // Asigna el pin 9 a la constante para el zumbador

  unsigned long previousMillis = 0;  // Almacena la marca de tiempo de la √∫ltima vez que son√≥ el zumbador
  long interval = 1000;              // Intervalo en el que suena (milisegundos)


5. En la funci√≥n ``void setup()``, configura el pin del zumbador como modo de salida.

.. code-block:: Arduino
  :emphasize-lines: 8

  const int buzzerPin = 9;  // Asigna el pin 9 a la constante para el zumbador

  unsigned long previousMillis = 0;  // Almacena la marca de tiempo de la √∫ltima vez que son√≥ el zumbador
  long interval = 1000;              // Intervalo en el que suena (milisegundos)

  void setup() {
    // Configura tu c√≥digo aqu√≠ para que se ejecute una vez:
    pinMode(buzzerPin, OUTPUT);  // Establece el pin 9 como salida
  }

6. En la funci√≥n ``void loop()`` crea una variable de tipo ``unsigned long`` llamada ``currentMillis`` para almacenar el tiempo actual.

.. code-block:: Arduino
  :emphasize-lines: 3

  void loop() {
    // El c√≥digo principal aqu√≠, para ejecutar repetidamente:
    unsigned long currentMillis = millis();
  }

7. Cuando el tiempo actual menos el √∫ltimo tiempo actualizado exceda los 1000 ms, se activar√°n algunas funciones. Adem√°s, actualiza el valor de ``previousMillis`` al tiempo actual, para que la pr√≥xima activaci√≥n ocurra en 1 segundo.

.. code-block:: Arduino
  :emphasize-lines: 5,6

  void loop() {
    // El c√≥digo principal aqu√≠, para ejecutar repetidamente:
    unsigned long currentMillis = millis();

    if (currentMillis - previousMillis >= interval) {
      previousMillis = currentMillis;  // Guarda la √∫ltima vez que son√≥ el zumbador
    }
  }

8. Agrega las funciones principales que necesitan ejecutarse peri√≥dicamente. En este caso, hacer que el zumbador suene.

.. code-block:: Arduino
  :emphasize-lines: 7,8,9

  void loop() {
    // El c√≥digo principal aqu√≠, para ejecutar repetidamente:
    unsigned long currentMillis = millis();

    if (currentMillis - previousMillis >= interval) {
      previousMillis = currentMillis;  // Guarda la √∫ltima vez que son√≥ el zumbador
      digitalWrite(buzzerPin, HIGH);   // Emitir sonido
      delay(100);
      digitalWrite(buzzerPin, LOW);    // Silenciar
    }
  }

9. Tu c√≥digo completo deber√≠a verse as√≠. C√°rgalo en el Arduino Uno R3 y notar√°s que el zumbador emite un pitido una vez cada segundo.

.. code-block:: Arduino

  const int buzzerPin = 9;  // Asigna el pin 9 a la constante para el zumbador

  unsigned long previousMillis = 0;  // Almacena la marca de tiempo de la √∫ltima vez que son√≥ el zumbador
  long interval = 1000;              // Intervalo en el que suena (milisegundos)

  void setup() {
    // Configura tu c√≥digo aqu√≠ para que se ejecute una vez:
    pinMode(buzzerPin, OUTPUT);  // Establece el pin 9 como salida
  }

  void loop() {
    // El c√≥digo principal aqu√≠, para ejecutar repetidamente:
    unsigned long currentMillis = millis();

    if (currentMillis - previousMillis >= interval) {
      previousMillis = currentMillis;  // Guarda la √∫ltima vez que son√≥ el zumbador
      digitalWrite(buzzerPin, HIGH);   // Hacer sonido
      delay(100);
      digitalWrite(buzzerPin, LOW);    // Silencio
    }
  }

**Pregunta**

Si se cambia el ``delay(100);`` a ``delay(1000);``, ¬øqu√© suceder√° con el programa? ¬øPor qu√©?


Creaci√≥n de c√≥digo - Temporizador Pomodoro
-----------------------------------------------

La T√©cnica Pomodoro, tambi√©n conocida como la T√©cnica del Tomate, es un m√©todo de gesti√≥n del tiempo desarrollado por Francesco Cirillo a finales de los a√±os 80.
Este m√©todo utiliza un temporizador para dividir el trabajo en intervalos de 25 minutos, seguidos de descansos breves.
Cada intervalo de trabajo se llama "pomodoro", en honor al temporizador de cocina en forma de tomate que Cirillo utiliz√≥ durante sus a√±os de universidad.

.. image:: img/19_tomato_timer.jpg
  :width: 500
  :align: center

Los pasos b√°sicos de la T√©cnica Pomodoro incluyen:

1. **Definir la tarea**: Decide la tarea que necesitas completar antes de comenzar.
2. **Configurar el temporizador Pomodoro**: Configura un temporizador para 25 minutos de tiempo de trabajo.
3. **Trabajar intensamente**: Conc√©ntrate completamente en la tarea durante esos 25 minutos, evitando cualquier forma de distracci√≥n.
4. **Tomar un descanso breve**: Una vez que el tiempo de trabajo haya terminado, toma un descanso de 5 minutos. Durante este tiempo, puedes caminar, estirarte, beber agua, etc., pero evita actividades relacionadas con el trabajo.

Los beneficios de la T√©cnica Pomodoro incluyen una mayor concentraci√≥n, reducci√≥n de la fatiga, clara delimitaci√≥n de los tiempos de trabajo y descanso, ayudando a gestionar distracciones, y una mayor motivaci√≥n y satisfacci√≥n por completar tareas. Adem√°s, la T√©cnica Pomodoro no requiere herramientas o tecnolog√≠a compleja: un temporizador simple es suficiente.

A continuaci√≥n, programaremos un temporizador que emitir√° un sonido cada 25 minutos para se√±alar el final de un per√≠odo de trabajo, seguido de un recordatorio para un descanso de 5 minutos:

1. Abre el IDE de Arduino y comienza un nuevo proyecto seleccionando ‚ÄúNuevo Boceto‚Äù desde el men√∫ ‚ÄúArchivo‚Äù.
2. Guarda tu boceto como ``Lesson20_Timer_Millis_Pomodoro`` usando ``Ctrl + S`` o haciendo clic en ‚ÄúGuardar‚Äù.

3. Define algunas constantes y variables antes de ``void setup()``.

* ``buzzerPin`` identifica a qu√© pin est√° conectado el zumbador.
* ``startMillis`` lleva el registro de cu√°ndo empez√≥ el temporizador.
* ``workPeriod`` y ``breakPeriod`` definen cu√°nto dura cada per√≠odo.
* ``isWorkPeriod`` es una variable booleana que se usa para rastrear si es hora de trabajar o tomar un descanso.

.. code-block:: Arduino

  const int buzzerPin = 9;          // Asigna el pin 9 a la constante para el zumbador
  unsigned long startMillis;        // Almacena el tiempo cuando empieza el temporizador
  const long workPeriod = 1500000;  // Per√≠odo de trabajo de 25 minutos
  const long breakPeriod = 300000;  // Per√≠odo de descanso de 5 minutos
  static bool isWorkPeriod = true;  // Rastrear si es un per√≠odo de trabajo o descanso


4. Inicializa el pin del zumbador como una salida y comienza el temporizador registrando el tiempo de inicio con ``millis()``.

.. code-block:: Arduino
  :emphasize-lines: 2,3
  
  void setup() {
    pinMode(buzzerPin, OUTPUT); // Inicializa el pin del zumbador como una salida
    startMillis = millis(); // Registra el tiempo de inicio
  }

5. En la funci√≥n ``void loop()``, crea una variable ``unsigned long`` llamada ``currentMillis`` para almacenar el tiempo actual.

.. code-block:: Arduino
  :emphasize-lines: 2

  void loop() {
    unsigned long currentMillis = millis(); // Actualiza el tiempo actual
  }


6. Usa las declaraciones condicionales ``if else if`` para determinar si es un per√≠odo de trabajo.

.. code-block:: Arduino
  :emphasize-lines: 4-6

  void loop() {
    unsigned long currentMillis = millis(); // Actualiza el tiempo actual

    if (isWorkPeriod){ 
    } else if (!isWorkPeriod){
    }
  }

7. Si lo es, verifica si el tiempo actual ha excedido el ``workPeriod``. Si es as√≠, reinicia el temporizador, cambia al per√≠odo de descanso y activa el zumbador para que suene dos veces por una duraci√≥n prolongada.

.. code-block:: Arduino
  :emphasize-lines: 5-16

  void loop() {
    unsigned long currentMillis = millis();  // Actualiza el tiempo actual

    if (isWorkPeriod) {
      if (currentMillis - startMillis >= workPeriod) {
        startMillis = currentMillis;  // Reinicia el temporizador
        isWorkPeriod = false;         // Cambia al per√≠odo de descanso
        digitalWrite(buzzerPin, HIGH);  // Enciende el zumbador
        delay(500);                     // Zumbador encendido por 500 milisegundos
        digitalWrite(buzzerPin, LOW);   // Apaga el zumbador
        delay(200);                     // Zumbador apagado por 200 milisegundos
        digitalWrite(buzzerPin, HIGH);  // Enciende el zumbador
        delay(500);                     // Zumbador encendido por 500 milisegundos
        digitalWrite(buzzerPin, LOW);   // Apaga el zumbador
        delay(200);                     // Zumbador apagado por 200 milisegundos
      }
    } else if (!isWorkPeriod) {
    }
  }

8. Usa las declaraciones condicionales ``else if`` para determinar si es un per√≠odo de descanso y verifica de manera similar si el tiempo actual ha excedido el ``breakPeriod``. Si es as√≠, reinicia el temporizador, cambia nuevamente al per√≠odo de trabajo y activa el zumbador para que suene brevemente dos veces.

.. code-block:: Arduino

  } else if (!isWorkPeriod) {
    if (currentMillis - startMillis >= breakPeriod) {
      startMillis = currentMillis;  // Reinicia el temporizador
      isWorkPeriod = true;          // Cambia al per√≠odo de trabajo
      digitalWrite(buzzerPin, HIGH);  // Enciende el zumbador
      delay(200);                     // Zumbador encendido por 200 milisegundos
      digitalWrite(buzzerPin, LOW);   // Apaga el zumbador
      delay(200);                     // Zumbador apagado por 200 milisegundos
      digitalWrite(buzzerPin, HIGH);  // Enciende el zumbador
      delay(200);                     // Zumbador encendido por 200 milisegundos
      digitalWrite(buzzerPin, LOW);   // Apaga el zumbador
      delay(200);                     // Zumbador apagado por 200 milisegundos
    }
  }


9. Tu c√≥digo completo deber√≠a verse as√≠, y puedes cargarlo en el Arduino Uno R3 para ver los efectos.

.. note::

  Si encuentras que esperar 25 minutos para un per√≠odo de trabajo y 5 minutos para un descanso es demasiado largo durante la depuraci√≥n, 
  puedes acortar ``workPeriod`` a 15000 milisegundos y ``breakPeriod`` a 3000 milisegundos. Entonces escuchar√°s el zumbador sonar dos veces largo cada 15 segundos, seguido de un zumbido corto dos veces despu√©s de 3 segundos.


.. code-block:: Arduino

  const int buzzerPin = 9;          // Asigna el pin 9 a la constante para el zumbador
  unsigned long startMillis;        // Almacena el tiempo cuando comienza el temporizador
  const long workPeriod = 1500000;  // Per√≠odo de trabajo de 25 minutos
  const long breakPeriod = 300000;  // Per√≠odo de descanso de 5 minutos
  static bool isWorkPeriod = true;  // Rastrea si es un per√≠odo de trabajo o descanso

  void setup() {
    pinMode(buzzerPin, OUTPUT); // Inicializa el pin del zumbador como salida
    startMillis = millis(); // Registra el tiempo de inicio
  }

  void loop() {
    unsigned long currentMillis = millis(); // Actualiza el tiempo actual

    if (isWorkPeriod){ 
      if(currentMillis - startMillis >= workPeriod) {
        startMillis = currentMillis; // Reinicia el temporizador
        isWorkPeriod = false; // Cambia al per√≠odo de descanso
        digitalWrite(buzzerPin, HIGH);  // Enciende el zumbador
        delay(500);                     // Zumbador encendido por 500 milisegundos
        digitalWrite(buzzerPin, LOW);   // Apaga el zumbador
        delay(200);                     // Zumbador apagado por 200 milisegundos
        digitalWrite(buzzerPin, HIGH);  // Enciende el zumbador
        delay(500);                     // Zumbador encendido por 500 milisegundos
        digitalWrite(buzzerPin, LOW);   // Apaga el zumbador
        delay(200);                     // Zumbador apagado por 200 milisegundos
      }
    } else if (!isWorkPeriod) 
      if(currentMillis - startMillis >= breakPeriod) {
        startMillis = currentMillis; // Reinicia el temporizador
        isWorkPeriod = true; // Cambia al per√≠odo de trabajo
        digitalWrite(buzzerPin, HIGH);  // Enciende el zumbador
        delay(200);                     // Zumbador encendido por 200 milisegundos
        digitalWrite(buzzerPin, LOW);   // Apaga el zumbador
        delay(200);                     // Zumbador apagado por 200 milisegundos
        digitalWrite(buzzerPin, HIGH);  // Enciende el zumbador
        delay(200);                     // Zumbador encendido por 200 milisegundos
        digitalWrite(buzzerPin, LOW);   // Apaga el zumbador
        delay(200);                     // Zumbador apagado por 200 milisegundos
      }
    }
  }

10. Finalmente, recuerda guardar tu c√≥digo y organizar tu √°rea de trabajo.

**Pregunta**

Piensa en otros lugares en tu vida donde puedas "escuchar" el tiempo. ¬°Haz una lista de algunos ejemplos y an√≥talos en tu cuaderno!


**Resumen**

En la clase de hoy, construimos con √©xito una versi√≥n electr√≥nica del temporizador Pomodoro, una herramienta invaluable para mejorar la productividad mediante per√≠odos de trabajo y descanso estructurados. A trav√©s de este proyecto, los estudiantes aprendieron sobre la utilidad de los zumbadores en la gesti√≥n del tiempo y la aplicaci√≥n pr√°ctica de la funci√≥n ``millis()`` para crear un c√≥digo de temporizador no bloqueante en Arduino. Este enfoque permite la multitarea en aplicaciones de microcontroladores, imitando sistemas m√°s complejos en tecnolog√≠a e industria.


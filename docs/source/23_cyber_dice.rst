.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder sur Facebook ! Plongez plus profond√©ment dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez & Partagez** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et √† des avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et promotions sp√©ciales pendant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

23. D√©s √©lectroniques
=======================

Dans cette le√ßon, nous nous lan√ßons dans un voyage passionnant √† travers deux projets impliquant l'√©lectronique num√©rique et la programmation.

.. image:: img/23_dice.jpg
    :align: center
    :width: 500

Nous allons tout d'abord d√©couvrir le fonctionnement d'un afficheur √† 7 segments et apprendre √† le contr√¥ler pour afficher des chiffres, √©tape par √©tape. Ensuite, nous allons cr√©er un d√© √©lectronique ! En appuyant simplement sur un bouton, un nombre al√©atoire entre 1 et 6 appara√Ætra sur l'afficheur, offrant une touche digitale aux d√©s traditionnels.

.. raw:: html

    <video muted controls style = "max-width:90%">
        <source src="_static/video/23_cycle_dice.mp4" type="video/mp4">
        Votre navigateur ne supporte pas la balise vid√©o.
    </video>

Pendant cette le√ßon, vous apprendrez :

* Les principes de fonctionnement d'un afficheur √† 7 segments et comment le faire fonctionner.
* L'utilisation des instructions switch-case pour simplifier la logique du code.
* Comment utiliser une boucle while pour maintenir l'√©tat actuel jusqu'√† ce qu'un changement soit n√©cessaire.
* Comment construire le projet des D√©s √©lectroniques, en int√©grant de simples composants √©lectroniques avec une programmation interactive pour une application pratique.

L'origine des d√©s
-----------------------

Les d√©s font partie des plus anciens outils de jeu au monde, avec une histoire remontant √† des milliers d'ann√©es avant notre √®re. Ils sont apparus vers 3000 avant J.-C. dans l'√âgypte ancienne, g√©n√©ralement fabriqu√©s √† partir d'os, d'ivoire ou d'autres mat√©riaux naturels. Ces premiers d√©s √©taient souvent irr√©guliers en forme et parfois pas enti√®rement sym√©triques.

.. image:: img/23_dice.png
    :width: 500
    :align: center

Les d√©s ont √©galement √©t√© trouv√©s dans la M√©sopotamie ancienne (actuel Irak) √† la m√™me √©poque. Les devins et les chefs religieux anciens utilisaient les d√©s pour prendre des d√©cisions ou pr√©dire l'avenir, soulignant leur importance dans les rites religieux et mystiques.

Au fil du temps, la forme et les techniques de fabrication des d√©s sont devenues standardis√©es. Au Ier si√®cle avant J.-C., les d√©s √©taient largement utilis√©s dans l'Empire romain, non seulement pour le jeu, mais aussi √† des fins sociales et de divertissement.

En Asie, notamment en Inde, l'utilisation des d√©s est document√©e dans l'√©pop√©e ancienne, le Mahabharata, o√π un jeu de d√©s joue un r√¥le crucial dans l'intrigue.

Pendant la Renaissance, la fabrication des d√©s s'est perfectionn√©e, et les mat√©riaux se sont diversifi√©s pour inclure le bois, l'os, l'ivoire et m√™me le m√©tal. Aujourd'hui, les d√©s ne sont plus seulement des outils de divertissement et de jeu, mais ils sont √©galement utilis√©s dans l'√©ducation, l'aide √† la prise de d√©cision et divers jeux de soci√©t√©. Leur histoire et leur diversit√© refl√®tent l'√©volution de la culture et de la technologie humaines, offrant une fen√™tre fascinante sur l'exploration du hasard et de la chance.

Comprendre l'afficheur √† 7 segments
-------------------------------------------

1. Trouvez un afficheur √† 7 segments. 

Un afficheur √† 7 segments est un composant en forme de 8 qui int√®gre 7 LED. Chacune des LED dans l'afficheur est d√©sign√©e par un segment positionnel avec l'une de ses broches de connexion √©mergeant du bo√Ætier plastique rectangulaire. Ces broches LED sont √©tiquet√©es de "a" √† "g", repr√©sentant chaque LED individuelle. Une broche LED suppl√©mentaire permet √©galement d'indiquer un point d√©cimal (DP) lorsqu'au moins deux afficheurs √† 7 segments sont connect√©s pour afficher des nombres sup√©rieurs √† dix.

.. image:: img/23_7_segment.png
    :width: 300
    :align: center

La broche commune de l'afficheur d√©termine g√©n√©ralement son type. Il existe deux types de connexions de broches : une avec des cathodes connect√©es et une autre avec des anodes connect√©es, indiquant un afficheur √† cathode commune (CC) ou √† anode commune (CA). Comme son nom l'indique, un afficheur CC a toutes les cathodes des 7 LED connect√©es, tandis qu'un afficheur CA a toutes les anodes des 7 segments connect√©es.

.. note::

    Habituellement, il y a une √©tiquette sur le c√¥t√© de l'afficheur √† 7 segments, xxxAx ou xxxBx. En g√©n√©ral, xxxAx signifie cathode commune et xxxBx signifie anode commune. Les afficheurs dans notre kit sont des cathodes communes.

.. image:: img/23_segment_cathode_1.png
    :align: center
    :width: 600

Pour d√©terminer si un afficheur √† 7 segments est une cathode commune ou une anode commune, vous pouvez utiliser un multim√®tre. Vous pouvez √©galement utiliser un multim√®tre pour tester si chaque segment de l'afficheur fonctionne correctement, comme suit :

1. R√©glez le multim√®tre en mode test de diode. Le test de diode est une fonction du multim√®tre utilis√©e pour v√©rifier la conduction directe des diodes ou de dispositifs semi-conducteurs similaires (tels que les LED). Le multim√®tre fait passer un petit courant √† travers la diode. Si la diode est intacte, elle laissera passer le courant.

.. image:: img/multimeter_diode.png
    :width: 300
    :align: center

2. Ins√©rez l'afficheur √† 7 segments dans une plaque d'essai, en notant que le point d√©cimal est en bas √† droite et assurez-vous qu'il traverse l'espace central. Ins√©rez un fil dans la m√™me rang√©e que la broche 1 de l'afficheur et touchez-le avec la pointe rouge du multim√®tre. Ins√©rez un autre fil dans la m√™me rang√©e que toute broche marqu√©e ‚Äú-‚Äù de l'afficheur et touchez-le avec la pointe noire.

.. image:: img/23_7_segment_test.png
    :align: center
    :width: 500

3. Observez si un segment LED s'allume. Si c'est le cas, cela indique que l'afficheur est √† cathode commune. Sinon, inversez les fils rouge et noir ; si un segment s'allume apr√®s inversion, cela indique que l'afficheur est √† anode commune.

4. Si un segment s'allume, r√©f√©rez-vous √† ce sch√©ma pour enregistrer le num√©ro de la broche du segment et sa position approximative dans le tableau du Manuel.

.. image:: img/23_segment_2.png
    :align: center

.. list-table::
    :widths: 20 20 40
    :header-rows: 1

    *   - Broche
        - Num√©ro de segment
        - Position
    *   - 1
        - a
        - Segment sup√©rieur
    *   - 2
        - 
        - 
    *   - 3
        - 
        - 
    *   - 4
        - 
        - 
    *   - 5
        - 
        - 
    *   - 6
        - 
        - 
    *   - 7
        - 
        - 
    *   - 8
        - 
        - 

5. R√©p√©tez les √©tapes ci-dessus, en gardant la pointe noire sur la broche ‚Äú-‚Äù, et connectez la pointe rouge aux autres broches pour identifier les broches de commande correspondant aux segments LED de l'afficheur.


**Question**

D'apr√®s les tests ci-dessus, on sait que l'afficheur dans le kit est √† cathode commune, ce qui signifie que vous devez simplement connecter la broche commune √† la masse (GND) et fournir une haute tension aux autres broches pour allumer les segments correspondants. Si vous voulez que l'afficheur affiche le chiffre 2, quelles broches doivent recevoir une haute tension ? Pourquoi ?

.. image:: img/23_segment_2.png
    :align: center



Construction du circuit
--------------------------------

**Composants n√©cessaires**


.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * Afficheur 7 segments
     - 1 * R√©sistance 220Œ©
     - 1 * R√©sistance 10KŒ©
   * - |list_uno_r3| 
     - |list_7segment| 
     - |list_220ohm| 
     - |list_10kohm| 
   * - 1 * Bouton
     - 1 * Plaque d'essai (Breadboard)
     - Fils de connexion
     - 1 * C√¢ble USB
   * - |list_button| 
     - |list_breadboard| 
     - |list_wire| 
     - |list_usb_cable| 
   * - 1 * Multim√®tre
     - 
     - 
     - 
   * - |list_meter| 
     - 
     - 
     - 


**√âtapes de construction**

Suivez le sch√©ma de c√¢blage ou les √©tapes ci-dessous pour assembler votre circuit.

.. image:: img/23_segment_5v.png
    :align: center
    :width: 500

1. Ins√©rez l'afficheur 7 segments dans la plaque d'essai, avec le point d√©cimal dans le coin inf√©rieur droit.

.. image:: img/23_segment_segment.png
    :align: center
    :width: 500

2. Ins√©rez une extr√©mit√© d'une r√©sistance de 220Œ© dans la broche n√©gative (‚Äú-‚Äù) de l'afficheur 7 segments, et l'autre extr√©mit√© dans le rail n√©gatif de la plaque d'essai. Ensuite, connectez le rail n√©gatif de la plaque d'essai √† la broche GND de l'Arduino Uno R3 avec un fil de connexion.

.. image:: img/23_segment_resistor_gnd.png
    :align: center
    :width: 500

3. Connectez les broches contr√¥lant les segments a, b, c de l'afficheur LED aux broches 2, 3 et 4 de l'Arduino Uno R3.

.. image:: img/23_segment_abc.png
    :align: center
    :width: 500

4. Connectez les broches contr√¥lant les segments d, e, f, g de l'afficheur LED aux broches 5, 6, 7 et 8 de l'Arduino Uno R3.

.. image:: img/23_segment_defg.png
    :align: center
    :width: 500

5. Ins√©rez maintenant un bouton dans la plaque d'essai.

.. image:: img/23_segment_button.png
    :align: center
    :width: 500

6. Connectez la broche inf√©rieure droite du bouton √† la broche 9 de l'Arduino R3 avec un fil.

.. image:: img/23_segment_pin9.png
    :align: center
    :width: 500

7. Connectez une r√©sistance de 10KŒ© au bouton pour que, lorsque le bouton n'est pas enfonc√©, la broche 9 reste √† un niveau bas et ne fluctue pas.

.. image:: img/23_segment_10k_resistor.png
    :align: center
    :width: 500

8. Connectez la broche inf√©rieure gauche du bouton au 5V de l'Arduino Uno R3.

.. image:: img/23_segment_5v.png
    :align: center
    :width: 500

.. list-table::
    :widths: 20 20
    :header-rows: 1

    *   - Afficheur 7 segments
        - Arduino UNO R3
    *   - a
        - 2
    *   - b
        - 3 
    *   - c
        - 4
    *   - d
        - 5
    *   - e
        - 6
    *   - f
        - 7
    *   - g
        - 8


Cr√©ation du code - Affichage des chiffres
-----------------------------------------
1. Ouvrez l'IDE Arduino et d√©marrez un nouveau projet en s√©lectionnant ‚ÄúNew Sketch‚Äù dans le menu ‚ÄúFile‚Äù.
2. Enregistrez votre croquis sous le nom ``Lesson23_Show_Number`` en utilisant ``Ctrl + S`` ou en cliquant sur ‚ÄúSave‚Äù.

3. D√©finissez les broches connect√©es √† l'afficheur 7 segments et configurez toutes les broches comme des sorties.

.. code-block:: Arduino

    // D√©finir les broches connect√©es √† l'afficheur 7 segments
    int pinA = 2;
    int pinB = 3;
    int pinC = 4;
    int pinD = 5;
    int pinE = 6;
    int pinF = 7;
    int pinG = 8;

    void setup() {
        // Configurer toutes les broches comme des sorties
        pinMode(pinA, OUTPUT);
        pinMode(pinB, OUTPUT);
        pinMode(pinC, OUTPUT);
        pinMode(pinD, OUTPUT);
        pinMode(pinE, OUTPUT);
        pinMode(pinF, OUTPUT);
        pinMode(pinG, OUTPUT);
    }

4. √âcrivez maintenant du code pour que l'afficheur 7 segments affiche un chiffre, tel que le chiffre 2. Pour afficher le chiffre 2, r√©glez les segments F et C √† LOW (√©teints) et les autres segments √† HIGH (allum√©s).

.. code-block:: Arduino
  :emphasize-lines: 22-29

    // D√©finir les broches connect√©es √† l'afficheur 7 segments
    int pinA = 2;
    int pinB = 3;
    int pinC = 4;
    int pinD = 5;
    int pinE = 6;
    int pinF = 7;
    int pinG = 8;

    void setup() {
        // Configurer toutes les broches comme des sorties
        pinMode(pinA, OUTPUT);
        pinMode(pinB, OUTPUT);
        pinMode(pinC, OUTPUT);
        pinMode(pinD, OUTPUT);
        pinMode(pinE, OUTPUT);
        pinMode(pinF, OUTPUT);
        pinMode(pinG, OUTPUT);
    }

    void loop() {
        // R√©gler les segments F et C √† LOW (√©teints) et les autres √† HIGH (allum√©s)
        digitalWrite(pinA, HIGH);
        digitalWrite(pinB, HIGH);
        digitalWrite(pinC, LOW);
        digitalWrite(pinD, HIGH);
        digitalWrite(pinE, HIGH);
        digitalWrite(pinF, LOW);
        digitalWrite(pinG, HIGH);
    }

5. Vous pouvez maintenant t√©l√©verser le code sur l'Arduino Uno R3, et vous verrez le chiffre 2 s'afficher sur l'afficheur 7 segments.

6. Si vous avez besoin d'afficher d'autres chiffres, comme de passer de 1 √† 6, utiliser ``digitalWrite()`` pour d√©finir chaque segment rendrait le code tr√®s long et la logique moins claire. Ici, nous utilisons une m√©thode de cr√©ation de fonction.

7. Cr√©ez une fonction avec un param√®tre - ``displayDigit()``, qui √©teint d'abord tous les segments LED de l'afficheur 7 segments.

.. code-block:: Arduino

    void displayDigit(int digit) {
        // √âteindre tous les segments
        digitalWrite(pinA, LOW);
        digitalWrite(pinB, LOW);
        digitalWrite(pinC, LOW);
        digitalWrite(pinD, LOW);
        digitalWrite(pinE, LOW);
        digitalWrite(pinF, LOW);
        digitalWrite(pinG, LOW);
    }

8. Ensuite, contr√¥lez diff√©rents segments LED pour afficher les chiffres. Nous pourrions utiliser des instructions ``if-else``, mais cela pourrait √™tre encombrant. Ainsi, une instruction ``switch`` offre une mani√®re plus claire et organis√©e de choisir parmi plusieurs comportements possibles.

En programmation, une instruction ``switch`` est une structure de contr√¥le utilis√©e pour ex√©cuter diff√©rents segments de code en fonction de la valeur d'une variable.

La syntaxe de base d'une instruction switch est g√©n√©ralement la suivante :

.. code-block:: Arduino

    switch (expression) {
        case value1:
            // code
            break;
        case value2:
            // code
            break;
        default:
            // code
    }

* ``expression`` : Il s'agit d'une expression qui renvoie g√©n√©ralement un entier ou un caract√®re, sur la base duquel l'instruction switch d√©cide quel ``case`` ex√©cuter.
* ``case`` : Chaque mot-cl√© ``case`` est suivi d'une valeur qui peut correspondre au r√©sultat de l'``expression``. Si une correspondance est trouv√©e, le code est ex√©cut√© √† partir de ce point jusqu'√† ce qu'une instruction ``break`` soit rencontr√©e.
* ``break`` : L'instruction ``break`` est utilis√©e pour sortir du bloc ``switch``. Sans ``break``, le programme continuerait √† ex√©cuter le code du cas suivant, qu'il corresponde ou non, ce qui est connu sous le nom de "fall-through".
* ``default`` : La partie ``default`` est optionnelle et est ex√©cut√©e si aucun ``case`` ne correspond, de mani√®re similaire au ``else`` dans une structure ``if-else``.

.. image:: img/23_flow_swtich.png
    :align: center
    :width: 600

9. Utilisez le ``switch-case`` dans la fonction ``displayDigit()`` pour compl√©ter l'affichage des chiffres sur l'afficheur 7 segments. Par exemple, pour afficher le chiffre 1, seuls les segments B et C doivent √™tre allum√©s (HIGH) ; pour afficher le chiffre 2, les segments F et C doivent √™tre √©teints (LOW), tandis que les autres sont allum√©s.

.. code-block:: Arduino

    void displayDigit(int digit) {
        // √âteindre tous les segments
        digitalWrite(pinA, LOW);
        digitalWrite(pinB, LOW);
        digitalWrite(pinC, LOW);
        digitalWrite(pinD, LOW);
        digitalWrite(pinE, LOW);
        digitalWrite(pinF, LOW);
        digitalWrite(pinG, LOW);

        // Activer les segments n√©cessaires pour le chiffre d√©sir√©
        switch (digit) {
            case 1:
                digitalWrite(pinB, HIGH);
                digitalWrite(pinC, HIGH);
                break;
            case 2:
                digitalWrite(pinA, HIGH);
                digitalWrite(pinB, HIGH);
                digitalWrite(pinD, HIGH);
                digitalWrite(pinE, HIGH);
                digitalWrite(pinG, HIGH);
                break;
            case 3:
                digitalWrite(pinA, HIGH);
                digitalWrite(pinB, HIGH);
                digitalWrite(pinC, HIGH);
                digitalWrite(pinD, HIGH);
                digitalWrite(pinG, HIGH);
                break;
            case 4:
                digitalWrite(pinB, HIGH);
                digitalWrite(pinC, HIGH);
                digitalWrite(pinF, HIGH);
                digitalWrite(pinG, HIGH);
                break;
            case 5:
                digitalWrite(pinA, HIGH);
                digitalWrite(pinC, HIGH);
                digitalWrite(pinD, HIGH);
                digitalWrite(pinF, HIGH);
                digitalWrite(pinG, HIGH);
                break;
            case 6:
                digitalWrite(pinA, HIGH);
                digitalWrite(pinC, HIGH);
                digitalWrite(pinD, HIGH);
                digitalWrite(pinE, HIGH);
                digitalWrite(pinF, HIGH);
                digitalWrite(pinG, HIGH);
                break;
        }
    }


10. Vous pouvez maintenant appeler la fonction ``displayDigit()`` dans la fonction ``void loop()`` pour afficher des nombres sp√©cifiques, par exemple en alternant entre 3 et 6 avec un intervalle d'une seconde.

.. code-block:: Arduino

    void loop() {

        displayDigit(3);  // Affiche le chiffre 3 sur l'afficheur 7 segments
        delay(1000);
        displayDigit(6);  // Affiche le chiffre 6 sur l'afficheur 7 segments
        delay(1000);
    }

11. Voici votre code complet. Vous pouvez maintenant t√©l√©verser le code sur l'Arduino Uno R3 et vous verrez l'afficheur 7 segments alterner entre 3 et 6.

.. code-block:: Arduino

    // D√©finir les broches connect√©es √† l'afficheur 7 segments
    int pinA = 2;
    int pinB = 3;
    int pinC = 4;
    int pinD = 5;
    int pinE = 6;
    int pinF = 7;
    int pinG = 8;

    void setup() {
        // Configurer toutes les broches comme sorties
        pinMode(pinA, OUTPUT);
        pinMode(pinB, OUTPUT);
        pinMode(pinC, OUTPUT);
        pinMode(pinD, OUTPUT);
        pinMode(pinE, OUTPUT);
        pinMode(pinF, OUTPUT);
        pinMode(pinG, OUTPUT);
    }

    void loop() {

        displayDigit(3);  // Affiche le chiffre 3 sur l'afficheur 7 segments
        delay(1000);
        displayDigit(6);  // Affiche le chiffre 6 sur l'afficheur 7 segments
        delay(1000);
    }

    void displayDigit(int digit) {
        // √âteindre tous les segments
        digitalWrite(pinA, LOW);
        digitalWrite(pinB, LOW);
        digitalWrite(pinC, LOW);
        digitalWrite(pinD, LOW);
        digitalWrite(pinE, LOW);
        digitalWrite(pinF, LOW);
        digitalWrite(pinG, LOW);

        // Activer les segments n√©cessaires pour afficher le chiffre (HIGH active les segments pour le cathode commun)
        switch (digit) {
            case 1:
                digitalWrite(pinB, HIGH);
                digitalWrite(pinC, HIGH);
                break;
            case 2:
                digitalWrite(pinA, HIGH);
                digitalWrite(pinB, HIGH);
                digitalWrite(pinD, HIGH);
                digitalWrite(pinE, HIGH);
                digitalWrite(pinG, HIGH);
                break;
            case 3:
                digitalWrite(pinA, HIGH);
                digitalWrite(pinB, HIGH);
                digitalWrite(pinC, HIGH);
                digitalWrite(pinD, HIGH);
                digitalWrite(pinG, HIGH);
                break;
            case 4:
                digitalWrite(pinB, HIGH);
                digitalWrite(pinC, HIGH);
                digitalWrite(pinF, HIGH);
                digitalWrite(pinG, HIGH);
                break;
            case 5:
                digitalWrite(pinA, HIGH);
                digitalWrite(pinC, HIGH);
                digitalWrite(pinD, HIGH);
                digitalWrite(pinF, HIGH);
                digitalWrite(pinG, HIGH);
                break;
            case 6:
                digitalWrite(pinA, HIGH);
                digitalWrite(pinC, HIGH);
                digitalWrite(pinD, HIGH);
                digitalWrite(pinE, HIGH);
                digitalWrite(pinF, HIGH);
                digitalWrite(pinG, HIGH);
                break;
        }
    }

Cr√©ation du code - Cyber Dice
-------------------------------------
Maintenant que nous savons comment afficher les chiffres de 1 √† 6 sur l'afficheur 7 segments, comment pouvons-nous r√©aliser l'effet d'un Cyber Dice ?

Cela implique d'appuyer sur un bouton pour faire d√©filer les chiffres de 1 √† 6 et de rel√¢cher le bouton pour afficher un nombre fixe. Voyons comment nous pouvons y parvenir avec du code.

1. Ouvrez le croquis que vous avez sauvegard√© pr√©c√©demment, ``Lesson23_Show_Number``.

2. S√©lectionnez ‚ÄúSave As...‚Äù dans le menu ‚ÄúFile‚Äù et renommez-le ``Lesson23_Cyber_Dice``. Cliquez sur "Save".

3. D√©finissez la broche du bouton et configurez-la en tant qu'entr√©e.

.. code-block:: Arduino
    :emphasize-lines: 10-11,23-24

    // D√©finir les broches connect√©es aux segments de l'afficheur 7 segments
    int pinA = 2;
    int pinB = 3;
    int pinC = 4;
    int pinD = 5;
    int pinE = 6;
    int pinF = 7;
    int pinG = 8;

    // D√©finir la broche connect√©e au bouton
    int buttonPin = 9;

    void setup() {
        // Configurer toutes les broches comme sorties
        pinMode(pinA, OUTPUT);
        pinMode(pinB, OUTPUT);
        pinMode(pinC, OUTPUT);
        pinMode(pinD, OUTPUT);
        pinMode(pinE, OUTPUT);
        pinMode(pinF, OUTPUT);
        pinMode(pinG, OUTPUT);

        // Configurer la broche du bouton comme entr√©e
        pinMode(buttonPin, INPUT);
    }

4. V√©rifiez si le bouton est press√© au moment o√π la fonction ``void loop()`` s'ex√©cute. Si le bouton n'est pas press√©, le code √† l'int√©rieur du bloc ``if`` est ignor√©.

.. code-block:: Arduino
    :emphasize-lines: 3,4

    void loop() {
        // V√©rifier si le bouton est press√©
        if (digitalRead(buttonPin) == HIGH) {
        }
    }

5. Dans la programmation avec Arduino ou d'autres microcontr√¥leurs, un probl√®me courant lors de la gestion des entr√©es de boutons est de s'assurer que chaque pression d√©clenche une seule action, notamment lors de la g√©n√©ration d'√©v√©nements ou de commandes (comme la g√©n√©ration d'un nombre al√©atoire). Pour r√©soudre ce probl√®me, nous pouvons utiliser une technique appel√©e "attente de rel√¢chement".

**attente de rel√¢chement**

L'id√©e centrale de cette m√©thode est qu'apr√®s avoir appuy√© sur un bouton et ex√©cut√© une action, le programme entre dans une boucle qui continue de surveiller l'√©tat du bouton jusqu'√† ce qu'il soit rel√¢ch√©. Cela permet d'√©viter que des actions suppl√©mentaires ne soient d√©clench√©es √† cause de rebonds du bouton ou du fait que l'utilisateur maintient le bouton enfonc√©.

Nous pouvons impl√©menter cela avec une boucle ``while`` dans le code.

.. image:: img/while_loop.png
    :width: 400
    :align: center

.. code-block:: Arduino
    :emphasize-lines: 4-6

    void loop() {
        // V√©rifiez si le bouton est press√©
        if (digitalRead(buttonPin) == HIGH) {
            // Attendre que le bouton soit rel√¢ch√© avant de continuer
            while (digitalRead(buttonPin) == HIGH) {
            }
        }
    }

6. Maintenant, utilisez la fonction ``random()`` pour g√©n√©rer un nombre al√©atoire entre 1 et 6, et utilisez ``displayDigit()`` pour afficher ce nombre sur l'afficheur 7 segments. Vous verrez l'afficheur d√©filer rapidement √† travers diff√©rents nombres tant que le bouton est maintenu enfonc√©.

.. code-block:: Arduino
    :emphasize-lines: 6-12

    void loop() {
        // V√©rifiez si le bouton est press√©
        if (digitalRead(buttonPin) == HIGH) {
            // Attendre que le bouton soit rel√¢ch√© avant de continuer
            while (digitalRead(buttonPin) == HIGH) {
                // G√©n√©rer un nombre al√©atoire entre 1 et 6
                int num = random(1, 7);
                
                // Afficher le nombre al√©atoire sur l'afficheur 7 segments
                displayDigit(num);
                // Pause pour permettre une mise √† jour visible de l'afficheur
                delay(100);
            }
        }
    }

7. Enfin, ajoutez un d√©lai pour anti-rebond afin d'√©viter les entr√©es rapides multiples.

.. code-block:: Arduino
    :emphasize-lines: 15

    void loop() {
        // V√©rifiez si le bouton est press√©
        if (digitalRead(buttonPin) == HIGH) {
            // Attendre que le bouton soit rel√¢ch√© avant de continuer
            while (digitalRead(buttonPin) == HIGH) {
                // G√©n√©rer un nombre al√©atoire entre 1 et 6
                int num = random(1, 7);
                
                // Afficher le nombre al√©atoire sur l'afficheur 7 segments
                displayDigit(num);
                // Pause pour permettre une mise √† jour visible de l'afficheur
                delay(100);
            }
            // Ajouter un d√©lai pour anti-rebond et √©viter les entr√©es rapides multiples
            delay(500);
        }
    }

8. Votre code complet devrait ressembler √† ceci, et vous pouvez maintenant t√©l√©verser le code sur l'Arduino Uno R3. Une fois le code t√©l√©vers√©, si vous maintenez le bouton enfonc√©, les nombres sur l'afficheur d√©fileront rapidement, et en le rel√¢chant, un nombre sera affich√©.

.. code-block:: Arduino

    // D√©finir les broches connect√©es aux segments de l'afficheur 7 segments
    int pinA = 2;
    int pinB = 3;
    int pinC = 4;
    int pinD = 5;
    int pinE = 6;
    int pinF = 7;
    int pinG = 8;

    // D√©finir la broche connect√©e au bouton
    int buttonPin = 9;

    void setup() {
        // Configurer toutes les broches comme sorties
        pinMode(pinA, OUTPUT);
        pinMode(pinB, OUTPUT);
        pinMode(pinC, OUTPUT);
        pinMode(pinD, OUTPUT);
        pinMode(pinE, OUTPUT);
        pinMode(pinF, OUTPUT);
        pinMode(pinG, OUTPUT);

        // Configurer la broche du bouton comme entr√©e
        pinMode(buttonPin, INPUT);
    }

    void loop() {
        // V√©rifiez si le bouton est press√©
        if (digitalRead(buttonPin) == HIGH) {
            // Attendre que le bouton soit rel√¢ch√© avant de continuer
            while (digitalRead(buttonPin) == HIGH) {
                // G√©n√©rer un nombre al√©atoire entre 1 et 6
                int num = random(1, 7);

                // Afficher le nombre al√©atoire sur l'afficheur 7 segments
                displayDigit(num);
                // Pause pour permettre une mise √† jour visible de l'afficheur
                delay(100);
            }
            // Ajouter un d√©lai pour anti-rebond et √©viter les entr√©es rapides multiples
            delay(500);
        }
    }

    void displayDigit(int digit) {
        // √âteindre tous les segments
        digitalWrite(pinA, LOW);
        digitalWrite(pinB, LOW);
        digitalWrite(pinC, LOW);
        digitalWrite(pinD, LOW);
        digitalWrite(pinE, LOW);
        digitalWrite(pinF, LOW);
        digitalWrite(pinG, LOW);

        // Allumer les segments n√©cessaires pour afficher le chiffre (LOW active les segments pour le cathode commun)
        switch (digit) {
            case 1:
            digitalWrite(pinB, HIGH);
            digitalWrite(pinC, HIGH);
            break;
            case 2:
            digitalWrite(pinA, HIGH);
            digitalWrite(pinB, HIGH);
            digitalWrite(pinD, HIGH);
            digitalWrite(pinE, HIGH);
            digitalWrite(pinG, HIGH);
            break;
            case 3:
            digitalWrite(pinA, HIGH);
            digitalWrite(pinB, HIGH);
            digitalWrite(pinC, HIGH);
            digitalWrite(pinD, HIGH);
            digitalWrite(pinG, HIGH);
            break;
            case 4:
            digitalWrite(pinB, HIGH);
            digitalWrite(pinC, HIGH);
            digitalWrite(pinF, HIGH);
            digitalWrite(pinG, HIGH);
            break;
            case 5:
            digitalWrite(pinA, HIGH);
            digitalWrite(pinC, HIGH);
            digitalWrite(pinD, HIGH);
            digitalWrite(pinF, HIGH);
            digitalWrite(pinG, HIGH);
            break;
            case 6:
            digitalWrite(pinA, HIGH);
            digitalWrite(pinC, HIGH);
            digitalWrite(pinD, HIGH);
            digitalWrite(pinE, HIGH);
            digitalWrite(pinF, HIGH);
            digitalWrite(pinG, HIGH);
            break;
        }
    }

9. Enfin, n'oubliez pas de sauvegarder votre code et de ranger votre espace de travail.


**R√©sum√©**

Dans cette le√ßon, nous avons compl√©t√© avec succ√®s le projet Cyber Dice, vous permettant de participer √† des comp√©titions amicales avec vos amis pour voir qui peut obtenir le nombre le plus √©lev√©. Tout au long de cette le√ßon, nous avons explor√© le fonctionnement d'un afficheur 7 segments, appris √† le contr√¥ler efficacement. Nous avons simplifi√© notre code √† l'aide des instructions switch-case, am√©liorant ainsi la lisibilit√© et l'efficacit√©.

De plus, nous avons mis en place une logique pour contr√¥ler l'affichage des nombres al√©atoires sur l'afficheur 7 segments en fonction de l'√©tat d'une pression de bouton, ajoutant ainsi une interaction dynamique √† notre projet. Cette exp√©rience pratique vous familiarise non seulement avec des composants √©lectroniques de base et des strat√©gies de codage, mais illustre √©galement des applications pratiques de ces comp√©tences dans la cr√©ation de projets interactifs et engageants.


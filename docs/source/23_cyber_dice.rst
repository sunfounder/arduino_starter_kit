.. note::

    ¬°Hola! Bienvenido a la comunidad de entusiastas de SunFounder Raspberry Pi & Arduino & ESP32 en Facebook. Sum√©rgete m√°s profundamente en Raspberry Pi, Arduino y ESP32 junto con otros entusiastas.

    **¬øPor qu√© unirte?**

    - **Soporte experto**: Resuelve problemas post-venta y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Preestrenos exclusivos**: Obt√©n acceso anticipado a anuncios de nuevos productos y adelantos exclusivos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones festivas y sorteos**: Participa en sorteos y promociones especiales durante las festividades.

    üëâ ¬øListo para explorar y crear con nosotros? ¬°Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo!

23. Dado Cibern√©tico
========================

En esta lecci√≥n, emprenderemos un emocionante viaje a trav√©s de dos proyectos que combinan electr√≥nica digital y programaci√≥n.

.. image:: img/23_dice.jpg
    :align: center
    :width: 500

Primero, exploraremos el funcionamiento de una pantalla de 7 segmentos, aprendiendo c√≥mo controlarla para mostrar n√∫meros paso a paso. Luego, crearemos un dado electr√≥nico: simplemente presionando un bot√≥n, aparecer√° un n√∫mero aleatorio del 1 al 6 en la pantalla de 7 segmentos, ofreciendo una versi√≥n digital del dado tradicional.

.. raw:: html

    <video muted controls style = "max-width:90%">
        <source src="_static/video/23_cycle_dice.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

Durante esta lecci√≥n, aprender√°s:

* Los principios de c√≥mo funciona una pantalla de 7 segmentos y c√≥mo hacerla funcionar.
* El uso de declaraciones switch-case para simplificar la l√≥gica del c√≥digo.
* C√≥mo utilizar un bucle while para mantener el estado actual hasta que sea necesario un cambio.
* C√≥mo construir el proyecto Dado Cibern√©tico, integrando electr√≥nica simple con programaci√≥n interactiva para una aplicaci√≥n pr√°ctica.

El origen de los dados
---------------------------

Los dados son una de las herramientas de juego m√°s antiguas del mundo, con una historia que se remonta a miles de a√±os antes de la era com√∫n. Se originaron alrededor del 3000 a.C. en el antiguo Egipto, y sol√≠an estar hechos de huesos, marfil u otros materiales naturales. Estos primeros dados a menudo eran de formas irregulares y no siempre completamente sim√©tricos.

.. image:: img/23_dice.png
    :width: 500
    :align: center

Tambi√©n se encontraron dados en la antigua Mesopotamia (actual Irak) alrededor de la misma √©poca. Los adivinos y l√≠deres religiosos antiguos utilizaban dados para tomar decisiones o predecir el futuro, lo que resalta su importancia en ritos religiosos y m√≠sticos.

Con el tiempo, la forma y las t√©cnicas de fabricaci√≥n de los dados se estandarizaron. Para el siglo I a.C., los dados se usaban ampliamente en el Imperio Romano, no solo para juegos de azar, sino tambi√©n para fines sociales y de entretenimiento.

En Asia, especialmente en la India, el uso de dados se documenta en la antigua epopeya Mahabharata, donde un juego de dados desempe√±a un papel crucial en la trama.

Durante el Renacimiento, la producci√≥n de dados se refin√≥ y los materiales se diversificaron para incluir madera, hueso, marfil e incluso metal. Hoy en d√≠a, los dados no solo se utilizan en juegos de entretenimiento y apuestas, sino tambi√©n en educaci√≥n, apoyo a la toma de decisiones y en diversos juegos de mesa. Su historia y diversidad reflejan la evoluci√≥n de la cultura y la tecnolog√≠a humanas, ofreciendo una ventana fascinante a la exploraci√≥n del azar y la suerte.



Comprendiendo la pantalla de 7 segmentos
----------------------------------------------

1. Encuentra una pantalla de 7 segmentos.

Una pantalla de 7 segmentos es un componente con forma de "8" que contiene 7 LED. Cada uno de los LED en la pantalla tiene un segmento posicional y un pin de conexi√≥n que sobresale del paquete pl√°stico rectangular. Estos pines LED est√°n etiquetados de la "a" a la "g", representando cada LED individual.
Los otros pines LED est√°n conectados formando un pin com√∫n. Un octavo LED adicional se utiliza dentro del mismo paquete, lo que permite indicar un punto decimal (DP) cuando dos o m√°s pantallas de 7 segmentos est√°n conectadas para mostrar n√∫meros mayores de diez.

.. image:: img/23_7_segment.png
    :width: 300
    :align: center

El pin com√∫n de la pantalla generalmente indica su tipo. Hay dos tipos de conexiones de pines: una con c√°todos conectados y otra con √°nodos conectados, lo que indica C√°todo Com√∫n (CC) y √Ånodo Com√∫n (CA). Como su nombre indica, una pantalla CC tiene todos los c√°todos de los 7 LED conectados, mientras que una pantalla CA tiene todos los √°nodos de los 7 segmentos conectados.

.. note::

    Normalmente, hay una etiqueta en el lateral de la pantalla de 7 segmentos, xxxAx o xxxBx. Generalmente, xxxAx significa c√°todo com√∫n y xxxBx significa √°nodo com√∫n. Las pantallas de nuestro kit son de c√°todo com√∫n.

.. image:: img/23_segment_cathode_1.png
    :align: center
    :width: 600

Para determinar si una pantalla de 7 segmentos es de c√°todo com√∫n o de √°nodo com√∫n, puedes utilizar un mult√≠metro. Tambi√©n puedes usar un mult√≠metro para probar si cada segmento de la pantalla funciona correctamente, de la siguiente manera:

1. Configura el mult√≠metro en modo de prueba de diodos. La prueba de diodos es una funci√≥n del mult√≠metro que se utiliza para verificar la conducci√≥n directa de diodos u otros dispositivos semiconductores similares (como los LED). El mult√≠metro pasa una peque√±a corriente a trav√©s del diodo. Si el diodo est√° intacto, permitir√° que la corriente pase.

.. image:: img/multimeter_diode.png
    :width: 300
    :align: center

2. Inserta la pantalla de 7 segmentos en una placa de pruebas, asegur√°ndote de que el punto decimal est√© en la parte inferior derecha y de que se extienda a trav√©s del espacio central. Inserta un cable en la misma fila que el pin 1 de la pantalla y t√≥cala con la punta roja del mult√≠metro. Inserta otro cable en la misma fila que cualquier pin marcado con "-" de la pantalla y t√≥cala con la punta negra.

.. image:: img/23_7_segment_test.png
    :align: center
    :width: 500

3. Observa si alg√∫n segmento LED se enciende. Si es as√≠, indica que la pantalla es de c√°todo com√∫n. Si no, intercambia las puntas roja y negra; si un segmento se ilumina despu√©s de cambiarlas, indica que la pantalla es de √°nodo com√∫n.

4. Si un segmento se ilumina, consulta este diagrama para registrar el n√∫mero de pin del segmento y su posici√≥n aproximada en la tabla del manual.

.. image:: img/23_segment_2.png
    :align: center

.. list-table::
    :widths: 20 20 40
    :header-rows: 1

    *   - Pin
        - Segment Number
        - Position
    *   - 1
        - a
        - The top segment
    *   - 2
        -
        -
    *   - 3
        -
        -
    *   - 4
        -
        -
    *   - 5
        -
        -
    *   - 6
        -
        -
    *   - 7
        -
        -
    *   - 8
        -
        -     

5. Repite los pasos anteriores, manteniendo la punta negra en el pin "-" y conectando la punta roja a los dem√°s pines para encontrar los pines de control correspondientes a los segmentos LED de la pantalla.


**Pregunta**

En las pruebas anteriores, se ha determinado que la pantalla del kit es de c√°todo com√∫n, lo que significa que solo necesitas conectar el pin com√∫n a GND y proporcionar un voltaje alto a los dem√°s pines para encender los segmentos correspondientes. Si deseas que la pantalla muestre el n√∫mero 2, ¬øa qu√© pines deber√≠as proporcionar un voltaje alto? ¬øPor qu√©?

.. image:: img/23_segment_2.png
    :align: center


Construyendo el Circuito
--------------------------------

**Componentes necesarios**

.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * Pantalla de 7 segmentos
     - 1 * Resistor de 220Œ©
     - 1 * Resistor de 10KŒ©
   * - |list_uno_r3| 
     - |list_7segment| 
     - |list_220ohm| 
     - |list_10kohm| 
   * - 1 * Bot√≥n
     - 1 * Placa de pruebas
     - Cables de puente
     - 1 * Cable USB
   * - |list_button| 
     - |list_breadboard| 
     - |list_wire| 
     - |list_usb_cable| 
   * - 1 * Mult√≠metro
     - 
     - 
     - 
   * - |list_meter| 
     - 
     - 
     - 



**Paso a paso**

Sigue el diagrama de cableado o los siguientes pasos para construir tu circuito.

.. image:: img/23_segment_5v.png
    :align: center
    :width: 500

1. Inserta la pantalla de 7 segmentos en la placa de pruebas con el punto decimal en la esquina inferior derecha.

.. image:: img/23_segment_segment.png
    :align: center
    :width: 500

2. Inserta un extremo de una resistencia de 220Œ© en el terminal negativo (‚Äú-‚Äù) de la pantalla de 7 segmentos y el otro extremo en el riel negativo de la placa de pruebas. Luego, conecta el riel negativo de la placa de pruebas al pin GND del Arduino Uno R3 con un cable de puente.

.. image:: img/23_segment_resistor_gnd.png
    :align: center
    :width: 500

3. Conecta los pines que controlan los segmentos a, b y c del LED a los pines 2, 3 y 4 del Arduino Uno R3.

.. image:: img/23_segment_abc.png
    :align: center
    :width: 500

4. Conecta los pines que controlan los segmentos d, e, f y g del LED a los pines 5, 6, 7 y 8 del Arduino Uno R3.

.. image:: img/23_segment_defg.png
    :align: center
    :width: 500

5. Ahora inserta un bot√≥n en la placa de pruebas.

.. image:: img/23_segment_button.png
    :align: center
    :width: 500

6. Conecta el pin inferior derecho del bot√≥n al pin 9 del R3 con un cable.

.. image:: img/23_segment_pin9.png
    :align: center
    :width: 500

7. Conecta una resistencia de pull-down de 10K al bot√≥n para que cuando el bot√≥n no est√© presionado, el pin 9 permanezca en nivel bajo y no rebote.

.. image:: img/23_segment_10k_resistor.png
    :align: center
    :width: 500

8. Conecta el pin inferior izquierdo del bot√≥n al pin de 5V del Arduino Uno R3.

.. image:: img/23_segment_5v.png
    :align: center
    :width: 500

.. list-table::
    :widths: 20 20
    :header-rows: 1

    *   - Pantalla de 7 segmentos
        - Arduino UNO R3
    *   - a
        - 2
    *   - b
        - 3
    *   - c
        - 4
    *   - d
        - 5
    *   - e
        - 6
    *   - f
        - 7
    *   - g
        - 8


Creaci√≥n de c√≥digo - Mostrando n√∫meros
------------------------------------------
1. Abre el IDE de Arduino y comienza un nuevo proyecto seleccionando "Nuevo boceto" desde el men√∫ "Archivo".
2. Guarda tu boceto como ``Lesson23_Show_Number`` usando ``Ctrl + S`` o haciendo clic en ‚ÄúGuardar‚Äù.

3. Define los pines conectados a la pantalla de 7 segmentos y configura todos los pines como salidas.

.. code-block:: Arduino

    // Definir los pines conectados a la pantalla de 7 segmentos
    int pinA = 2;
    int pinB = 3;
    int pinC = 4;
    int pinD = 5;
    int pinE = 6;
    int pinF = 7;
    int pinG = 8;

    void setup() {
        // Configurar todos los pines como salidas
        pinMode(pinA, OUTPUT);
        pinMode(pinB, OUTPUT);
        pinMode(pinC, OUTPUT);
        pinMode(pinD, OUTPUT);
        pinMode(pinE, OUTPUT);
        pinMode(pinF, OUTPUT);
        pinMode(pinG, OUTPUT);
    }

4. Ahora escribe el c√≥digo para que la pantalla de 7 segmentos muestre un n√∫mero, como el n√∫mero 2. Para mostrar el n√∫mero 2, configura los segmentos F y C en LOW (apagado), y los dem√°s segmentos en HIGH (encendido).

.. code-block:: Arduino
  :emphasize-lines: 22-29

    // Definir los pines conectados a la pantalla de 7 segmentos
    int pinA = 2;
    int pinB = 3;
    int pinC = 4;
    int pinD = 5;
    int pinE = 6;
    int pinF = 7;
    int pinG = 8;

    void setup() {
        // Configurar todos los pines como salidas
        pinMode(pinA, OUTPUT);
        pinMode(pinB, OUTPUT);
        pinMode(pinC, OUTPUT);
        pinMode(pinD, OUTPUT);
        pinMode(pinE, OUTPUT);
        pinMode(pinF, OUTPUT);
        pinMode(pinG, OUTPUT);
    }

    void loop() {
        // Configurar los segmentos F y C en LOW (apagado), y otros segmentos en HIGH (encendido)
        digitalWrite(pinA, HIGH);
        digitalWrite(pinB, HIGH);
        digitalWrite(pinC, LOW);
        digitalWrite(pinD, HIGH);
        digitalWrite(pinE, HIGH);
        digitalWrite(pinF, LOW);
        digitalWrite(pinG, HIGH);
    }

5. Ahora puedes cargar el c√≥digo en el Arduino Uno R3, y ver√°s el n√∫mero 2 mostrado en la pantalla de 7 segmentos.

6. Si necesitas mostrar otros n√∫meros, como recorrer del 1 al 6, usar ``digitalWrite()`` para configurar cada segmento har√≠a que el c√≥digo fuera muy largo y la l√≥gica menos clara. Aqu√≠ utilizamos un m√©todo de creaci√≥n de funciones en su lugar.

7. Crea una funci√≥n con un par√°metro: ``displayDigit()``, que primero apaga todos los segmentos LED de la pantalla de 7 segmentos.

.. code-block:: Arduino

    void displayDigit(int digit) {
        // Apagar todos los segmentos
        digitalWrite(pinA, LOW);
        digitalWrite(pinB, LOW);
        digitalWrite(pinC, LOW);
        digitalWrite(pinD, LOW);
        digitalWrite(pinE, LOW);
        digitalWrite(pinF, LOW);
        digitalWrite(pinG, LOW);
    }

8. A continuaci√≥n, controla diferentes segmentos LED para mostrar n√∫meros. Aqu√≠ podr√≠amos usar sentencias ``if-else``, pero eso podr√≠a ser engorroso. Por lo tanto, una declaraci√≥n ``switch`` proporciona una forma m√°s clara y organizada de elegir entre m√∫ltiples comportamientos posibles que varias sentencias ``if-else``.

En programaci√≥n, una declaraci√≥n ``switch`` es una estructura de control que se usa para ejecutar diferentes segmentos de c√≥digo seg√∫n el valor de una variable.

La sintaxis b√°sica de una declaraci√≥n ``switch`` es la siguiente:

.. code-block:: Arduino

    switch (expression) {
        case value1:
            // c√≥digo
            break;
        case value2:
            // c√≥digo
            break;
        default:
            // c√≥digo
    }

* ``expression``: Esta es una expresi√≥n que generalmente devuelve un entero o car√°cter, con base en lo cual la declaraci√≥n ``switch`` decide qu√© ``case`` ejecutar.
* ``case``: Cada palabra clave ``case`` est√° seguida por un valor que puede coincidir con el resultado de ``expression``. Si se encuentra una coincidencia, el c√≥digo se ejecuta desde este punto hasta encontrar una sentencia ``break``.
* ``break``: La sentencia ``break`` se usa para salir del bloque ``switch``. Sin ella, el programa continuar√≠a ejecutando el c√≥digo del siguiente caso, independientemente de su coincidencia, lo que se conoce como "fall-through".
* ``default``: La parte ``default`` es opcional y se ejecuta si ning√∫n ``case`` coincide, similar a ``else`` en una estructura ``if-else``.

.. image:: img/23_flow_swtich.png
    :align: center
    :width: 600

9. Usa ``switch-case`` en la funci√≥n ``displayDigit()`` para completar la visualizaci√≥n de n√∫meros en la pantalla de 7 segmentos. Por ejemplo, para mostrar el 1, solo se necesitan los segmentos B y C en alto; para mostrar el 2, los segmentos F y C deben estar en bajo, mientras que los dem√°s en alto.

.. code-block:: Arduino

    void displayDigit(int digit) {
        // Apagar todos los segmentos
        digitalWrite(pinA, LOW);
        digitalWrite(pinB, LOW);
        digitalWrite(pinC, LOW);
        digitalWrite(pinD, LOW);
        digitalWrite(pinE, LOW);
        digitalWrite(pinF, LOW);
        digitalWrite(pinG, LOW);

        // Configurar en HIGH para encender los segmentos necesarios para el n√∫mero deseado
        switch (digit) {
            case 1:
                digitalWrite(pinB, HIGH);
                digitalWrite(pinC, HIGH);
                break;
            case 2:
                digitalWrite(pinA, HIGH);
                digitalWrite(pinB, HIGH);
                digitalWrite(pinD, HIGH);
                digitalWrite(pinE, HIGH);
                digitalWrite(pinG, HIGH);
                break;
            case 3:
                digitalWrite(pinA, HIGH);
                digitalWrite(pinB, HIGH);
                digitalWrite(pinC, HIGH);
                digitalWrite(pinD, HIGH);
                digitalWrite(pinG, HIGH);
                break;
            case 4:
                digitalWrite(pinB, HIGH);
                digitalWrite(pinC, HIGH);
                digitalWrite(pinF, HIGH);
                digitalWrite(pinG, HIGH);
                break;
            case 5:
                digitalWrite(pinA, HIGH);
                digitalWrite(pinC, HIGH);
                digitalWrite(pinD, HIGH);
                digitalWrite(pinF, HIGH);
                digitalWrite(pinG, HIGH);
                break;
            case 6:
                digitalWrite(pinA, HIGH);
                digitalWrite(pinC, HIGH);
                digitalWrite(pinD, HIGH);
                digitalWrite(pinE, HIGH);
                digitalWrite(pinF, HIGH);
                digitalWrite(pinG, HIGH);
                break;
        }
    }

10. Ahora puedes llamar a ``displayDigit()`` en la funci√≥n ``void loop()`` para mostrar n√∫meros espec√≠ficos, como alternar entre 3 y 6 con un intervalo de un segundo.

.. code-block:: Arduino

    void loop() {

        displayDigit(3);  // Mostrar el n√∫mero 3 en la pantalla de 7 segmentos
        delay(1000);
        displayDigit(6);  // Mostrar el n√∫mero 6 en la pantalla de 7 segmentos
        delay(1000);
    }

11. A continuaci√≥n se muestra tu c√≥digo completo. Ahora puedes cargar el c√≥digo en el Arduino Uno R3, y ver√°s que la pantalla de 7 segmentos alterna entre los n√∫meros 3 y 6.

.. code-block:: Arduino

    // Definir los pines conectados a la pantalla de 7 segmentos
    int pinA = 2;
    int pinB = 3;
    int pinC = 4;
    int pinD = 5;
    int pinE = 6;
    int pinF = 7;
    int pinG = 8;

    void setup() {
        // Configurar todos los pines como salidas
        pinMode(pinA, OUTPUT);
        pinMode(pinB, OUTPUT);
        pinMode(pinC, OUTPUT);
        pinMode(pinD, OUTPUT);
        pinMode(pinE, OUTPUT);
        pinMode(pinF, OUTPUT);
        pinMode(pinG, OUTPUT);
    }

    void loop() {

        displayDigit(3);  // Mostrar el n√∫mero 3 en la pantalla de 7 segmentos
        delay(1000);
        displayDigit(6);  // Mostrar el n√∫mero 6 en la pantalla de 7 segmentos
        delay(1000);
    }

    void displayDigit(int digit) {
        // Apagar todos los segmentos
        digitalWrite(pinA, LOW);
        digitalWrite(pinB, LOW);
        digitalWrite(pinC, LOW);
        digitalWrite(pinD, LOW);
        digitalWrite(pinE, LOW);
        digitalWrite(pinF, LOW);
        digitalWrite(pinG, LOW);

        // Encender los segmentos necesarios para el n√∫mero deseado (HIGH enciende los segmentos para c√°todo com√∫n)
        switch (digit) {
            case 1:
                digitalWrite(pinB, HIGH);
                digitalWrite(pinC, HIGH);
                break;
            case 2:
                digitalWrite(pinA, HIGH);
                digitalWrite(pinB, HIGH);
                digitalWrite(pinD, HIGH);
                digitalWrite(pinE, HIGH);
                digitalWrite(pinG, HIGH);
                break;
            case 3:
                digitalWrite(pinA, HIGH);
                digitalWrite(pinB, HIGH);
                digitalWrite(pinC, HIGH);
                digitalWrite(pinD, HIGH);
                digitalWrite(pinG, HIGH);
                break;
            case 4:
                digitalWrite(pinB, HIGH);
                digitalWrite(pinC, HIGH);
                digitalWrite(pinF, HIGH);
                digitalWrite(pinG, HIGH);
                break;
            case 5:
                digitalWrite(pinA, HIGH);
                digitalWrite(pinC, HIGH);
                digitalWrite(pinD, HIGH);
                digitalWrite(pinF, HIGH);
                digitalWrite(pinG, HIGH);
                break;
            case 6:
                digitalWrite(pinA, HIGH);
                digitalWrite(pinC, HIGH);
                digitalWrite(pinD, HIGH);
                digitalWrite(pinE, HIGH);
                digitalWrite(pinF, HIGH);
                digitalWrite(pinG, HIGH);
                break;
        }
    }

Creaci√≥n del C√≥digo - Cyber Dice
------------------------------------------
Ahora que sabemos c√≥mo mostrar los n√∫meros del 1 al 6 en la pantalla de 7 segmentos, ¬øc√≥mo podemos lograr el efecto de un Cyber Dice?

Esto implica presionar un bot√≥n para hacer que la pantalla recorra los n√∫meros del 1 al 6, y soltar el bot√≥n para mostrar un n√∫mero fijo. Veamos c√≥mo podemos lograr esto con c√≥digo.

1. Abre el sketch que guardaste anteriormente, ``Lesson23_Show_Number``.

2. Selecciona ‚ÄúGuardar como...‚Äù desde el men√∫ ‚ÄúArchivo‚Äù y ren√≥mbralo como ``Lesson23_Cyber_Dice``. Haz clic en "Guardar".

3. Define el pin del bot√≥n y config√∫ralo como entrada.

.. code-block:: Arduino
    :emphasize-lines: 10-11,23-24

    // Definir los pines conectados a los segmentos de la pantalla de 7 segmentos
    int pinA = 2;
    int pinB = 3;
    int pinC = 4;
    int pinD = 5;
    int pinE = 6;
    int pinF = 7;
    int pinG = 8;

    // Definir el pin conectado al bot√≥n
    int buttonPin = 9;

    void setup() {
        // Configurar todos los pines como salidas
        pinMode(pinA, OUTPUT);
        pinMode(pinB, OUTPUT);
        pinMode(pinC, OUTPUT);
        pinMode(pinD, OUTPUT);
        pinMode(pinE, OUTPUT);
        pinMode(pinF, OUTPUT);
        pinMode(pinG, OUTPUT);

        // Configurar el pin del bot√≥n como entrada
        pinMode(buttonPin, INPUT);
    }

4. Verifica si el bot√≥n est√° presionado en el momento en que se ejecuta la funci√≥n ``void loop()``. Si el bot√≥n no est√° presionado, el c√≥digo dentro del bloque ``if`` se omite.

.. code-block:: Arduino
    :emphasize-lines: 3,4

    void loop() {
        // Verificar si el bot√≥n est√° presionado
        if (digitalRead(buttonPin) == HIGH) {
        }
    }

5. En la programaci√≥n de Arduino o microcontroladores similares, un problema com√∫n al trabajar con entradas de botones es asegurar que cada pulsaci√≥n genere solo una acci√≥n, especialmente al generar eventos o comandos (como generar un n√∫mero aleatorio). Para abordar esto, podemos utilizar una t√©cnica conocida como "esperar a que se suelte".

**esperar-a-la-liberaci√≥n**

La idea principal de este m√©todo es que, despu√©s de presionar un bot√≥n y realizar una acci√≥n, el programa entra en un bucle que contin√∫a monitoreando el estado del bot√≥n hasta que se libera. Esto asegura que no se disparen acciones adicionales debido a rebotes del bot√≥n o porque el usuario mantenga presionado el bot√≥n.

Podemos implementar esto con un bucle ``while`` en el c√≥digo.

.. image:: img/while_loop.png
    :width: 400
    :align: center

.. code-block:: Arduino
    :emphasize-lines: 4-6

    void loop() {
        // Verificar si el bot√≥n est√° presionado
        if (digitalRead(buttonPin) == HIGH) {
            // Esperar a que se suelte el bot√≥n antes de continuar
            while (digitalRead(buttonPin) == HIGH) {
            }
        }
    }

6. Ahora, usa la funci√≥n ``random()`` para generar un n√∫mero aleatorio entre 1 y 6, y usa ``displayDigit()`` para mostrar este n√∫mero en la pantalla de 7 segmentos. Ver√°s que la pantalla cambia r√°pidamente entre diferentes n√∫meros mientras se mantiene presionado el bot√≥n.

.. code-block:: Arduino
    :emphasize-lines: 6-12

    void loop() {
        // Verificar si el bot√≥n est√° presionado
        if (digitalRead(buttonPin) == HIGH) {
            // Esperar a que se suelte el bot√≥n antes de continuar
            while (digitalRead(buttonPin) == HIGH) {
                // Generar un n√∫mero aleatorio entre 1 y 6
                int num = random(1, 7);
                
                // Mostrar el n√∫mero aleatorio en la pantalla de 7 segmentos
                displayDigit(num);
                // Esperar un corto per√≠odo para permitir la actualizaci√≥n visible
                delay(100);
            }
        }
    }

7. Finalmente, agrega un retraso para eliminar el rebote del bot√≥n y evitar m√∫ltiples entradas r√°pidas.

.. code-block:: Arduino
    :emphasize-lines: 15

    void loop() {
        // Verificar si el bot√≥n est√° presionado
        if (digitalRead(buttonPin) == HIGH) {
            // Esperar a que se suelte el bot√≥n antes de continuar
            while (digitalRead(buttonPin) == HIGH) {
                // Generar un n√∫mero aleatorio entre 1 y 6
                int num = random(1, 7);
                
                // Mostrar el n√∫mero aleatorio en la pantalla de 7 segmentos
                displayDigit(num);
                // Esperar un corto per√≠odo para permitir la actualizaci√≥n visible
                delay(100);
            }
            // Agregar un retraso para eliminar el rebote del bot√≥n y evitar m√∫ltiples entradas r√°pidas
            delay(500);
        }
    }

8. Tu c√≥digo completo deber√≠a verse as√≠. Ahora puedes cargar el c√≥digo en el Arduino Uno R3. Una vez cargado, si mantienes presionado el bot√≥n, los n√∫meros en la pantalla cambiar√°n r√°pidamente, y al soltarlo, se mostrar√° un n√∫mero.

.. code-block:: Arduino

    // Definir los pines conectados a los segmentos de la pantalla de 7 segmentos
    int pinA = 2;
    int pinB = 3;
    int pinC = 4;
    int pinD = 5;
    int pinE = 6;
    int pinF = 7;
    int pinG = 8;

    // Definir el pin conectado al bot√≥n
    int buttonPin = 9;

    void setup() {
        // Configurar todos los pines como salidas
        pinMode(pinA, OUTPUT);
        pinMode(pinB, OUTPUT);
        pinMode(pinC, OUTPUT);
        pinMode(pinD, OUTPUT);
        pinMode(pinE, OUTPUT);
        pinMode(pinF, OUTPUT);
        pinMode(pinG, OUTPUT);

        // Configurar el pin del bot√≥n como entrada
        pinMode(buttonPin, INPUT);
    }

    void loop() {
        // Verificar si el bot√≥n est√° presionado
        if (digitalRead(buttonPin) == HIGH) {
            // Esperar a que se suelte el bot√≥n antes de continuar
            while (digitalRead(buttonPin) == HIGH) {
                // Generar un n√∫mero aleatorio entre 1 y 6
                int num = random(1, 7);

                // Mostrar el n√∫mero aleatorio en la pantalla de 7 segmentos
                displayDigit(num);
                // Esperar un corto per√≠odo para permitir la actualizaci√≥n visible
                delay(100);
            }
            // Agregar un retraso para eliminar el rebote del bot√≥n y evitar m√∫ltiples entradas r√°pidas
            delay(500);
        }
    }

    void displayDigit(int digit) {
        // Apagar todos los segmentos
        digitalWrite(pinA, LOW);
        digitalWrite(pinB, LOW);
        digitalWrite(pinC, LOW);
        digitalWrite(pinD, LOW);
        digitalWrite(pinE, LOW);
        digitalWrite(pinF, LOW);
        digitalWrite(pinG, LOW);

        // Encender los segmentos necesarios para el n√∫mero deseado (LOW enciende los segmentos para c√°todo com√∫n)
        switch (digit) {
            case 1:
            digitalWrite(pinB, HIGH);
            digitalWrite(pinC, HIGH);
            break;
            case 2:
            digitalWrite(pinA, HIGH);
            digitalWrite(pinB, HIGH);
            digitalWrite(pinD, HIGH);
            digitalWrite(pinE, HIGH);
            digitalWrite(pinG, HIGH);
            break;
            case 3:
            digitalWrite(pinA, HIGH);
            digitalWrite(pinB, HIGH);
            digitalWrite(pinC, HIGH);
            digitalWrite(pinD, HIGH);
            digitalWrite(pinG, HIGH);
            break;
            case 4:
            digitalWrite(pinB, HIGH);
            digitalWrite(pinC, HIGH);
            digitalWrite(pinF, HIGH);
            digitalWrite(pinG, HIGH);
            break;
            case 5:
            digitalWrite(pinA, HIGH);
            digitalWrite(pinC, HIGH);
            digitalWrite(pinD, HIGH);
            digitalWrite(pinF, HIGH);
            digitalWrite(pinG, HIGH);
            break;
            case 6:
            digitalWrite(pinA, HIGH);
            digitalWrite(pinC, HIGH);
            digitalWrite(pinD, HIGH);
            digitalWrite(pinE, HIGH);
            digitalWrite(pinF, HIGH);
            digitalWrite(pinG, HIGH);
            break;
        }
    }

9. Finalmente, recuerda guardar tu c√≥digo y organizar tu espacio de trabajo.

**Resumen**

En esta lecci√≥n, hemos completado con √©xito el proyecto Cyber Dice, lo que te permite participar en competiciones amistosas con tus amigos para ver qui√©n obtiene el n√∫mero m√°s alto. A lo largo de esta lecci√≥n, exploramos el funcionamiento de una pantalla de 7 segmentos, aprendiendo c√≥mo controlarla de manera efectiva. Simplificamos nuestro c√≥digo usando declaraciones ``switch-case``, mejorando la legibilidad y eficiencia.

Adem√°s, implementamos la l√≥gica para controlar la visualizaci√≥n de n√∫meros aleatorios en la pantalla de 7 segmentos seg√∫n el estado de la pulsaci√≥n de un bot√≥n, agregando interacci√≥n din√°mica a nuestro proyecto. Esta experiencia pr√°ctica no solo te familiariza con componentes electr√≥nicos b√°sicos y estrategias de codificaci√≥n, sino que tambi√©n ilustra aplicaciones pr√°cticas de estas habilidades para crear proyectos interactivos y entretenidos.

.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder sur Facebook ! Plongez dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et relevez les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez & Partagez** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et √† des avant-premi√®res exclusives.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et concours** : Participez √† des concours et √† des promotions sp√©ciales pendant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

21. Son de Sir√®ne
=========================

Dans ce projet Arduino, nous allons explorer comment cr√©er un syst√®me de sir√®ne en programmant et en int√©grant du mat√©riel √©lectronique.

Les sons de sir√®ne utilisent un motif sp√©cifique de fr√©quences et de hauteurs, caract√©ris√© par des mont√©es et descentes rapides des hauteurs, ce qui les rend facilement reconnaissables et distincts des autres sons du quotidien.
Ces variations de hauteur peuvent provoquer un sentiment d'urgence, car elles sont souvent associ√©es √† des signaux d'avertissement ou √† des situations dangereuses dans la nature.

En ajustant la fr√©quence d'un buzzer passif, nous pouvons simuler les mont√©es et descentes caract√©ristiques d'une sir√®ne.

.. raw:: html

    <video controls style = "max-width:90%">
        <source src="_static/video/21_siren_sound.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

Dans cette le√ßon, vous apprendrez :

* Comment fonctionnent les buzzers passifs
* Comment piloter un buzzer passif en utilisant la fonction tone()
* Comment utiliser la boucle for en programmation
* Comment impl√©menter un son de sir√®ne

Comprendre les propri√©t√©s du son
-----------------------------------

Le son est un ph√©nom√®ne ondulatoire qui se propage √† travers des milieux comme l'air, l'eau ou les solides sous forme d'√©nergie vibratoire. Comprendre les propri√©t√©s physiques du son peut nous aider √† mieux comprendre et contr√¥ler son comportement dans diff√©rents environnements.
Voici plusieurs propri√©t√©s physiques cl√©s du son :

.. image:: img/7_siren.png
    :width: 500
    :align: center

**Fr√©quence**

La fr√©quence fait r√©f√©rence au nombre de cycles de vibration par unit√© de temps, g√©n√©ralement exprim√©e en Hertz (Hz).
La fr√©quence d√©termine la hauteur du son : des fr√©quences plus √©lev√©es produisent des sons plus aigus ; des fr√©quences plus basses produisent des sons plus graves. La plage audible pour l'humain est d'environ 20 Hz √† 20 000 Hz.

**Amplitude**
L'amplitude est l'intensit√© de la vibration d'une onde sonore, et elle d√©termine le volume du son.
Une plus grande amplitude signifie un son plus fort ; une amplitude plus faible signifie un son plus doux.
En physique, l'amplitude est g√©n√©ralement directement li√©e √† l'√©nergie d'une onde sonore, tandis que dans le langage courant, nous utilisons souvent les d√©cibels (dB) pour d√©crire l'intensit√© sonore.

**Timbre**
Le timbre d√©crit la texture ou le "coloris" du son, qui nous permet de distinguer les sons provenant de diff√©rentes sources m√™me s'ils ont la m√™me hauteur et la m√™me intensit√©.
Par exemple, m√™me si un violon et un piano jouent la m√™me note, nous pouvons toujours les distinguer gr√¢ce √† leur timbre.

Dans ce projet, nous explorerons uniquement l'influence de la fr√©quence sur le son.

Construction du circuit
---------------------------

**Composants n√©cessaires**

.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * Plaque d'essai
     - 1 * Buzzer passif
     - Fils de connexion
   * - |list_uno_r3| 
     - |list_breadboard| 
     - |list_passive_buzzer| 
     - |list_wire| 
   * - 1 * C√¢ble USB
     - 
     - 
     - 
   * - |list_usb_cable| 
     - 
     - 
     - 



**√âtapes de construction**

Dans les le√ßons pr√©c√©dentes, nous avons utilis√© un buzzer actif. Dans cette le√ßon, nous utiliserons un buzzer passif. Le circuit reste le m√™me, mais la mani√®re de le contr√¥ler via le code est diff√©rente.

1. Localisez un buzzer passif, qui a un circuit imprim√© visible √† l'arri√®re.

.. image:: img/7_beep_2.png

2. Bien qu'il y ait un signe '+' sur le buzzer passif, il ne s'agit pas d'un composant polaris√©. Ins√©rez-le dans n'importe quelle direction dans les trous 15F et 18F de la plaque d'essai.

.. image:: img/16_morse_code_buzzer.png
    :width: 500
    :align: center

3. Connectez une broche du buzzer passif √† la broche GND de l'Arduino Uno R3.

.. image:: img/16_morse_code_gnd.png
    :width: 500
    :align: center

4. Connectez l'autre broche du buzzer passif √† la broche 5V de l'Arduino Uno R3. Le buzzer ne produira aucun son, contrairement √† un buzzer actif qui √©mettrait un son lorsqu'il est connect√© de cette mani√®re.

.. image:: img/16_morse_code_5v.png
    :width: 500
    :align: center

5. Maintenant, retirez le fil ins√©r√© dans la broche 5V et ins√©rez-le dans la broche 9 de l'Arduino Uno R3, afin que le buzzer puisse √™tre contr√¥l√© par le code.

.. image:: img/16_morse_code.png
    :width: 500
    :align: center


Cr√©ation du code - Faire sonner le buzzer passif
----------------------------------------------------

Comme nous l'avons appris en connectant, il ne suffit pas d'appliquer une alimentation haute et basse √† un buzzer passif pour le faire sonner. En programmation Arduino, la fonction ``tone()`` est utilis√©e pour contr√¥ler un buzzer passif ou d'autres dispositifs audio afin de g√©n√©rer un son √† une fr√©quence sp√©cifi√©e.

    * ``tone()`` : G√©n√®re une onde carr√©e de la fr√©quence sp√©cifi√©e (avec un cycle de 50 %) sur une broche. Une dur√©e peut √™tre sp√©cifi√©e, sinon l'onde continue jusqu'√† un appel √† ``noTone()``.

    **Syntaxe**

        * ``tone(pin, frequency)``
        * ``tone(pin, frequency, duration)``

    **Param√®tres**

        * ``pin`` : la broche Arduino sur laquelle g√©n√©rer le son.
        * ``frequency`` : la fr√©quence du son en Hertz. Types de donn√©es autoris√©s : unsigned int.
        * ``duration`` : la dur√©e du son en millisecondes (facultatif). Types de donn√©es autoris√©s : unsigned long.

    **Retourne**
        Aucun r√©sultat


1. Ouvrez l'IDE Arduino et d√©marrez un nouveau projet en s√©lectionnant "New Sketch" dans le menu "Fichier".
2. Enregistrez votre sketch sous le nom ``Lesson21_Tone`` en utilisant ``Ctrl + S`` ou en cliquant sur "Enregistrer".

3. Commencez par d√©finir la broche du buzzer.

.. code-block:: Arduino

    const int buzzerPin = 9;  // Assigne la broche 9 √† la constante pour le buzzer

    void setup() {
        // Mettez ici votre code de configuration, ex√©cut√© une seule fois :
    }

4. Pour comprendre pleinement l'utilisation de la fonction ``tone()``, nous l'√©crivons dans le ``void setup()`` afin que le buzzer √©mette un son √† une fr√©quence sp√©cifique pendant une dur√©e d√©finie.

.. code-block:: Arduino
    :emphasize-lines: 5

    const int buzzerPin = 9;  // Assigne la broche 9 √† la constante pour le buzzer

    void setup() {
        // Mettez ici votre code de configuration, ex√©cut√© une seule fois :
        tone(buzzerPin, 1000, 100);  // Allumer le buzzer √† 1000 Hz pendant une dur√©e de 100 millisecondes
    }

    void loop() {
        // Mettez ici votre code principal, ex√©cut√© en boucle :
    }

5. Vous pouvez maintenant t√©l√©verser le code sur l'Arduino Uno R3, apr√®s quoi vous entendrez un bref "bip" du buzzer passif, puis il se taira.

**Questions**

1. Si vous changez le code et connectez le buzzer aux broches 7 ou 8, qui ne sont pas des broches PWM, le buzzer √©mettra-t-il encore un son ? Vous pouvez tester et noter votre r√©ponse dans le carnet.

2. Pour explorer comment ``frequency`` et ``duration`` dans ``tone(pin, frequency, duration)`` affectent le son du buzzer, veuillez modifier le code dans deux conditions et remplir les ph√©nom√®nes observ√©s dans votre carnet :

* En gardant ``frequency`` √† 1000, augmentez progressivement ``duration``, de 100, 500 √† 1000. Comment le son du buzzer change-t-il et pourquoi ?

* En gardant ``duration`` √† 100, augmentez progressivement ``frequency``, de 1000, 2000 √† 5000. Comment le son du buzzer change-t-il et pourquoi ?



Cr√©ation du code - √âmettre un son de sir√®ne
------------------------------------------------

Pr√©c√©demment, nous avons appris √† faire √©mettre un son √† un buzzer et √† comprendre comment la fr√©quence et la dur√©e influencent le son. Maintenant, si nous voulons que le buzzer √©mette un son de sir√®ne qui monte d'un ton bas √† un ton √©lev√©, comment devrions-nous proc√©der ?

D'apr√®s nos explorations pr√©c√©dentes, nous savons que l'utilisation de la fonction ``tone(pin, frequency)`` permet √† un buzzer passif d'√©mettre un son. En augmentant progressivement la ``fr√©quence``, la hauteur du son du buzzer passif devient plus aigu√´. Impl√©mentons cela avec du code maintenant.

1. Ouvrez le sketch que vous avez sauvegard√© pr√©c√©demment, ``Lesson21_Tone``.

2. Cliquez sur ‚ÄúEnregistrer sous...‚Äù dans le menu ‚ÄúFichier‚Äù, et renommez-le en ``Lesson21_Siren_Sound``. Cliquez sur "Enregistrer".

3. √âcrivez la fonction ``tone()`` dans la boucle ``void loop()`` et d√©finissez trois fr√©quences diff√©rentes. Pour entendre clairement la diff√©rence entre chaque fr√©quence, utilisez la fonction ``delay()`` pour les s√©parer.

.. code-block:: Arduino

    const int buzzerPin = 9;  // Assigne la broche 9 √† la constante pour le buzzer

    void setup() {
        // Mettez ici votre code de configuration, ex√©cut√© une seule fois :
    }

    void loop() {
        // Mettez ici votre code principal, ex√©cut√© en boucle :
        tone(buzzerPin, 100);  // Allumer le buzzer √† 100 Hz
        delay(500);
        tone(buzzerPin, 300);  // Allumer le buzzer √† 300 Hz
        delay(500);
        tone(buzzerPin, 600);  // Allumer le buzzer √† 600 Hz
        delay(500);
    }

4. √Ä ce stade, vous pouvez t√©l√©verser le code sur l'Arduino Uno R3, et vous entendrez le buzzer √©mettre trois sons diff√©rents √† r√©p√©tition.

5. Pour obtenir une mont√©e en fr√©quence plus fluide, nous devrions d√©finir des intervalles plus courts pour la ``fr√©quence``, par exemple un intervalle de 10, en commen√ßant de 100, 110, 120... jusqu'√† 1000. Nous pouvons √©crire le code suivant.

.. code-block:: Arduino

    void loop() {
        // Mettez ici votre code principal, ex√©cut√© en boucle :
        tone(buzzerPin, 100);  // Allumer le buzzer √† 100 Hz
        delay(500);
        tone(buzzerPin, 110);  // Allumer le buzzer √† 110 Hz
        delay(500);
        tone(buzzerPin, 120);  // Allumer le buzzer √† 120 Hz
        delay(500);
        tone(buzzerPin, 130);  // Allumer le buzzer √† 130 Hz
        delay(500);
        tone(buzzerPin, 140);  // Allumer le buzzer √† 140 Hz
        delay(500);
        tone(buzzerPin, 150);  // Allumer le buzzer √† 150 Hz
        delay(500);
        tone(buzzerPin, 160);  // Allumer le buzzer √† 160 Hz
        delay(500);
        ...
    }

6. Vous remarquerez que si vous souhaitez r√©ellement monter jusqu'√† 1000, ce code ferait plus de deux cents lignes. √Ä ce stade, vous pouvez utiliser l'instruction ``for``, qui est utilis√©e pour r√©p√©ter un bloc d'instructions entre des accolades.

    * ``for`` : L'instruction ``for`` est utile pour toute op√©ration r√©p√©titive et est souvent utilis√©e en combinaison avec des tableaux pour op√©rer sur des ensembles de donn√©es/broches. Un compteur d'incr√©mentation est g√©n√©ralement utilis√© pour r√©p√©ter et terminer la boucle.

    **Syntaxe**

    .. code-block::

        for (initialization; condition; increment) {
            // instruction(s);
        }

    **Param√®tres**

        * ``initialization`` : se produit une seule fois au d√©but.
        * ``condition`` : chaque passage dans la boucle teste cette condition ; si elle est vraie, le bloc d'instructions et l'incr√©mentation sont ex√©cut√©s, puis la condition est test√©e √† nouveau. Quand elle devient fausse, la boucle se termine.
        * ``increment`` : s'ex√©cute √† chaque passage de la boucle lorsque la condition est vraie.

.. image:: img/for_loop.png
    :width: 400
    :align: center


7. Modifiez maintenant la fonction ``void loop()`` comme indiqu√© ci-dessous, o√π ``freq`` commence √† 100 et augmente de 10 jusqu'√† 1000.

.. code-block:: Arduino
    :emphasize-lines: 3-6

    void loop() {
        // Augmenter progressivement la hauteur
        for (int freq = 100; freq <= 1000; freq += 10) {
            tone(buzzerPin, freq);  // √âmettre un son
            delay(20);              // Attendre avant de changer la fr√©quence
        }
    }

8. Ensuite, faites en sorte que ``freq`` commence √† 1000 et diminue de 10 jusqu'√† 100, afin que vous puissiez entendre le son du buzzer monter puis descendre, simulant ainsi un son de sir√®ne.

.. code-block:: Arduino
    :emphasize-lines: 9-12

    void loop() {
        // Augmenter progressivement la hauteur
        for (int freq = 100; freq <= 1000; freq += 10) {
            tone(buzzerPin, freq);  // √âmettre un son
            delay(20);              // Attendre avant de changer la fr√©quence
        }

        // Diminuer progressivement la hauteur
        for (int freq = 1000; freq >= 100; freq -= 10) {
            tone(buzzerPin, freq);  // √âmettre un son
            delay(20);              // Attendre avant de changer la fr√©quence
        }
    }


9. Voici votre code complet. Vous pouvez maintenant cliquer sur "T√©l√©verser" pour charger le code sur l'Arduino Uno R3.

.. code-block:: Arduino

    const int buzzerPin = 9;  // Assigner la broche 9 √† la constante pour le buzzer

    void setup() {
        // Mettez ici votre code de configuration, ex√©cut√© une seule fois :
    }

    void loop() {
        // Augmenter progressivement la hauteur
        for (int freq = 100; freq <= 1000; freq += 10) {
            tone(buzzerPin, freq);  // √âmettre un son
            delay(20);              // Attendre avant de changer la fr√©quence
        }

        // Diminuer progressivement la hauteur
        for (int freq = 1000; freq >= 100; freq -= 10) {
            tone(buzzerPin, freq);  // √âmettre un son
            delay(20);              // Attendre avant de changer la fr√©quence
        }
    }

10. Enfin, n'oubliez pas d'enregistrer votre code et de ranger votre espace de travail.

**R√©sum√©**

Dans cette le√ßon, nous avons explor√© comment utiliser un Arduino et un buzzer passif pour simuler un son de sir√®ne. En discutant des propri√©t√©s physiques de base du son, telles que la fr√©quence et la hauteur, nous avons appris comment ces √©l√©ments influencent la perception et l'effet du son. √Ä travers des activit√©s pratiques, nous avons non seulement appris √† construire des circuits, mais aussi ma√Ætris√© la programmation avec la fonction ``tone()`` sur Arduino pour contr√¥ler la fr√©quence et la dur√©e du son, r√©ussissant ainsi √† simuler un son de sir√®ne qui monte et descend en hauteur.


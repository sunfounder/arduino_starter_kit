.. note::

    Hallo, willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Community auf Facebook! Tauche gemeinsam mit anderen Enthusiasten tiefer in die Welt von Raspberry Pi, Arduino und ESP32 ein.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂se nach dem Kauf auftretende Probleme und technische Herausforderungen mit Hilfe unserer Community und unseres Teams.
    - **Lernen & Teilen**: Tausche Tipps und Tutorials aus, um deine F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalte fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und Sneak Peeks.
    - **Sonderrabatte**: Genie√üe exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Verlosungen**: Nimm an Verlosungen und Feiertagsaktionen teil.

    üëâ Bereit, mit uns zu erkunden und zu erschaffen? Klicke auf [|link_sf_facebook|] und trete noch heute bei!

21. Sirenenton
=========================

In diesem Arduino-Projekt erkunden wir, wie man ein Sirenensystem durch Programmierung und Integration von elektronischer Hardware erstellt.

Sirenenkl√§nge verwenden ein spezifisches Frequenz- und Tonmuster, das durch schnelle Anstiege und Abf√§lle der Tonh√∂he gekennzeichnet ist. Dies macht sie nicht nur leicht erkennbar, sondern unterscheidet sie auch von anderen allt√§glichen Ger√§uschen. Diese Tonh√∂henwechsel erzeugen oft ein Gef√ºhl der Dringlichkeit, da sie in der Natur h√§ufig mit Warnsignalen oder gef√§hrlichen Situationen in Verbindung gebracht werden.

Durch die Anpassung der Frequenz eines passiven Summers k√∂nnen wir die charakteristischen auf- und absteigenden Tonh√∂hen eines Sirenentons simulieren.

.. raw:: html

    <video controls style = "max-width:90%">
        <source src="_static/video/21_siren_sound.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

In dieser Lektion lernst du:

* Wie passive Summer funktionieren
* Wie man einen passiven Summer mit der tone()-Funktion ansteuert
* Wie man die for-Schleife in der Programmierung verwendet
* Wie man einen Sirenenton umsetzt

Verst√§ndnis der Klangeigenschaften
---------------------------------------

Schall ist ein Wellenph√§nomen, das sich als vibrierende Energie durch Medien wie Luft, Wasser oder Feststoffe ausbreitet. Das Verst√§ndnis der physikalischen Eigenschaften von Schall hilft uns, besser zu begreifen, wie sich Schall in verschiedenen Umgebungen verh√§lt.
Hier sind einige wichtige physikalische Eigenschaften von Schall:

.. image:: img/7_siren.png
    :width: 500
    :align: center

**Frequenz**

Die Frequenz bezieht sich auf die Anzahl der Schwingungszyklen pro Zeiteinheit, typischerweise in Hertz (Hz) angegeben.
Die Frequenz bestimmt die Tonh√∂he des Klangs: H√∂here Frequenzen klingen h√∂her, tiefere Frequenzen klingen tiefer. Der h√∂rbare Bereich des Menschen reicht ungef√§hr von 20 Hz bis 20.000 Hz.

**Amplitude**
Die Amplitude ist die St√§rke der Schwingung einer Schallwelle, die die Lautst√§rke des Klangs bestimmt.
Eine gr√∂√üere Amplitude bedeutet einen lauteren Klang, eine kleinere Amplitude einen leiseren Klang.
In der Physik ist die Amplitude √ºblicherweise direkt mit der Energie einer Schallwelle verbunden, w√§hrend wir im allt√§glichen Sprachgebrauch oft Dezibel (dB) zur Beschreibung der Lautst√§rke verwenden.

**Klangfarbe**
Die Klangfarbe beschreibt die Textur oder ‚ÄûFarbe‚Äú des Klangs, die es uns erm√∂glicht, Ger√§usche verschiedener Quellen zu unterscheiden, selbst wenn sie die gleiche Tonh√∂he und Lautst√§rke haben.
Zum Beispiel k√∂nnen wir einen Unterschied zwischen einer Violine und einem Klavier erkennen, auch wenn beide das gleiche musikalische St√ºck spielen, dank ihrer unterschiedlichen Klangfarbe.

In diesem Projekt erforschen wir nur den Einfluss der Frequenz auf den Klang.



Aufbau des Schaltkreises
---------------------------

**Ben√∂tigte Komponenten**

.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * Breadboard
     - 1 * Passiver Summer
     - Jumper-Kabel
   * - |list_uno_r3| 
     - |list_breadboard| 
     - |list_passive_buzzer| 
     - |list_wire| 
   * - 1 * USB-Kabel
     -
     - 
     - 
   * - |list_usb_cable| 
     -
     - 
     - 



**Schritt-f√ºr-Schritt-Aufbau**

In den vorherigen Lektionen haben wir aktive Summer verwendet. In dieser Lektion verwenden wir einen passiven Summer. Der Schaltkreis ist derselbe, jedoch unterscheidet sich der Programmieransatz zur Ansteuerung.

1. Finde einen passiven Summer, der auf seiner R√ºckseite eine offene Platine hat.

.. image:: img/7_beep_2.png

2. Obwohl auf dem passiven Summer ein '+'-Zeichen zu sehen ist, handelt es sich nicht um ein polarisiertes Bauteil. Stecke ihn in beliebiger Richtung in die L√∂cher 15F und 18F des Breadboards.

.. image:: img/16_morse_code_buzzer.png
    :width: 500
    :align: center

3. Verbinde einen Pin des passiven Summers mit dem GND-Pin des Arduino Uno R3.

.. image:: img/16_morse_code_gnd.png
    :width: 500
    :align: center

4. Verbinde den anderen Pin des passiven Summers mit dem 5V-Pin des Arduino Uno R3. Der Summer wird keinen Ton von sich geben, was ihn von einem aktiven Summer unterscheidet, der in dieser Konfiguration einen Ton erzeugen w√ºrde.

.. image:: img/16_morse_code_5v.png
    :width: 500
    :align: center

5. Nun entferne das Kabel, das im 5V-Pin steckt, und stecke es in Pin 9 des Arduino Uno R3, damit der Summer mit Code gesteuert werden kann.

.. image:: img/16_morse_code.png
    :width: 500
    :align: center



Code-Erstellung - Den passiven Summer ert√∂nen lassen
---------------------------------------------------------

Wie wir beim Anschlie√üen gelernt haben, reicht es nicht aus, einfach nur eine hohe oder niedrige Spannung an einen passiven Summer anzulegen, um einen Ton zu erzeugen. In der Arduino-Programmierung wird die Funktion ``tone()`` verwendet, um einen passiven Summer oder andere Audioausgabeger√§te zu steuern und einen Ton mit einer bestimmten Frequenz zu erzeugen.

    * ``tone()``: Erzeugt eine Rechteckwelle mit der angegebenen Frequenz (und einem Tastverh√§ltnis von 50%) an einem Pin. Eine Dauer kann angegeben werden, andernfalls l√§uft die Welle weiter, bis ``noTone()`` aufgerufen wird.

    **Syntax**

        * ``tone(pin, frequency)``
        * ``tone(pin, frequency, duration)``

    **Parameter**

        * ``pin``: Der Arduino-Pin, an dem der Ton erzeugt wird.
        * ``frequency``: Die Frequenz des Tons in Hertz. Erlaubte Datentypen: unsigned int.
        * ``duration``: Die Dauer des Tons in Millisekunden (optional). Erlaubte Datentypen: unsigned long.

    **R√ºckgabewert**
        Keiner


1. √ñffne die Arduino IDE und starte ein neues Projekt, indem du ‚ÄûNew Sketch‚Äú aus dem Men√º ‚ÄûFile‚Äú ausw√§hlst.
2. Speichere deinen Sketch als ``Lesson21_Tone`` mit ``Ctrl + S`` oder durch Klicken auf ‚ÄûSpeichern‚Äú.

3. Zuerst definierst du den Pin f√ºr den Summer.

.. code-block:: Arduino

    const int buzzerPin = 9;  // Weist Pin 9 der Konstanten f√ºr den Summer zu

    void setup() {
        // Hier den Setup-Code einf√ºgen, um ihn einmal auszuf√ºhren:
    }

4. Um die Verwendung der ``tone()``-Funktion besser zu verstehen, schreiben wir sie in das ``void setup()``, sodass der Summer einen Ton mit einer bestimmten Frequenz f√ºr eine festgelegte Dauer abgibt.

.. code-block:: Arduino
    :emphasize-lines: 5

    const int buzzerPin = 9;  // Weist Pin 9 der Konstanten f√ºr den Summer zu

    void setup() {
        // Hier den Setup-Code einf√ºgen, um ihn einmal auszuf√ºhren:
        tone(buzzerPin, 1000, 100);  // Summer mit 1000 Hz f√ºr 100 Millisekunden einschalten
    }

    void loop() {
        // Hier den Hauptcode einf√ºgen, um ihn wiederholt auszuf√ºhren:
    }

5. Jetzt kannst du den Code auf das Arduino Uno R3 hochladen, und du wirst einen kurzen "Piep"-Ton vom passiven Summer h√∂ren, danach wird er still.

**Fragen**

1. Wenn du die Pins des Codes und der Schaltung auf 7 oder 8 √§nderst, die keine PWM-Pins sind, wird der Summer dann trotzdem einen Ton abgeben? Du kannst es testen und deine Antwort ins Handbuch schreiben.

2. Um zu erkunden, wie ``frequency`` und ``duration`` in ``tone(pin, frequency, duration)`` den Ton des Summers beeinflussen, modifiziere den Code unter zwei Bedingungen und notiere die beobachteten Ph√§nomene in deinem Handbuch:

* Bei Beibehaltung der ``frequency`` von 1000, erh√∂he schrittweise die ``duration`` von 100, 500 auf 1000. Wie ver√§ndert sich der Ton des Summers und warum?

* Bei Beibehaltung der ``duration`` von 100, erh√∂he schrittweise die ``frequency`` von 1000, 2000 auf 5000. Wie ver√§ndert sich der Ton des Summers und warum?



Code-Erstellung - Einen Sirenenton erzeugen
----------------------------------------------

Zuvor haben wir gelernt, wie man einen Summer zum Ert√∂nen bringt, und verstanden, wie Frequenz und Dauer den Ton beeinflussen. Wenn wir nun m√∂chten, dass der Summer einen Sirenenton erzeugt, der von einem tiefen zu einem hohen Ton ansteigt, wie sollten wir vorgehen?

Aus unseren fr√ºheren Erkundungen wissen wir, dass die Funktion ``tone(pin, frequency)`` es erm√∂glicht, einen passiven Summer zum Erklingen zu bringen. Durch schrittweises Erh√∂hen der ``frequency`` wird die Tonh√∂he des Summers h√∂her. Lass uns das nun im Code umsetzen.

1. √ñffne den zuvor gespeicherten Sketch ``Lesson21_Tone``. 

2. W√§hle im Men√º ‚ÄûDatei‚Äú die Option ‚ÄûSpeichern unter...‚Äú und benenne die Datei in ``Lesson21_Siren_Sound`` um. Klicke auf ‚ÄûSpeichern‚Äú.

3. Schreibe die ``tone()``-Funktion in die ``void loop()`` und setze drei verschiedene Frequenzen. Um den Unterschied zwischen den T√∂nen deutlich zu h√∂ren, verwende die ``delay()``-Funktion, um sie zu trennen.

.. code-block:: Arduino

    const int buzzerPin = 9;  // Weist Pin 9 der Konstanten f√ºr den Summer zu

    void setup() {
        // Hier den Setup-Code einf√ºgen, um ihn einmal auszuf√ºhren:
    }

    void loop() {
        // Hier den Hauptcode einf√ºgen, um ihn wiederholt auszuf√ºhren:
        tone(buzzerPin, 100);  // Summer bei 100 Hz einschalten
        delay(500);
        tone(buzzerPin, 300);  // Summer bei 300 Hz einschalten
        delay(500);
        tone(buzzerPin, 600);  // Summer bei 600 Hz einschalten
        delay(500);
    }

4. An diesem Punkt kannst du den Code auf das Arduino Uno R3 hochladen, und du wirst den Summer h√∂ren, der drei verschiedene T√∂ne wiederholt.

5. Um einen sanfteren Anstieg der Tonh√∂he zu erreichen, sollten wir k√ºrzere Intervalle f√ºr ``frequency`` setzen, zum Beispiel in Schritten von 10, beginnend bei 100, 110, 120... bis 1000. Wir k√∂nnen den folgenden Code schreiben.

.. code-block:: Arduino

    void loop() {
        // Hier den Hauptcode einf√ºgen, um ihn wiederholt auszuf√ºhren:
        tone(buzzerPin, 100);  // Summer bei 100 Hz einschalten
        delay(500);
        tone(buzzerPin, 110);  // Summer bei 110 Hz einschalten
        delay(500);
        tone(buzzerPin, 120);  // Summer bei 120 Hz einschalten
        delay(500);
        tone(buzzerPin, 130);  // Summer bei 130 Hz einschalten
        delay(500);
        tone(buzzerPin, 140);  // Summer bei 140 Hz einschalten
        delay(500);
        tone(buzzerPin, 150);  // Summer bei 150 Hz einschalten
        delay(500);
        tone(buzzerPin, 160);  // Summer bei 160 Hz einschalten
        delay(500);
        ...
    }

6. Du wirst feststellen, dass der Code √ºber zweihundert Zeilen lang w√§re, wenn du wirklich bis 1000 z√§hlen wolltest. An diesem Punkt kannst du die ``for``-Schleife verwenden, die dazu dient, einen Block von Anweisungen, der in geschweifte Klammern eingeschlossen ist, zu wiederholen.

    * ``for``: Die ``for``-Schleife ist n√ºtzlich f√ºr jede wiederholte Operation und wird oft in Kombination mit Arrays verwendet, um auf Daten/Pins zuzugreifen. Ein Inkrementz√§hler wird dabei in der Regel verwendet, um die Schleife zu durchlaufen und zu beenden. 

    **Syntax**

    .. code-block::

        for (initialization; condition; increment) {
            // Anweisung(en);
        }

    **Parameter**

        * ``initialization``: wird zuerst und nur einmal ausgef√ºhrt.
        * ``condition``: wird bei jedem Durchlauf der Schleife getestet; wenn sie wahr ist, wird der Anweisungsblock ausgef√ºhrt, dann das Inkrement durchgef√ºhrt und die Bedingung erneut gepr√ºft. Wenn die Bedingung falsch wird, endet die Schleife.
        * ``increment``: wird bei jedem Durchlauf der Schleife ausgef√ºhrt, solange die Bedingung wahr ist.

.. image:: img/for_loop.png
    :width: 400
    :align: center


7. √Ñndere nun die Funktion ``void loop()``, wie unten gezeigt, wobei ``freq`` bei 100 startet und sich in Schritten von 10 bis 1000 erh√∂ht.

.. code-block:: Arduino
    :emphasize-lines: 3-6

    void loop() {
        // Steigere allm√§hlich die Tonh√∂he
        for (int freq = 100; freq <= 1000; freq += 10) {
            tone(buzzerPin, freq);  // Erzeuge einen Ton
            delay(20);              // Warte vor dem Frequenzwechsel
        }
    }

8. Lass als N√§chstes ``freq`` bei 1000 starten und sich in Schritten von 10 bis 100 verringern, sodass du den Ton des Summers von tief nach hoch und dann von hoch nach tief h√∂ren kannst und somit einen Sirenenton simulierst.

.. code-block:: Arduino
    :emphasize-lines: 9-12

    void loop() {
        // Steigere allm√§hlich die Tonh√∂he
        for (int freq = 100; freq <= 1000; freq += 10) {
            tone(buzzerPin, freq);  // Erzeuge einen Ton
            delay(20);              // Warte vor dem Frequenzwechsel
        }

        // Verringere allm√§hlich die Tonh√∂he
        for (int freq = 1000; freq >= 100; freq -= 10) {
            tone(buzzerPin, freq);  // Erzeuge einen Ton
            delay(20);              // Warte vor dem Frequenzwechsel
        }
    }


9. Hier ist dein vollst√§ndiger Code. Du kannst jetzt auf ‚ÄûUpload‚Äú klicken, um den Code auf das Arduino Uno R3 hochzuladen.

.. code-block:: Arduino

    const int buzzerPin = 9;  // Weist Pin 9 der Konstanten f√ºr den Summer zu

    void setup() {
        // Hier Setup-Code einf√ºgen, um ihn einmal auszuf√ºhren:
    }

    void loop() {
        // Steigere allm√§hlich die Tonh√∂he
        for (int freq = 100; freq <= 1000; freq += 10) {
            tone(buzzerPin, freq);  // Erzeuge einen Ton
            delay(20);              // Warte vor dem Frequenzwechsel
        }

        // Verringere allm√§hlich die Tonh√∂he
        for (int freq = 1000; freq >= 100; freq -= 10) {
            tone(buzzerPin, freq);  // Erzeuge einen Ton
            delay(20);              // Warte vor dem Frequenzwechsel
        }
    }

10. Speichere schlie√ülich deinen Code und r√§ume deinen Arbeitsplatz auf.

**Zusammenfassung**

In dieser Lektion haben wir untersucht, wie man mit einem Arduino und einem passiven Summer einen Sirenenton simuliert. Durch die Besprechung der grundlegenden physikalischen Eigenschaften von Schall, wie Frequenz und Tonh√∂he, haben wir gelernt, wie diese Elemente die Wahrnehmung und Wirkung von Klang beeinflussen. Durch praktische √úbungen haben wir nicht nur den Aufbau von Schaltungen erlernt, sondern auch die Programmierung mit der ``tone()``-Funktion auf dem Arduino gemeistert, um die Frequenz und Dauer von Kl√§ngen zu steuern und so die Simulation eines Sirenentons zu erreichen, der in der Tonh√∂he an- und absteigt.

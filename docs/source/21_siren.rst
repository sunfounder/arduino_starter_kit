.. note::

    ¬°Hola! Bienvenido a la comunidad de entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. Sum√©rgete m√°s en Raspberry Pi, Arduino y ESP32 junto con otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte experto**: Resuelve problemas post-venta y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Accesos exclusivos**: Obt√©n acceso anticipado a nuevos anuncios de productos y avances.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones y sorteos**: Participa en sorteos y promociones festivas.

    üëâ ¬øListo para explorar y crear con nosotros? ¬°Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo!

21. Sonido de Sirena
=========================

En este proyecto de Arduino, exploraremos c√≥mo crear un sistema de sirena mediante programaci√≥n e integraci√≥n de hardware electr√≥nico.

Los sonidos de sirena utilizan un patr√≥n de frecuencia y tono espec√≠fico, caracterizado por r√°pidos aumentos y descensos en el tono, que no solo son f√°cilmente reconocibles sino tambi√©n distintos de otros sonidos cotidianos. Estos cambios de tono pueden generar una sensaci√≥n de urgencia, ya que a menudo se asocian con se√±ales de advertencia o situaciones peligrosas en la naturaleza.

Ajustando la frecuencia de un zumbador pasivo, podemos simular los tonos caracter√≠sticos ascendentes y descendentes de una sirena.

.. raw:: html

    <video controls style = "max-width:90%">
        <source src="_static/video/21_siren_sound.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

En esta lecci√≥n, aprender√°s:

* C√≥mo funcionan los zumbadores pasivos
* C√≥mo controlar un zumbador pasivo usando la funci√≥n ``tone()``
* C√≥mo utilizar el bucle ``for`` en programaci√≥n
* C√≥mo implementar un sonido de sirena

Entendiendo las propiedades del sonido
------------------------------------------

El sonido es un fen√≥meno ondulatorio que se propaga a trav√©s de medios como el aire, agua o s√≥lidos como energ√≠a vibratoria. Entender las propiedades f√≠sicas del sonido nos puede ayudar a comprender mejor y controlar c√≥mo se comporta el sonido en diferentes entornos.
A continuaci√≥n, algunas propiedades clave del sonido:

.. image:: img/7_siren.png
    :width: 500
    :align: center


**Frecuencia**



La frecuencia se refiere al n√∫mero de ciclos de vibraci√≥n por unidad de tiempo, 
t√≠picamente expresada en Hertz (Hz). La frecuencia determina el tono del sonido: 
frecuencias m√°s altas suenan m√°s agudas, frecuencias m√°s bajas suenan m√°s graves. 
El rango audible para los humanos es de aproximadamente 20 Hz a 20,000 Hz.

**Amplitud**

La amplitud es la intensidad de la vibraci√≥n de una onda sonora, y determina el 
volumen del sonido. Mayor amplitud significa un sonido m√°s fuerte; menor amplitud, 
un sonido m√°s suave. En f√≠sica, la amplitud est√° directamente relacionada con la 
energ√≠a de la onda sonora, mientras que en la vida cotidiana solemos utilizar 
decibelios (dB) para describir el volumen.

**Timbre**

El timbre describe la textura o "color" del sonido, lo que nos permite distinguir sonidos 
de diferentes fuentes aunque tengan el mismo tono y volumen. Por ejemplo, aunque un viol√≠n 
y un piano toquen la misma nota, podemos diferenciarlos por su timbre.

En este proyecto, exploraremos solo la influencia de la frecuencia en el sonido.

Montaje del circuito
-----------------------

**Componentes necesarios**

.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * Protoboard
     - 1 * Zumbador pasivo
     - Cables de conexi√≥n
   * - |list_uno_r3| 
     - |list_breadboard| 
     - |list_passive_buzzer| 
     - |list_wire| 
   * - 1 * Cable USB
     - 
     - 
     - 
   * - |list_usb_cable| 
     - 
     - 
     - 



**Paso a paso**

En lecciones anteriores, utilizamos un zumbador activo. En esta lecci√≥n, usaremos un zumbador pasivo. El circuito es el mismo, pero la forma de programarlo para que funcione es diferente.

1. Localiza un zumbador pasivo, que tiene una placa de circuito expuesta en su parte trasera.

.. image:: img/7_beep_2.png

2. Aunque hay un signo de "+" en el zumbador pasivo, no es un dispositivo polarizado. Ins√©rtalo en cualquier direcci√≥n en los agujeros 15F y 18F de la protoboard.

.. image:: img/16_morse_code_buzzer.png
    :width: 500
    :align: center

3. Conecta un pin del zumbador pasivo al pin GND del Arduino Uno R3.

.. image:: img/16_morse_code_gnd.png
    :width: 500
    :align: center

4. Conecta el otro pin del zumbador pasivo al pin 5V del Arduino Uno R3. El zumbador no emitir√° sonido, lo que lo diferencia de un zumbador activo, que s√≠ sonar√≠a al conectarlo de esta manera.

.. image:: img/16_morse_code_5v.png
    :width: 500
    :align: center

5. Ahora, retira el cable insertado en el pin 5V y con√©ctalo al pin 9 del Arduino Uno R3, para que el zumbador pueda ser controlado por c√≥digo.

.. image:: img/16_morse_code.png
    :width: 500
    :align: center


Creaci√≥n de c√≥digo - Hacer sonar el zumbador pasivo
-------------------------------------------------------

Como aprendimos al conectar el circuito, simplemente proporcionar potencia alta y baja a un zumbador pasivo no lo har√° sonar. En la programaci√≥n de Arduino, la funci√≥n ``tone()`` se utiliza para controlar un zumbador pasivo u otros dispositivos de salida de audio para generar un sonido a una frecuencia espec√≠fica.

    * ``tone()``: Genera una onda cuadrada de la frecuencia especificada (y ciclo de trabajo del 50%) en un pin. Se puede especificar una duraci√≥n; de lo contrario, la onda continuar√° hasta una llamada a ``noTone()``.

    **Sintaxis**

        * ``tone(pin, frequency)``
        * ``tone(pin, frequency, duration)``

    **Par√°metros**

        * ``pin``: el pin de Arduino en el que se genera el tono.
        * ``frequency``: la frecuencia del tono en hertzios. Tipos de datos permitidos: unsigned int.
        * ``duration``: la duraci√≥n del tono en milisegundos (opcional). Tipos de datos permitidos: unsigned long.

    **Devuelve**
        Nada


1. Abre el IDE de Arduino y comienza un nuevo proyecto seleccionando ‚ÄúNuevo Sketch‚Äù en el men√∫ ‚ÄúArchivo‚Äù.
2. Guarda tu sketch como ``Lesson21_Tone`` usando ``Ctrl + S`` o haciendo clic en ‚ÄúGuardar‚Äù.

3. Primero, define el pin del zumbador.

.. code-block:: Arduino

    const int buzzerPin = 9;  // Asigna el pin 9 a la constante para el zumbador

    void setup() {
        // Pon tu c√≥digo de configuraci√≥n aqu√≠, para que se ejecute una vez:
    }

4. Para comprender completamente el uso de la funci√≥n ``tone()``, la escribimos en el ``void setup()`` para que el zumbador emita un sonido a una frecuencia espec√≠fica durante un tiempo determinado.

.. code-block:: Arduino
    :emphasize-lines: 5

    const int buzzerPin = 9;  // Asigna el pin 9 a la constante para el zumbador

    void setup() {
        // Pon tu c√≥digo de configuraci√≥n aqu√≠, para que se ejecute una vez:
        tone(buzzerPin, 1000, 100);  // Enciende el zumbador a 1000 Hz con una duraci√≥n de 100 milisegundos
    }

    void loop() {
        // Pon tu c√≥digo principal aqu√≠, para que se ejecute repetidamente:
    }

5. Ahora puedes cargar el c√≥digo en el Arduino Uno R3, despu√©s de lo cual escuchar√°s un breve "bip" del zumbador pasivo, y luego quedar√° en silencio.

**Preguntas**

1. Si cambias los pines del c√≥digo y del circuito a los pines 7 u 8, que no son pines PWM, ¬øel zumbador seguir√° emitiendo sonido? Puedes probarlo y luego escribir tu respuesta en el cuaderno.

2. Para explorar c√≥mo ``frequency`` y ``duration`` en la funci√≥n ``tone(pin, frequency, duration)`` afectan el sonido del zumbador, por favor modifica el c√≥digo en dos condiciones y anota los fen√≥menos observados en tu cuaderno:

* Manteniendo ``frequency`` en 1000, incrementa gradualmente ``duration`` de 100, 500 a 1000. ¬øC√≥mo cambia el sonido del zumbador y por qu√©?

* Manteniendo ``duration`` en 100, incrementa gradualmente ``frequency`` de 1000, 2000 a 5000. ¬øC√≥mo cambia el sonido del zumbador y por qu√©?

Creaci√≥n de c√≥digo - Emitir un sonido de sirena
---------------------------------------------------

Anteriormente, aprendimos c√≥mo hacer que un zumbador emita sonido y comprendimos c√≥mo la frecuencia y la duraci√≥n afectan el sonido. Ahora, si queremos que el zumbador emita un sonido de sirena que suba de tono bajo a alto, ¬øc√≥mo proceder√≠amos?

A partir de nuestras exploraciones anteriores, sabemos que usando la funci√≥n ``tone(pin, frequency)`` podemos hacer que un zumbador pasivo emita sonido. Al aumentar gradualmente la ``frequency``, el tono del sonido del zumbador pasivo ser√° m√°s agudo. Vamos a implementarlo ahora con c√≥digo.

1. Abre el sketch que guardaste anteriormente, ``Lesson21_Tone``.

2. Haz clic en "Guardar como..." en el men√∫ "Archivo", y ren√≥mbralo a ``Lesson21_Siren_Sound``. Haz clic en "Guardar".

3. Escribe la funci√≥n ``tone()`` en el ``void loop()`` y configura tres frecuencias diferentes. Para escuchar claramente la diferencia entre cada sonido, usa la funci√≥n ``delay()`` para separarlos.

.. code-block:: Arduino

    const int buzzerPin = 9;  // Asigna el pin 9 a la constante para el zumbador

    void setup() {
        // Pon tu c√≥digo de configuraci√≥n aqu√≠, para que se ejecute una vez:
    }

    void loop() {
        // Pon tu c√≥digo principal aqu√≠, para que se ejecute repetidamente:
        tone(buzzerPin, 100);  // Activa el zumbador a 100 Hz
        delay(500);
        tone(buzzerPin, 300);  // Activa el zumbador a 300 Hz
        delay(500);
        tone(buzzerPin, 600);  // Activa el zumbador a 600 Hz
        delay(500);
    }

4. En este punto, puedes subir el c√≥digo al Arduino Uno R3 y escuchar√°s que el zumbador repite tres tonos diferentes.

5. Para lograr un aumento de tono m√°s suave, deber√≠amos establecer intervalos m√°s cortos para la ``frecuencia``, como un intervalo de 10, comenzando desde 100, 110, 120... hasta 1000. Podemos escribir el siguiente c√≥digo.

.. code-block:: Arduino

    void loop() {
        // Pon tu c√≥digo principal aqu√≠, para que se ejecute repetidamente:
        tone(buzzerPin, 100);  // Activa el zumbador a 100 Hz
        delay(500);
        tone(buzzerPin, 110);  // Activa el zumbador a 110 Hz
        delay(500);
        tone(buzzerPin, 120);  // Activa el zumbador a 120 Hz
        delay(500);
        tone(buzzerPin, 130);  // Activa el zumbador a 130 Hz
        delay(500);
        tone(buzzerPin, 140);  // Activa el zumbador a 140 Hz
        delay(500);
        tone(buzzerPin, 150);  // Activa el zumbador a 150 Hz
        delay(500);
        tone(buzzerPin, 160);  // Activa el zumbador a 160 Hz
        delay(500);
        ...
    }

6. Notar√°s que si realmente quisieras escribir hasta 1000, este c√≥digo tendr√≠a m√°s de doscientas l√≠neas. En este punto, puedes usar la sentencia ``for``, que se usa para repetir un bloque de instrucciones entre llaves.

    * ``for``: La sentencia ``for`` es √∫til para cualquier operaci√≥n repetitiva, y a menudo se usa junto con matrices para operar sobre colecciones de datos/pines. Generalmente, se usa un contador de incremento para controlar la repetici√≥n y finalizar el bucle.

    **Sintaxis**

    .. code-block::

        for (inicializaci√≥n; condici√≥n; incremento) {
            // instrucci√≥n(es);
        }

    **Par√°metros**

        * ``inicializaci√≥n``: se ejecuta primero y solo una vez.
        * ``condici√≥n``: cada vez que pasa por el bucle, se prueba la condici√≥n; si es verdadera, se ejecuta el bloque de instrucciones y el incremento, luego se prueba la condici√≥n nuevamente. Cuando la condici√≥n es falsa, el bucle termina.
        * ``incremento``: se ejecuta cada vez que pasa por el bucle cuando la condici√≥n es verdadera.

.. image:: img/for_loop.png
    :width: 400
    :align: center

7. Ahora cambia la funci√≥n ``void loop()`` como se muestra a continuaci√≥n, donde ``freq`` comienza en 100 y aumenta de 10 en 10 hasta 1000.

.. code-block:: Arduino
    :emphasize-lines: 3-6

    void loop() {
        // Incrementa gradualmente el tono
        for (int freq = 100; freq <= 1000; freq += 10) {
            tone(buzzerPin, freq);  // Emite un tono
            delay(20);              // Espera antes de cambiar la frecuencia
        }
    }

8. Luego, deja que ``freq`` comience en 1000 y disminuya de 10 en 10 hasta 100, para que puedas escuchar el sonido del zumbador subir y bajar de tono, simulando un sonido de sirena.

.. code-block:: Arduino
    :emphasize-lines: 9-12

    void loop() {
        // Incrementa gradualmente el tono
        for (int freq = 100; freq <= 1000; freq += 10) {
            tone(buzzerPin, freq);  // Emite un tono
            delay(20);              // Espera antes de cambiar la frecuencia
        }

        // Disminuye gradualmente el tono
        for (int freq = 1000; freq >= 100; freq -= 10) {
            tone(buzzerPin, freq);  // Emite un tono
            delay(20);              // Espera antes de cambiar la frecuencia
        }
    }

9. Aqu√≠ tienes tu c√≥digo completo. Ahora puedes hacer clic en "Subir" para cargar el c√≥digo en el Arduino Uno R3.

.. code-block:: Arduino

    const int buzzerPin = 9;  // Asigna el pin 9 a la constante para el zumbador

    void setup() {
        // Pon tu c√≥digo de configuraci√≥n aqu√≠, para que se ejecute una vez:
    }

    void loop() {
        // Incrementa gradualmente el tono
        for (int freq = 100; freq <= 1000; freq += 10) {
            tone(buzzerPin, freq);  // Emite un tono
            delay(20);              // Espera antes de cambiar la frecuencia
        }

        // Disminuye gradualmente el tono
        for (int freq = 1000; freq >= 100; freq -= 10) {
            tone(buzzerPin, freq);  // Emite un tono
            delay(20);              // Espera antes de cambiar la frecuencia
        }
    }

10. Finalmente, recuerda guardar tu c√≥digo y organizar tu espacio de trabajo.

**Resumen**

En esta lecci√≥n, exploramos c√≥mo usar un Arduino y un zumbador pasivo para simular el sonido de una sirena. Al discutir las propiedades f√≠sicas b√°sicas del sonido, como la frecuencia y el tono, aprendimos c√≥mo estos elementos influyen en la percepci√≥n y el efecto del sonido. A trav√©s de actividades pr√°cticas, no solo aprendimos a construir circuitos, sino que tambi√©n dominamos la programaci√≥n con la funci√≥n ``tone()`` en Arduino para controlar la frecuencia y la duraci√≥n del sonido, logrando la simulaci√≥n de un sonido de sirena que sube y baja de tono.


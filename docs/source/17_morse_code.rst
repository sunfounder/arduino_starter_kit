.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez plus profond√©ment dans le monde du Raspberry Pi, d'Arduino et d'ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux nouvelles annonces de produits et aux avant-go√ªts.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et √† des promotions pendant les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

17. Code Morse
========================

Le code Morse est comme un langage secret utilisant des points (.) et des traits (-), invent√© par Samuel Morse dans les ann√©es 1840. Il a √©t√© cr√©√© pour envoyer des messages sur de longues distances √† l'aide de t√©l√©graphes. Chaque lettre de l'alphabet et chaque chiffre sont repr√©sent√©s par une combinaison unique de ces signaux. Par exemple, le message en code Morse le plus c√©l√®bre est "SOS" (¬∑¬∑¬∑ ‚Äì‚Äì‚Äì ¬∑¬∑¬∑), qui est un signal international de d√©tresse. Le code Morse √©tait essentiel pour la communication avant l'invention des t√©l√©phones et d'Internet, et il √©tait particuli√®rement populaire chez les op√©rateurs de navires et d'avions. Aujourd'hui, c'est amusant √† apprendre pour envoyer des messages secrets √† vos amis !

.. raw:: html

    <video controls style = "max-width:90%">
        <source src="_static/video/17_morse_code.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

Dans cette le√ßon, vous apprendrez :

* Comprendre le fonctionnement d'un buzzer actif.
* Apprendre √† coder le signal SOS en code Morse, ce qui vous permettra d'envoyer des messages en code Morse √† l'aide d'un buzzer.


La magie du code Morse !
----------------------------

.. image:: img/7_morse.jpeg

Imaginez inventer une m√©thode pour envoyer des messages secrets en utilisant simplement des points et des traits ! C'est ce que Samuel Morse a fait en 1836 avec le code Morse. Initialement peintre, Morse s'est inspir√© lors d'un voyage en bateau et plus tard, avec son ami Alfred Vail, a cr√©√© le t√©l√©graphe pour envoyer des messages √† travers des fils.

Le code Morse utilise des points (signaux courts) et des traits (signaux longs) pour repr√©senter des lettres et des chiffres. Le premier message en code Morse ? "What hath God wrought" ‚Äî envoy√© en 1844 de Washington D.C. √† Baltimore, lan√ßant l'√®re du t√©l√©graphe.

Aujourd'hui, le code Morse est moins utilis√©, mais il reste cool pour des domaines comme l'aviation et par les amateurs de radio. Maintenant, explorons comment fonctionne le code Morse avec Arduino et un buzzer et amusons-nous avec cette partie de l'histoire de la communication !


Construire le circuit
----------------------

**Composants n√©cessaires**

.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * Buzzer actif
     - 1 * Plaque d'essai (breadboard)
     - C√¢bles de connexion
   * - |list_uno_r3| 
     - |list_active_buzzer| 
     - |list_breadboard| 
     - |list_wire| 
   * - 1 * C√¢ble USB
     - 
     - 
     - 
   * - |list_usb_cable| 
     - 
     - 
     - 


**Instructions de montage**

1. Trouvez un buzzer actif qui poss√®de g√©n√©ralement un autocollant blanc √† l'avant et un dos noir scell√©.

.. image:: img/7_beep_2.png

Les buzzers, en tant que dispositifs sonores √©lectroniques, ont une histoire riche qui remonte au XIXe si√®cle. Le pr√©curseur des buzzers modernes trouve son origine en 1831, lorsque Michael Faraday d√©couvrit l'induction √©lectromagn√©tique, formant ainsi le principe fondamental derri√®re le fonctionnement des buzzers √©lectromagn√©tiques. Suite √† cette d√©couverte r√©volutionnaire, de nombreux scientifiques et inventeurs ont explor√© comment appliquer les th√©ories √©lectromagn√©tiques √† des dispositifs pratiques. Aujourd'hui, les buzzers se divisent en deux cat√©gories : les buzzers actifs et passifs.

**Buzzer actif**

.. image:: img/7_beep_ac.png
    :width: 300
    :align: center

Scell√©s √† l'arri√®re, les buzzers actifs contiennent un oscillateur interne qui √©met un son lorsqu'ils sont aliment√©s, produisant g√©n√©ralement un bip monotone.

**Buzzer passif**

.. image:: img/7_beep_pa.png
    :width: 300
    :align: center

Ouverts √† l'arri√®re, les buzzers passifs n√©cessitent un signal de fr√©quence externe d'un microcontr√¥leur pour g√©n√©rer du son, ce qui permet de produire une gamme de tonalit√©s.

1. Le buzzer actif est √©galement un dispositif polaris√©. Le c√¥t√© avant porte un signe "+" indiquant sa borne positive (anode), qui est √©galement la broche la plus longue. Ins√©rez maintenant le buzzer dans la plaque d'essai avec l'anode dans le trou 15F et la cathode dans le trou 18F.

.. image:: img/16_morse_code_buzzer.png
    :width: 500
    :align: center

2. Connectez la cathode √† la broche GND de l'Arduino Uno R3.

.. image:: img/16_morse_code_gnd.png
    :width: 500
    :align: center

3. Si vous ins√©rez l'anode du buzzer dans la broche 5V de l'Arduino Uno R3, vous entendrez le buzzer actif √©mettre un son directement. Bien s√ªr, vous pouvez √©galement utiliser cette m√©thode pour v√©rifier si le buzzer est correct. Un buzzer passif ne produira pas de son lorsqu'il est directement connect√© √† une source d'alimentation.

.. image:: img/16_morse_code_5v.png
    :width: 500
    :align: center

4. Maintenant, retirez le fil ins√©r√© dans la broche 5V et ins√©rez-le dans la broche 9 de l'Arduino Uno R3, afin que le buzzer puisse √™tre contr√¥l√© par le code.

.. image:: img/16_morse_code.png
    :width: 500
    :align: center

Cr√©ation du code
---------------------
1. Ouvrez l'IDE Arduino et commencez un nouveau projet en s√©lectionnant ¬´ Nouveau Sketch ¬ª dans le menu ¬´ Fichier ¬ª.
2. Sauvegardez votre sketch sous le nom ``Lesson17_Morse_Code`` en utilisant ``Ctrl + S`` ou en cliquant sur ¬´ Sauvegarder ¬ª.

3. Tout d'abord, cr√©ez une constante appel√©e ``buzzerPin`` et attribuez-lui la valeur de la broche 9.

.. code-block:: Arduino
    :emphasize-lines: 1

    const int buzzerPin = 9;   // Assigne la broche 9 √† la constante pour le buzzer

    void setup() {
        // Configurez ici votre code pour qu'il s'ex√©cute une seule fois :
    }

4. Initialisez la broche : dans la fonction ``void setup()``, d√©finissez la broche du buzzer en mode sortie.

.. code-block:: Arduino
    :emphasize-lines: 5

    const int buzzerPin = 9;   // Assigne la broche 9 √† la constante pour le buzzer

    void setup() {
        // Configurez ici votre code pour qu'il s'ex√©cute une seule fois :
        pinMode(buzzerPin, OUTPUT);  // Configure la broche 9 en sortie
    }

5. Faire √©mettre un signal sonore √† un buzzer actif est aussi simple que d'allumer une LED ; il suffit d'utiliser ``digitalWrite()`` pour d√©finir la broche 9 sur haut ou bas et ``delay()`` pour contr√¥ler la dur√©e.

.. code-block:: Arduino
    :emphasize-lines: 10-13

    const int buzzerPin = 9;   // Assigne la broche 9 √† la constante pour le buzzer

    void setup() {
        // Configurez ici votre code pour qu'il s'ex√©cute une seule fois :
        pinMode(buzzerPin, OUTPUT);  // Configure la broche 9 en sortie
    }

    void loop() {
        // Configurez ici votre code pour qu'il s'ex√©cute de mani√®re r√©p√©t√©e :
        digitalWrite(buzzerPin, HIGH);  // Allume le buzzer
        delay(250);                     // Dur√©e du bip : 250 millisecondes
        digitalWrite(buzzerPin, LOW);   // √âteint le buzzer
        delay(250);                     // Intervalle entre les signaux : 250 millisecondes
    }

6. Vous pouvez t√©l√©verser votre code sur l'Arduino Uno R3, et vous entendrez alors un ¬´ bip bip ¬ª sonore.

7. Pour faire √©mettre un code Morse au buzzer, vous devez cr√©er deux fonctions apr√®s ``void loop()``, pour √©mettre des points (signaux courts) et des traits (signaux longs).

.. note::

    En code Morse, il existe des r√®gles de synchronisation traditionnelles pour les points (signaux courts), les traits (signaux longs) et les intervalles entre les signaux afin d'assurer que le message soit re√ßu et compris correctement. Voici quelques r√®gles de base :

    * Longueur d'un point : l'unit√© de temps de base.
    * Longueur d'un trait : √©quivaut √† trois points.
    * Intervalle entre les points : longueur d'un point.
    * Intervalle au sein d'un caract√®re (entre points et traits d'une lettre ou d'un chiffre) : longueur d'un point.
    * Intervalle entre les caract√®res (par exemple, entre deux lettres) : trois points.
    * Intervalle entre les mots (par exemple, entre deux mots) : sept points.

    Par cons√©quent, nous d√©finissons la dur√©e d'un point √† 250ms, celle d'un trait √† 750ms, et l'intervalle entre les √©l√©ments √† 250ms.

.. code-block:: Arduino
    :emphasize-lines: 9-14,16-21

    void loop() {
        // Configurez ici votre code pour qu'il s'ex√©cute de mani√®re r√©p√©t√©e :
        digitalWrite(buzzerPin, HIGH);  // Allume le buzzer
        delay(250);                     // Dur√©e du bip : 250 millisecondes
        digitalWrite(buzzerPin, LOW);   // √âteint le buzzer
        delay(250);                     // Intervalle entre les signaux : 250 millisecondes
    }

    void dot() {
        digitalWrite(buzzerPin, HIGH);
        delay(250);  // Courte dur√©e pour un point
        digitalWrite(buzzerPin, LOW);
        delay(250);  // Intervalle entre les signaux
    }

    void dash() {
        digitalWrite(buzzerPin, HIGH);
        delay(750);  // Dur√©e plus longue pour un trait
        digitalWrite(buzzerPin, LOW);
        delay(250);  // Intervalle entre les signaux
    }

8. Maintenant, vous pouvez transmettre le code Morse. Par exemple, pour envoyer ¬´ SOS ¬ª (... --- ...), le code Morse pour ¬´ S ¬ª est constitu√© de trois points, et ¬´ O ¬ª de trois traits, vous appelez donc simplement les fonctions dot et dash trois fois respectivement.

.. code-block:: Arduino
    :emphasize-lines: 2-11

    void loop() {
        dot();
        dot();
        dot();  // S : ...
        dash();
        dash();
        dash();  // O : ---
        dot();
        dot();
        dot();       // S : ...
        delay(750);  // R√©p√©ter apr√®s un intervalle
    }

9. Voici votre code complet. Vous pouvez maintenant cliquer sur "T√©l√©verser" pour charger le code sur l'Arduino Uno R3, apr√®s quoi vous entendrez le code Morse pour "SOS" (... --- ...).

.. code-block:: Arduino

    const int buzzerPin = 9;   // Assigne la broche 9 √† la constante pour le buzzer
    
    void setup() {
        // Configurez ici votre code pour qu'il s'ex√©cute une seule fois :
        pinMode(buzzerPin, OUTPUT);  // Configure la broche 9 en sortie
    }

    void loop() {
        dot();
        dot();
        dot();  // S: ...
        dash();
        dash();
        dash();  // O: ---
        dot();
        dot();
        dot();       // S: ...
        delay(750);  // R√©p√©ter apr√®s un intervalle
    }

    void dot() {
        digitalWrite(buzzerPin, HIGH);
        delay(250);  // Courte dur√©e pour un point
        digitalWrite(buzzerPin, LOW);
        delay(250);  // Intervalle entre les signaux
    }

    void dash() {
        digitalWrite(buzzerPin, HIGH);
        delay(750);  // Longue dur√©e pour un trait
        digitalWrite(buzzerPin, LOW);
        delay(250);  // Intervalle entre les signaux
    }


10. Enfin, souvenez-vous de sauvegarder votre code et de ranger votre espace de travail.


**R√©sum√©**

Dans cette le√ßon, vous avez d√©couvert les bases du code Morse, un moyen de communication unique d√©velopp√© dans les ann√©es 1840 par Samuel Morse. Vous avez appris √† utiliser un buzzer actif pour envoyer le code Morse pour SOS, un signal de d√©tresse universellement reconnu. Cette le√ßon vous a non seulement appris √† configurer et √† coder un buzzer actif, mais vous a √©galement donn√© un aper√ßu de l'importance historique du code Morse dans les t√©l√©communications. Avec ces comp√©tences, vous pouvez maintenant envoyer des messages en code Morse √† vos amis ou explorer davantage ses applications dans les dispositifs modernes.

Dans cette le√ßon, nous n'avons utilis√© que les codes Morse pour les lettres "S" et "O". Voici le tableau des 26 lettres et des 10 chiffres en code Morse.


.. list-table::
    :widths: 8 8 8 8 8 8 8 8
    :header-rows: 1

    * - Lettre
      - Code
      - Lettre
      - Code
      - Lettre
      - Code
      - Lettre
      - Code
    * - A
      - \.-
      - B
      - \-...
      - C
      - \-.\-.
      - D
      - \-..
    * - E
      - \.
      - F
      - \..-.
      - G
      - \-\-.
      - H
      - \....
    * - I
      - \..
      - J
      - \.\-\-\-
      - K
      - \-.- 
      - L
      - \.-..
    * - M
      - \-- 
      - N
      - \-.
      - O
      - \-\-\-
      - P
      - \.-\-.
    * - Q
      - \-\-.-
      - R
      - \.-.
      - S
      - \...
      - T
      - \-
    * - U
      - \..-
      - V
      - \...-
      - W
      - \.-\-
      - X
      - \-..-
    * - Y
      - \-.-\-
      - Z
      - \-\-..
      - 1
      - \.\-\-\-\-
      - 2
      - \..\-\-\-
    * - 3
      - \...-\-
      - 4
      - \....-
      - 5
      - \.....
      - 6
      - \-....
    * - 7
      - \-\-...
      - 8
      - \-\-\-..
      - 9
      - \-\-\-\-.
      - 
      - 


**Question**

En utilisant le tableau du code Morse fourni, √©crivez un code pour envoyer le message "Hello".

.. note::

    ¬°Hola! Bienvenido a la comunidad de entusiastas de SunFounder Raspberry Pi, Arduino y ESP32 en Facebook. ¬°Sum√©rgete en el mundo de Raspberry Pi, Arduino y ESP32 junto a otros entusiastas!

    **¬øPor qu√© unirse?**

    - **Soporte experto**: Resuelve problemas post-venta y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Avances exclusivos**: Obt√©n acceso anticipado a nuevos productos y adelantos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s nuevos.
    - **Promociones y sorteos festivos**: Participa en sorteos y promociones especiales durante las festividades.

    üëâ ¬øListo para explorar y crear con nosotros? ¬°Haz clic en [|link_sf_facebook|] y √∫nete hoy!

17. C√≥digo Morse
========================

El c√≥digo Morse es como un lenguaje secreto que usa puntos (.) y rayas (-) inventado por Samuel Morse en la d√©cada de 1840. Fue creado para enviar mensajes a largas distancias mediante tel√©grafos. Cada letra del alfabeto y n√∫mero est√° representado por una combinaci√≥n √∫nica de estos s√≠mbolos. Por ejemplo, el mensaje en c√≥digo Morse m√°s famoso es "SOS" (¬∑¬∑¬∑ ‚Äì‚Äì‚Äì ¬∑¬∑¬∑), que es una se√±al internacional de auxilio. El c√≥digo Morse fue esencial para la comunicaci√≥n antes de la invenci√≥n de los tel√©fonos y el internet, y era especialmente popular entre los operadores de barcos y aviones. Hoy en d√≠a, es divertido aprenderlo como una forma de enviar mensajes secretos a tus amigos.

.. raw:: html

    <video controls style = "max-width:90%">
        <source src="_static/video/17_morse_code.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

En esta lecci√≥n aprender√°s:

* C√≥mo funciona un zumbador activo.
* A programar la se√±al SOS en c√≥digo Morse, permiti√©ndote enviar mensajes con un zumbador utilizando este c√≥digo.


¬°La Magia del C√≥digo Morse!
--------------------------------

.. image:: img/7_morse.jpeg

¬°Imagina inventar una forma de enviar mensajes secretos usando solo puntos y rayas! Eso es lo que hizo Samuel Morse en 1836 con el c√≥digo Morse. Inicialmente un pintor, Morse se inspir√≥ en un viaje en barco y m√°s tarde, con su amigo Alfred Vail, cre√≥ el tel√©grafo para enviar mensajes a trav√©s de cables.

El c√≥digo Morse utiliza puntos (se√±ales cortas) y rayas (se√±ales largas) para representar letras y n√∫meros. ¬øEl primer mensaje en c√≥digo Morse? "What hath God wrought"‚Äîenviado en 1844 desde Washington D.C. a Baltimore, marcando el inicio de la era del tel√©grafo.

Hoy en d√≠a, el c√≥digo Morse no se usa tanto, pero sigue siendo genial para cosas como la aviaci√≥n y para los aficionados a la radio. Ahora, vamos a explorar c√≥mo funciona el c√≥digo Morse con Arduino y un zumbador, ¬°y a divertirnos con esta parte de la historia de la comunicaci√≥n!


Construyendo el Circuito
----------------------------

**Componentes necesarios**

.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * Zumbador Activo
     - 1 * Protoboard
     - Cables de conexi√≥n
   * - |list_uno_r3| 
     - |list_active_buzzer| 
     - |list_breadboard| 
     - |list_wire| 
   * - 1 * Cable USB
     - 
     - 
     - 
   * - |list_usb_cable| 
     - 
     - 
     - 


**Pasos de Construcci√≥n**

1. Localiza un zumbador activo, que t√≠picamente tiene una pegatina blanca en la parte delantera y un respaldo sellado negro.

.. image:: img/7_beep_2.png

Los zumbadores, como dispositivos electr√≥nicos de sonido, tienen una rica historia que se remonta al siglo XIX. El precursor de los zumbadores modernos se origina en 1831, cuando Michael Faraday descubri√≥ la inducci√≥n electromagn√©tica, formando el principio fundamental detr√°s del funcionamiento de los zumbadores electromagn√©ticos. Despu√©s de este descubrimiento, muchos cient√≠ficos e inventores exploraron c√≥mo aplicar las teor√≠as electromagn√©ticas a dispositivos pr√°cticos. Hoy en d√≠a, los zumbadores se clasifican en activos y pasivos:

**Zumbador Activo**

.. image:: img/7_beep_ac.png
    :width: 300
    :align: center

Sellado en la parte posterior, los zumbadores activos contienen un oscilador interno que emite sonido cuando est√°n alimentados, produciendo t√≠picamente un solo tono.

**Zumbador Pasivo**

.. image:: img/7_beep_pa.png
    :width: 300
    :align: center

Abierto en la parte posterior, los zumbadores pasivos requieren una se√±al de frecuencia externa de un microcontrolador para generar sonido, permitiendo una gama de tonos.

2. El zumbador activo es un dispositivo polar. El lado frontal tiene un signo "+" que indica su terminal positivo (√°nodo), que tambi√©n es el pin m√°s largo. Ahora inserta el zumbador en el protoboard con el √°nodo en el agujero 15F y el c√°todo en el agujero 18F.

.. image:: img/16_morse_code_buzzer.png
    :width: 500
    :align: center

3. Conecta el c√°todo al pin GND en el Arduino Uno R3.

.. image:: img/16_morse_code_gnd.png
    :width: 500
    :align: center

4. Si insertas el √°nodo del zumbador en el pin 5V del Arduino Uno R3, escuchar√°s el zumbador activo emitir sonido directamente. Por supuesto, tambi√©n puedes usar este m√©todo para verificar si el zumbador es el correcto. Un zumbador pasivo no producir√° sonido cuando se conecte directamente a una fuente de alimentaci√≥n.

.. image:: img/16_morse_code_5v.png
    :width: 500
    :align: center

5. Ahora, retira el cable insertado en el pin 5V e ins√©rtalo en el pin 9 del Arduino Uno R3, para que el zumbador pueda ser controlado con c√≥digo.

.. image:: img/16_morse_code.png
    :width: 500
    :align: center



Creaci√≥n del C√≥digo
-----------------------
1. Abre el Arduino IDE y comienza un nuevo proyecto seleccionando "Nuevo Sketch" desde el men√∫ "Archivo".
2. Guarda tu sketch como ``Lesson17_Morse_Code`` usando ``Ctrl + S`` o haciendo clic en "Guardar".

3. Primero, crea una constante llamada ``buzzerPin`` y as√≠gnale el valor del pin 9.

.. code-block:: Arduino
    :emphasize-lines: 1

    const int buzzerPin = 9;   // Asigna el pin 9 a la constante para el zumbador

    void setup() {
        // Pon tu c√≥digo de configuraci√≥n aqu√≠, para que se ejecute una vez:
    }

4. Inicializa el pin: En la funci√≥n ``void setup()``, configura el pin del zumbador como salida.

.. code-block:: Arduino
    :emphasize-lines: 5

    const int buzzerPin = 9;   // Asigna el pin 9 a la constante para el zumbador

    void setup() {
        // Pon tu c√≥digo de configuraci√≥n aqu√≠, para que se ejecute una vez:
        pinMode(buzzerPin, OUTPUT);  // Configura el pin 9 como salida
    }

5. Hacer que un zumbador activo suene es tan simple como encender un LED; solo necesitas usar ``digitalWrite()`` para poner el pin 9 en alto o bajo y ``delay()`` para controlar el tiempo.

.. code-block:: Arduino
    :emphasize-lines: 10-13

    const int buzzerPin = 9;   // Asigna el pin 9 a la constante para el zumbador

    void setup() {
        // Pon tu c√≥digo de configuraci√≥n aqu√≠, para que se ejecute una vez:
        pinMode(buzzerPin, OUTPUT);  // Configura el pin 9 como salida
    }

    void loop() {
        // Pon tu c√≥digo principal aqu√≠, para que se ejecute repetidamente:
        digitalWrite(buzzerPin, HIGH);  // Enciende el zumbador
        delay(250);                     // Duraci√≥n del pitido: 250 milisegundos
        digitalWrite(buzzerPin, LOW);   // Apaga el zumbador
        delay(250);                     // Intervalo entre se√±ales: 250 milisegundos
    }

6. Puedes cargar tu c√≥digo en el Arduino Uno R3, y luego escuchar√°s el sonido de "bip bip".


7. Para hacer que el zumbador emita c√≥digo Morse, necesitas crear dos funciones despu√©s de ``void loop()``, para emitir puntos (se√±ales cortas) y rayas (se√±ales largas).

.. note::

    En el c√≥digo Morse, existen reglas tradicionales de temporizaci√≥n para los puntos (se√±ales cortas), las rayas (se√±ales largas) y los intervalos entre se√±ales para asegurar que el mensaje sea recibido y comprendido correctamente. Aqu√≠ est√°n algunas reglas b√°sicas:

    * Duraci√≥n de un punto: la unidad de tiempo b√°sica.
    * Duraci√≥n de una raya: equivale a tres puntos.
    * Intervalo entre puntos: la duraci√≥n de un punto.
    * Intervalo dentro de un car√°cter (entre puntos y rayas de una letra o n√∫mero): la duraci√≥n de un punto.
    * Intervalo entre caracteres (por ejemplo, entre dos letras): tres puntos.
    * Intervalo entre palabras (por ejemplo, entre dos palabras): siete puntos.

    Por lo tanto, establecemos la duraci√≥n de un punto en 250ms, una raya en 750ms y el intervalo entre elementos en 250ms.

.. code-block:: Arduino
    :emphasize-lines: 9-14,16-21

    void loop() {
        // Pon tu c√≥digo principal aqu√≠, para que se ejecute repetidamente:
        digitalWrite(buzzerPin, HIGH);  // Enciende el zumbador
        delay(250);                     // Duraci√≥n del pitido: 250 milisegundos
        digitalWrite(buzzerPin, LOW);   // Apaga el zumbador
        delay(250);                     // Intervalo entre se√±ales: 250 milisegundos
    }

    void dot() {
        digitalWrite(buzzerPin, HIGH);
        delay(250);  // Duraci√≥n corta para un punto
        digitalWrite(buzzerPin, LOW);
        delay(250);  // Intervalo entre se√±ales
    }

    void dash() {
        digitalWrite(buzzerPin, HIGH);
        delay(750);  // Duraci√≥n m√°s larga para una raya
        digitalWrite(buzzerPin, LOW);
        delay(250);  // Intervalo entre se√±ales
    }

8. Ahora, puedes transmitir c√≥digo Morse. Por ejemplo, para enviar "SOS" (... --- ...), el c√≥digo Morse para 'S' consiste en tres puntos, y 'O' en tres rayas, por lo que simplemente llamas a las funciones de punto y raya tres veces respectivamente.

.. code-block:: Arduino
    :emphasize-lines: 2-11

    void loop() {
        dot();
        dot();
        dot();  // S: ...
        dash();
        dash();
        dash();  // O: ---
        dot();
        dot();
        dot();       // S: ...
        delay(750);  // Repite despu√©s de un per√≠odo
    }

9. Aqu√≠ est√° tu c√≥digo completo. Ahora puedes hacer clic en "Subir" para cargar el c√≥digo en el Arduino Uno R3, y luego escuchar√°s el c√≥digo Morse para "SOS" (... --- ...).

.. code-block:: Arduino

    const int buzzerPin = 9;   // Asigna el pin 9 a la constante para el zumbador
    
    void setup() {
        // Configura el pin 9 como salida:
        pinMode(buzzerPin, OUTPUT);  
    }

    void loop() {
        dot();
        dot();
        dot();  // S: ...
        dash();
        dash();
        dash();  // O: ---
        dot();
        dot();
        dot();       // S: ...
        delay(750);  // Repite despu√©s de un per√≠odo
    }

    void dot() {
        digitalWrite(buzzerPin, HIGH);
        delay(250);  // Duraci√≥n corta para un punto
        digitalWrite(buzzerPin, LOW);
        delay(250);  // Intervalo entre se√±ales
    }

    void dash() {
        digitalWrite(buzzerPin, HIGH);
        delay(750);  // Duraci√≥n m√°s larga para una raya
        digitalWrite(buzzerPin, LOW);
        delay(250);  // Intervalo entre se√±ales
    }


10. Finalmente, recuerda guardar tu c√≥digo y ordenar tu √°rea de trabajo.


**Resumen**

En esta lecci√≥n, has explorado los fundamentos del c√≥digo Morse, una forma √∫nica de comunicaci√≥n desarrollada en la d√©cada de 1840 por Samuel Morse. Aprendiste c√≥mo utilizar un zumbador activo para enviar el c√≥digo Morse para SOS, una se√±al de socorro reconocida internacionalmente. Esta lecci√≥n no solo te ense√±√≥ c√≥mo configurar y programar un zumbador activo, sino que tambi√©n te dio una visi√≥n de la importancia hist√≥rica del c√≥digo Morse en las telecomunicaciones. Con estas habilidades, ahora puedes enviar mensajes secretos en c√≥digo Morse a amigos o explorar m√°s aplicaciones en dispositivos modernos.

En esta lecci√≥n, solo utilizamos los c√≥digos Morse para las letras "S" y "O". Aqu√≠ tienes la tabla del c√≥digo Morse con las 26 letras y los 10 n√∫meros.

.. list-table::
    :widths: 8 8 8 8 8 8 8 8
    :header-rows: 1

    * - Letter
      - Code
      - Letter
      - Code
      - Letter
      - Code
      - Letter
      - Code
    * - A
      - \.-
      - B
      - \-...
      - C
      - \-.\-.
      - D
      - \-..
    * - E
      - \.
      - F
      - \..-.
      - G
      - \-\-.
      - H
      - \....
    * - I
      - \..
      - J
      - \.\-\-\-
      - K
      - \-.-
      - L
      - \.-..
    * - M
      - \--
      - N
      - \-.
      - O
      - \-\-\-
      - P
      - \.-\-.
    * - Q
      - \-\-.- 
      - R
      - \.-.
      - S
      - \...
      - T
      - \-
    * - U
      - \..-
      - V
      - \...-
      - W
      - \.-\-
      - X
      - \-..-
    * - Y
      - \-.-\-
      - Z
      - \-\-..
      - 1
      - \.\-\-\-\-
      - 2
      - \..\-\-\-
    * - 3
      - \...-\-
      - 4
      - \....-
      - 5
      - \.....
      - 6
      - \-....
    * - 7
      - \-\-...
      - 8
      - \-\-\-..
      - 9
      - \-\-\-\-.
      - 
      - 


**Pregunta**

Usando la tabla de c√≥digo Morse proporcionada, escribe un c√≥digo para enviar el mensaje "Hello".


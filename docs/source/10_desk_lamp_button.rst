.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez plus profond√©ment dans l'univers du Raspberry Pi, d'Arduino et d'ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos nouveaux produits.
    - **Promotions festives et concours** : Participez √† des concours et √† des promotions pendant les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

10. Lampe de Bureau ON/OFF
====================================

Dans cette le√ßon, vous allez enrichir votre projet pr√©c√©dent en ajoutant une fonctionnalit√© pratique √† votre lampe de bureau r√©glable : un bouton marche/arr√™t. Cette am√©lioration simule un sc√©nario r√©el o√π les lampes de bureau sont allum√©es ou √©teintes, puis ajust√©es en luminosit√© avec un variateur, reproduisant ainsi plus fid√®lement une utilisation quotidienne.

.. image:: img/10_desk_lamp_button.jpg
    :width: 500
    :align: center

* Apprenez √† utiliser le moniteur s√©rie pour afficher des donn√©es en temps r√©el.
* Impl√©mentez le mode ``INPUT_PULLUP`` pour g√©rer efficacement les entr√©es du bouton.
* Comprenez comment d√©tecter les changements d'√©tat.
* Explorez les caract√©ristiques des signaux num√©riques et analogiques.
* Utilisez les instructions conditionnelles (``if else``).

Construction du Circuit
------------------------------------

**Composants N√©cessaires**

.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * LED rouge
     - 1 * R√©sistance de 220Œ©
     - 1 * Potentiom√®tre
   * - |list_uno_r3| 
     - |list_red_led| 
     - |list_220ohm| 
     - |list_potentiometer| 
   * - 1 * Bouton
     - 1 * C√¢ble USB
     - 1 * Breadboard
     - Fils de Connexion
   * - |list_button| 
     - |list_usb_cable| 
     - |list_breadboard| 
     - |list_wire| 



**√âtapes de Construction**

1. Commencez par le circuit de la lampe de bureau de la le√ßon pr√©c√©dente.

.. image:: img/9_dimmer_led1_pin9.png
    :width: 500
    :align: center

2. Ins√©rez le bouton dans la breadboard en traversant le vide central, avec les broches dans les trous 6E, 8E, 6J et 8J.

.. note::

    Si vous ne savez pas comment ins√©rer le bouton, essayez les deux orientations. Dans un sens, l'√©cartement des broches sera l√©g√®rement trop √©troit pour s'adapter.

.. image:: img/10_desk_lamp_button_button.png
    :width: 500
    :align: center

3. Connectez la broche en bas √† gauche du bouton √† la pin num√©rique 7 de l'Arduino Uno R3 √† l'aide d'un long fil, en ins√©rant une extr√©mit√© dans le trou 8J et l'autre dans la pin 7.

.. image:: img/10_desk_lamp_button_p7.png
    :width: 500
    :align: center

4. Connectez la broche en haut √† droite du bouton au rail n√©gatif de la breadboard avec un court fil, en ins√©rant une extr√©mit√© dans le trou 6A et l'autre dans le rail n√©gatif.

.. image:: img/10_desk_lamp_button_gnd.png
    :width: 500
    :align: center

Cr√©ation de Code
---------------------


**Afficher l'√âtat du Bouton**

1. Ouvrez le sketch que vous avez sauvegard√© pr√©c√©demment, ``Lesson9_Desk_Lamp``. Cliquez sur "Enregistrer sous..." dans le menu "Fichier", et renommez-le en ``Lesson10_Desk_Lamp_Button``. Cliquez sur "Enregistrer".

2. Dans la le√ßon 8, nous avons utilis√© un bouton avec une r√©sistance de pull-down de 10K connect√©e manuellement entre GND et le bouton. Cependant, dans ce circuit, nous n'avons pas connect√© de r√©sistance. √Ä la place, nous pouvons utiliser la fonctionnalit√© de pull-up interne d'Arduino. Vous devez d√©finir la pin connect√©e au bouton comme entr√©e tout en l'ajustant √† ``PULLUP``.

.. code-block:: Arduino
    :emphasize-lines: 6

    int potValue = 0;

    void setup() {
        // Mettez votre code de configuration ici, √† ex√©cuter une fois :
        pinMode(9, OUTPUT);        // D√©finir la pin 9 comme sortie
        pinMode(7, INPUT_PULLUP);  // D√©finir la pin 7 comme entr√©e avec une r√©sistance de pull-up interne
    }

3. Pour utiliser le moniteur s√©rie, vous devez inclure une commande qui initialise la communication s√©rie sur l'Arduino Uno R3.

Cette commande est g√©n√©ralement plac√©e dans la section ``void setup()`` du sketch. La commande ``Serial.begin(baud)`` d√©marre la communication s√©rie, o√π ``baud`` repr√©sente la vitesse de transfert des donn√©es par seconde entre l'ordinateur et l'Arduino Uno R3. Les vitesses de transfert courantes sont 9600 et 115200 bits par seconde.

.. code-block:: Arduino
    :emphasize-lines: 7

    int potValue = 0;

    void setup() {
        // Mettez votre code de configuration ici, √† ex√©cuter une fois :
        pinMode(9, OUTPUT);        // D√©finir la pin 9 comme sortie
        pinMode(7, INPUT_PULLUP);  // D√©finir la pin 7 comme entr√©e avec une r√©sistance de pull-up interne
        Serial.begin(9600);        // Initialisation de la communication s√©rie √† 9600 bauds
    }

4. Avant d'entrer dans la fonction ``void loop()``, nous devons √©galement cr√©er deux variables pour initialiser les √©tats du bouton et de la LED. La LED doit √™tre √©teinte en l'absence d'interaction, donc d√©finissez son √©tat sur LOW. Comme le bouton utilise une r√©sistance de pull-up interne, il sera lu comme HIGH lorsqu'il n'est pas press√©.

.. code-block:: Arduino
    :emphasize-lines: 2,3

    int potValue = 0;  // Variable pour stocker la valeur lue du potentiom√®tre
    int ledState = LOW;          // √âtat initial de la LED
    int lastButtonState = HIGH;  // La derni√®re lecture de la pin d'entr√©e

    void setup() {
        pinMode(9, OUTPUT);        // D√©finir la pin 9 comme sortie
        pinMode(7, INPUT_PULLUP);  // D√©finir la pin 7 comme entr√©e avec une r√©sistance de pull-up interne
        Serial.begin(9600);        // Initialisation de la communication s√©rie √† 9600 bauds
    }

5. Maintenant, dans la fonction ``void loop()``, lisez d'abord l'√©tat du bouton en utilisant ``digitalRead()`` et stockez-le dans la variable ``buttonState``.

.. code-block:: Arduino
    :emphasize-lines: 2

    void loop() {
        int buttonState = digitalRead(7);  // Read the state of the button
    }

6. Vous √™tes maintenant pr√™t √† utiliser le moniteur s√©rie pour afficher des donn√©es. Vous utiliserez ``Serial.print()`` pour afficher des donn√©es et d'autres textes.

Voici comment l'utiliser :


    * ``Serial.print(val)`` ou ``Serial.print(val, format)`` : Affiche des donn√©es sur le port s√©rie sous forme de texte ASCII lisible.

    **Param√®tres**
        - ``Serial`` : objet du port s√©rie.
        - ``val`` : la valeur √† afficher. Types de donn√©es autoris√©s : tout type de donn√©es.

    **Retourne**
        ``print()`` renvoie le nombre d'octets √©crits, bien que la lecture de ce nombre soit optionnelle. Type de donn√©es : size_t.

Cette commande peut repr√©senter divers types de donn√©es et formats, y compris les nombres, les points flottants, les octets et les cha√Ænes de caract√®res. Par exemple :

.. code-block:: Arduino

    Serial.print(78);                // affiche "78"
    Serial.print(78, BIN);           // affiche "1001110"
    Serial.print(1.23456);           // affiche "1.23"
    Serial.print(1.23456, 0);        // affiche "1"
    Serial.print('N');               // affiche "N"
    Serial.print("Bonjour tout le monde.");  // affiche "Bonjour tout le monde."

7. Utilisez cette commande pour afficher un message indiquant les donn√©es sur le point d'√™tre imprim√©es. Cela est utile pour diff√©rencier plusieurs impressions de donn√©es en m√™me temps.

.. code-block:: Arduino
    :emphasize-lines: 3

    void loop() {
        int buttonState = digitalRead(7);  // Lire l'√©tat du bouton
        Serial.print("Button State: ");
    }

8. Imprimez maintenant la valeur stock√©e dans la variable ``buttonState``. Pour vous assurer que chaque sortie appara√Æt sur une nouvelle ligne dans le Moniteur S√©rie, utilisez ``Serial.println()``, qui ajoute un caract√®re de retour √† la ligne √† la fin de l'instruction print.

.. note::

    Notez la diff√©rence entre l'impression de caract√®res ou de cha√Ænes (qui doivent √™tre plac√©s entre guillemets) et les variables qui sont ins√©r√©es directement.

.. code-block:: Arduino
    :emphasize-lines: 14

    int potValue = 0;  // Variable pour stocker la valeur lue du potentiom√®tre
    int ledState = LOW;          // √âtat initial de la LED
    int lastButtonState = HIGH;  // La derni√®re lecture de la pin d'entr√©e

    void setup() {
        pinMode(9, OUTPUT);        // D√©finir la pin 9 comme sortie
        pinMode(7, INPUT_PULLUP);  // D√©finir la pin 7 comme entr√©e avec une r√©sistance de pull-up interne
        Serial.begin(9600);        // Initialisation de la communication s√©rie √† 9600 bauds
    }

    void loop() {
        int buttonState = digitalRead(7);  // Lire l'√©tat du bouton
        Serial.print("√âtat du Bouton : ");
        Serial.println(buttonState);  // Imprimer l'√©tat actuel du bouton
    }

9. √Ä ce stade, le code est essentiellement complet. Cliquez sur "T√©l√©verser" pour t√©l√©verser le code sur l'Arduino Uno R3.

.. note::

    Chaque fois que des donn√©es sont transmises de la carte √† l'ordinateur, vous devriez voir la LED TX sur votre Arduino Uno R3 clignoter.

10. Ensuite, cliquez sur le bouton "Moniteur S√©rie" en haut √† droite de l'IDE Arduino.

.. image:: img/10_dimmer_led_serial.png
    :align: center

11. Si vous voyez des donn√©es illisibles affich√©es, vous devrez ajuster le d√©bit en bauds pour qu'il corresponde √† celui d√©fini dans votre code.

.. image:: img/10_dimmer_led_serial_baud.png
    :align: center

12. Vous constaterez que lorsque le bouton n'est pas press√©, il imprime continuellement "1", et lorsque le bouton est press√©, il imprime continuellement "0". C'est la caract√©ristique d'un signal num√©rique, qui n'a que deux √©tats : "0" et "1".

**D√©tection des Changements d'√âtat du Bouton**

Dans cette section, nous allons apprendre √† utiliser un simple bouton pour contr√¥ler une LED en basculant son √©tat de ON √† OFF et vice versa. Cela implique de d√©tecter le moment pr√©cis o√π l'√©tat du bouton passe de non appuy√© √† appuy√©.

1. Commen√ßons par la fonction principale qui surveille l'appui sur le bouton.

Auparavant, nous avons appris √† d√©terminer si un bouton est appuy√© en lisant son √©tat comme ``HIGH`` ou ``LOW``. Cependant, cette le√ßon vise √† r√©agir √† un simple appui sans qu'il soit n√©cessaire de maintenir le bouton enfonc√©. Cela n√©cessite de d√©tecter un changement d'√©tat du bouton.

Pour y parvenir, nous utilisons une instruction ``if`` qui compare l'√©tat pr√©c√©dent du bouton (``lastButtonState``) avec son √©tat actuel (``buttonState``). L'op√©rateur logique ``&&`` est utilis√© ici, ce qui signifie que les deux conditions doivent √™tre vraies pour que le bloc de code dans l'instruction ``if`` soit ex√©cut√©.

.. code-block:: Arduino
    :emphasize-lines: 7,8

    void loop() {
        int buttonState = digitalRead(7);  // Lire l'√©tat du bouton
        Serial.print("Button State: ");
        Serial.println(buttonState);  // Imprimer l'√©tat actuel du bouton
            
        // V√©rifier si l'√©tat du bouton a chang√© depuis la derni√®re it√©ration de la boucle
        if (lastButtonState == HIGH && buttonState == LOW) {  // Appui sur le bouton d√©tect√©
        }
    }

2. Lorsque l'appui sur le bouton est d√©tect√©, nous basculons l'√©tat de la LED. Cela signifie que si la LED √©tait √©teinte, elle s'allume, et si elle √©tait allum√©e, elle s'√©teint. L'op√©rateur ``!`` est utilis√© pour inverser l'√©tat de la variable ledState.

.. code-block:: Arduino
    :emphasize-lines: 8

    void loop() {
        int buttonState = digitalRead(7);  // Lire l'√©tat du bouton
        Serial.print("Button State: ");
        Serial.println(buttonState);  // Imprimer l'√©tat actuel du bouton
            
        // V√©rifier si l'√©tat du bouton a chang√© depuis la derni√®re it√©ration de la boucle
        if (lastButtonState == HIGH && buttonState == LOW) {  // Appui sur le bouton d√©tect√©
            ledState = !ledState;                               // Basculer l'√©tat de la LED
        }
    }

3. Apr√®s avoir v√©rifi√© l'√©tat du bouton et mis √† jour la LED en cons√©quence, nous devons enregistrer l'√©tat actuel du bouton comme le nouveau 'dernier √©tat connu'. Cette √©tape est cruciale pour d√©tecter le prochain changement d'√©tat.

.. code-block:: Arduino
    :emphasize-lines: 10,11

    void loop() {
        int buttonState = digitalRead(7);  // Lire l'√©tat du bouton
        Serial.print("Button State: ");
        Serial.println(buttonState);  // Imprimer l'√©tat actuel du bouton
        
        // V√©rifier si l'√©tat du bouton a chang√© depuis la derni√®re it√©ration de la boucle
        if (lastButtonState == HIGH && buttonState == LOW) {  // Appui sur le bouton d√©tect√©
            ledState = !ledState;                               // Basculer l'√©tat de la LED
        }
        lastButtonState = buttonState;  // Mettre √† jour lastButtonState avec l'√©tat actuel
        delay(200);                     // Optionnel : Simple anti-rebond logiciel
    }

**Ajuster la Luminosit√© avec un Potentiom√®tre**

Dans les sc√©narios o√π ``ledState`` est √† ``HIGH``, nous voulons que la LED ne se contente pas de s'allumer, mais que sa luminosit√© puisse √©galement √™tre ajust√©e √† l'aide d'un potentiom√®tre. Voici comment vous pouvez impl√©menter cette fonctionnalit√© :

1. Juste apr√®s l'instruction ``if`` qui bascule l'√©tat de la LED lors d'un appui sur le bouton, ajoutez une autre instruction ``if`` pour v√©rifier si ``ledState`` est √† ``HIGH``. Si c'est le cas, c'est ici que nous ajusterons la luminosit√© de la LED en fonction de la valeur du potentiom√®tre.

.. code-block:: Arduino
    :emphasize-lines: 10,12

    void loop() {
        int buttonState = digitalRead(7);  // Lire l'√©tat du bouton
        Serial.print("Button State: ");
        Serial.println(buttonState);  // Imprimer l'√©tat actuel du bouton
        
        // V√©rifier si l'√©tat du bouton a chang√© depuis la derni√®re it√©ration
        if (lastButtonState == HIGH && buttonState == LOW) {  // Appui sur le bouton d√©tect√©
            ledState = !ledState;                               // Basculer l'√©tat de la LED
        }
        if (ledState == HIGH) {

        }
        lastButtonState = buttonState;  // Mettre √† jour lastButtonState avec l'√©tat actuel
        delay(200);                     // Optionnel : Simple anti-rebond logiciel
    }

2. √Ä l'int√©rieur du bloc ``if (ledState == HIGH)``, lisez la valeur du potentiom√®tre pour d√©terminer le niveau de luminosit√©. Ensuite, appliquez cette valeur pour ajuster la luminosit√© de la LED √† l'aide de ``analogWrite()``. Imprimez √©galement cette valeur dans le Moniteur S√©rie pour obtenir un retour en temps r√©el.

.. code-block:: Arduino
    :emphasize-lines: 6-9

    // V√©rifier si l'√©tat du bouton a chang√© depuis la derni√®re it√©ration
    if (lastButtonState == HIGH && buttonState == LOW) {  // Appui sur le bouton d√©tect√©
        ledState = !ledState;                               // Basculer l'√©tat de la LED
    }
    if (ledState == HIGH) {
        potValue = analogRead(A0);  // Lire en continu la valeur du potentiom√®tre lorsque la LED est allum√©e
        analogWrite(9, potValue / 4);  // Ajuster en continu la luminosit√©
        Serial.print("Pot Value: ");
        Serial.println(potValue);
    }
    lastButtonState = buttonState;  // Mettre √† jour lastButtonState avec l'√©tat actuel
    delay(200);                     // Optionnel : Simple anti-rebond logiciel

3. Pour vous assurer que la LED s'√©teint lorsque ``ledState`` est √† ``LOW``, ajoutez une instruction ``else`` apr√®s le bloc ``if``. Cela permettra d'√©teindre compl√®tement la LED lorsque les conditions dans le ``if`` ne sont pas remplies.

.. image:: img/if_else.png
    :width: 400
    :align: center

.. code-block:: Arduino
    :emphasize-lines: 6-8

    if (ledState == HIGH) {
        potValue = analogRead(A0);  // Lire en continu la valeur du potentiom√®tre lorsque la LED est allum√©e
        analogWrite(9, potValue / 4);  // Ajuster en continu la luminosit√©
        Serial.print("Pot Value: ");
        Serial.println(potValue);
    } else {
        analogWrite(9, 0);  // √âteindre la LED
    }

**Ex√©cution du Code**

Maintenant que votre code est complet, voici la liste compl√®te :

.. code-block:: Arduino

    int potValue = 0;            // Variable pour stocker la valeur lue du potentiom√®tre
    int ledState = LOW;          // √âtat initial de la LED
    int lastButtonState = HIGH;  // La derni√®re lecture de la pin d'entr√©e

    void setup() {
        pinMode(9, OUTPUT);        // D√©finir la pin 9 comme sortie
        pinMode(7, INPUT_PULLUP);  // D√©finir la pin 7 comme entr√©e avec une r√©sistance de pull-up interne
        Serial.begin(9600);        // Initialisation de la communication s√©rie √† 9600 bauds
    }

    void loop() {
        int buttonState = digitalRead(7);  // Lire l'√©tat du bouton
        Serial.print("Button State: ");
        Serial.println(buttonState);

        // V√©rifier si l'√©tat du bouton a chang√© depuis la derni√®re it√©ration
        if (lastButtonState == HIGH && buttonState == LOW) {  // Appui sur le bouton d√©tect√©
            ledState = !ledState;                               // Basculer l'√©tat de la LED
        }

        if (ledState == HIGH) {
            potValue = analogRead(A0);  // Lire en continu la valeur du potentiom√®tre lorsque la LED est allum√©e
            analogWrite(9, potValue / 4);  // Ajuster en continu la luminosit√©
            Serial.print("Pot Value: ");
            Serial.println(potValue);
        } else {
            analogWrite(9, 0);  // √âteindre la LED
        }

        lastButtonState = buttonState;  // Mettre √† jour lastButtonState avec l'√©tat actuel
        delay(200);                     // Optionnel : Simple anti-rebond logiciel
    }

1. Apr√®s avoir s√©lectionn√© la carte et le port corrects, cliquez sur "T√©l√©verser" pour t√©l√©charger le code sur votre Arduino.

2. Ouvrez le Moniteur S√©rie pour visualiser les donn√©es de sortie. Vous remarquerez que l'√©tat du bouton affiche "1" en continu lorsqu'il n'est pas press√© et "0" au moment o√π il est press√©. En m√™me temps, la valeur du potentiom√®tre sera √©galement imprim√©e. Lorsque vous tournez le potentiom√®tre, vous observerez dans le Moniteur S√©rie que plus la valeur est √©lev√©e, plus la LED devient lumineuse, et vice versa.

.. image:: img/10_dimmer_led_serial_tool.png
    :align: center

.. note::

    Vous devez d√©sormais bien comprendre :

    - Les signaux num√©riques n'ont que deux √©tats : 0 et 1.
    - Les signaux analogiques, en revanche, ont une plage de valeurs, dans ce cas de 0 √† 1023.

3. Enfin, n'oubliez pas de sauvegarder votre code et de ranger votre espace de travail.

**Question**

1. Que se passerait-il si vous d√©finissiez la pin num√©rique 7 uniquement sur INPUT ? Pourquoi ?

.. code-block::
    :emphasize-lines: 3

    void setup() {
        pinMode(9, OUTPUT);        // D√©finir la pin 9 comme sortie
        pinMode(7, INPUT);  // D√©finir la pin 7 comme entr√©e
        Serial.begin(9600);        // Initialisation de la communication s√©rie √† 9600 bauds
    }

2. Si la pin 7 est d√©finie uniquement sur ``INPUT``, quels ajustements faudrait-il apporter au circuit ?

**R√©sum√©**

√Ä la fin de cette le√ßon, vous aurez une lampe de bureau ON/OFF enti√®rement fonctionnelle, contr√¥l√©e via une interface utilisateur simple. Vous aurez ma√Ætris√© l'int√©gration et la manipulation de divers composants √©lectroniques ainsi que les techniques de programmation Arduino pour cr√©er un dispositif √©lectronique pratique et interactif. Ce projet renforce non seulement les concepts fondamentaux en √©lectronique et en programmation, mais vous donne √©galement une pi√®ce fonctionnelle √† ajouter √† votre collection de projets DIY.

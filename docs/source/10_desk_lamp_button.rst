.. note::

    ¬°Hola! Bienvenido a la comunidad de entusiastas de SunFounder Raspberry Pi, Arduino y ESP32 en Facebook. Sum√©rgete en el mundo de Raspberry Pi, Arduino y ESP32 junto a otros entusiastas.

    **¬øPor qu√© unirte?**

    - **Soporte de expertos**: Resuelve problemas post-venta y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Vistas previas exclusivas**: Obt√©n acceso anticipado a anuncios y adelantos de nuevos productos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones y sorteos festivos**: Participa en sorteos y promociones especiales durante las festividades.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo.

10. L√°mpara de escritorio ON/OFF
====================================

En esta lecci√≥n, ampliar√°s tu proyecto anterior a√±adiendo una caracter√≠stica pr√°ctica a tu l√°mpara de escritorio regulable: un bot√≥n conmutable. Esta mejora simula un escenario real en el que las l√°mparas de escritorio se encienden o apagan y luego se ajustan para controlar el brillo mediante un regulador, imitando m√°s de cerca la funcionalidad cotidiana.

.. image:: img/10_desk_lamp_button.jpg
    :width: 500
    :align: center

* Aprende a usar el Monitor Serial para mostrar datos en tiempo real.
* Implementa el modo ``INPUT_PULLUP`` para gestionar entradas de botones de forma eficiente.
* Entiende c√≥mo detectar cambios de un estado a otro.
* Explora las caracter√≠sticas de las se√±ales digitales y anal√≥gicas.
* Usa sentencias condicionales (``if else``).

Construye el Circuito
------------------------------------

**Componentes necesarios**


.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * LED rojo
     - 1 * Resistencia de 220Œ©
     - 1 * Potenci√≥metro
   * - |list_uno_r3| 
     - |list_red_led| 
     - |list_220ohm| 
     - |list_potentiometer| 
   * - 1 * Bot√≥n
     - 1 * Cable USB
     - 1 * Protoboard
     - Cables jumper
   * - |list_button| 
     - |list_usb_cable| 
     - |list_breadboard| 
     - |list_wire| 


**Pasos de Construcci√≥n**

1. Comienza con el circuito de la l√°mpara de escritorio de la lecci√≥n anterior.

.. image:: img/9_dimmer_led1_pin9.png
    :width: 500
    :align: center

2. Inserta el bot√≥n en la protoboard cruzando la separaci√≥n central, con los pines en los agujeros 6E, 8E, 6J y 8J.

.. note::

    Si no est√°s seguro de c√≥mo insertar el bot√≥n, prueba ambas orientaciones. En una de las posiciones, el espaciado entre pines ser√° ligeramente demasiado estrecho para encajar.

.. image:: img/10_desk_lamp_button_button.png
    :width: 500
    :align: center

3. Conecta el pin inferior izquierdo del bot√≥n al pin digital 7 en el Arduino Uno R3 con un cable jumper largo, insertando un extremo en el agujero 8J y el otro en el pin 7.

.. image:: img/10_desk_lamp_button_p7.png
    :width: 500
    :align: center

4. Conecta el pin superior derecho del bot√≥n al riel negativo de la protoboard con un cable jumper corto, insertando un extremo en el agujero 6A y el otro en el riel negativo.

.. image:: img/10_desk_lamp_button_gnd.png
    :width: 500
    :align: center


Creaci√≥n del C√≥digo
------------------------

**Imprimiendo el Estado del Bot√≥n**

1. Abre el sketch que guardaste anteriormente, ``Lesson9_Desk_Lamp``. Selecciona "Guardar como..." desde el men√∫ "Archivo", y ren√≥mbralo como ``Lesson10_Desk_Lamp_Button``. Haz clic en "Guardar".

2. En la lecci√≥n 8, usamos un bot√≥n con una resistencia de pull-down de 10K manualmente conectada entre GND y el bot√≥n. Sin embargo, en este circuito, no conectamos una resistencia. En su lugar, podemos utilizar la funci√≥n de pull-up del software de Arduino. Necesitas configurar el pin conectado al bot√≥n como entrada y tambi√©n configurarlo en ``PULLUP``.

.. code-block:: Arduino
    :emphasize-lines: 6

    int potValue = 0;

    void setup() {
        // Configura el c√≥digo aqu√≠, se ejecuta una vez:
        pinMode(9, OUTPUT);        // Configura el pin 9 como salida
        pinMode(7, INPUT_PULLUP);  // Configura el pin 7 como entrada con resistencia pull-up interna
    }

3. Para utilizar el Monitor Serial, debes incluir un comando que inicie la comunicaci√≥n serial en el Arduino Uno R3. 

Este comando generalmente se coloca en la secci√≥n ``void setup()`` del sketch. El comando ``Serial.begin(baud)`` inicia la comunicaci√≥n serial, donde ``baud`` representa la tasa de transferencia de datos por segundo entre la computadora y el Arduino Uno R3. Las tasas de baud comunes son 9600 y 115200 bits por segundo.

.. code-block:: Arduino
    :emphasize-lines: 7

    int potValue = 0;

    void setup() {
        // Configura el c√≥digo aqu√≠, se ejecuta una vez:
        pinMode(9, OUTPUT);        // Configura el pin 9 como salida
        pinMode(7, INPUT_PULLUP);  // Configura el pin 7 como entrada con resistencia pull-up interna
        Serial.begin(9600);        // Configura la comunicaci√≥n serial a 9600 baudios
    }


4. Antes de entrar en el ``void loop()``, tambi√©n necesitamos crear dos variables para inicializar los estados del bot√≥n y del LED. El LED debe estar apagado cuando no haya interacci√≥n, por lo que se configura en LOW. Dado que el bot√≥n usa una resistencia pull-up interna, se leer√° como HIGH cuando no est√© presionado.

.. code-block:: Arduino
    :emphasize-lines: 2,3

    int potValue = 0;  // Variable para almacenar el valor le√≠do del potenci√≥metro
    int ledState = LOW;          // Estado inicial del LED
    int lastButtonState = HIGH;  // La lectura previa del pin de entrada

    void setup() {
        pinMode(9, OUTPUT);        // Configura el pin 9 como salida
        pinMode(7, INPUT_PULLUP);  // Configura el pin 7 como entrada con resistencia pull-up interna
        Serial.begin(9600);        // Configura la comunicaci√≥n serial a 9600 baudios
    }

5. Ahora, en el ``void loop()``, primero lee el estado del bot√≥n usando ``digitalRead()`` y almac√©nalo en la variable ``buttonState``.

.. code-block:: Arduino
    :emphasize-lines: 2

    void loop() {
        int buttonState = digitalRead(7);  // Leer el estado del bot√≥n
    }

6. Ahora est√°s listo para usar el Monitor Serial para imprimir datos. Utilizar√°s ``Serial.print()`` para mostrar datos y otros textos.

As√≠ es como se utiliza:


    * ``Serial.print(val)`` o ``Serial.print(val, format)``: Imprime datos en el puerto serial como texto ASCII legible para humanos.

    **Par√°metros**
        - ``Serial``: objeto del puerto serial.
        - ``val``: el valor a imprimir. Tipos de datos permitidos: cualquier tipo de dato.

    **Devuelve**
        ``print()`` devuelve el n√∫mero de bytes escritos, aunque leer ese n√∫mero es opcional. Tipo de dato: size_t.

Este comando puede representar varios tipos de datos y formatos, incluidos n√∫meros, puntos flotantes, bytes y cadenas. Por ejemplo:

.. code-block:: Arduino

    Serial.print(78);                // muestra "78"
    Serial.print(78, BIN);           // muestra "1001110"
    Serial.print(1.23456);           // muestra "1.23"
    Serial.print(1.23456, 0);        // muestra "1"
    Serial.print('N');               // muestra "N"
    Serial.print("Hello world.");    // muestra "Hello world."

7. Ahora, usa este comando para imprimir un mensaje que indique los datos que est√°n a punto de imprimirse. Esto es √∫til para diferenciar m√∫ltiples impresiones de datos al mismo tiempo.

.. code-block:: Arduino
    :emphasize-lines: 3

    void loop() {
        int buttonState = digitalRead(7);  // Leer el estado del bot√≥n
        Serial.print("Button State: ");
    }

8. Ahora imprime el valor almacenado en la variable ``buttonState``. Para asegurar que cada salida aparezca en una nueva l√≠nea en el Monitor Serial, usa ``Serial.println()``, que a√±ade un car√°cter de nueva l√≠nea al final de la declaraci√≥n de impresi√≥n.

.. note::

    Nota la diferencia entre imprimir caracteres o cadenas (que deben ir entre comillas) y variables, que se insertan directamente.

.. code-block:: Arduino
    :emphasize-lines: 14

    int potValue = 0;  // Variable para almacenar el valor le√≠do del potenci√≥metro
    int ledState = LOW;          // Estado inicial del LED
    int lastButtonState = HIGH;  // la lectura previa del pin de entrada

    void setup() {
        pinMode(9, OUTPUT);        // Configurar el pin 9 como salida
        pinMode(7, INPUT_PULLUP);  // Configurar el pin 7 como entrada con resistencia pull-up interna
        Serial.begin(9600);        // Configurar la comunicaci√≥n serial a 9600 baudios
    }

    void loop() {
        int buttonState = digitalRead(7);  // Leer el estado del bot√≥n
        Serial.print("Button State: ");
        Serial.println(buttonState);  // Imprimir el estado actual del bot√≥n
    }

9. En este punto, el c√≥digo est√° esencialmente completo. Haz clic en "Subir" para cargar el c√≥digo en el Arduino Uno R3.

    .. note::

        Cada vez que se transmita un dato de la placa a la computadora, deber√≠as ver el LED TX de tu Arduino Uno R3 parpadeando.

10. Luego, haz clic en el bot√≥n "Monitor Serial" en la esquina superior derecha del IDE de Arduino.

    .. image:: img/10_dimmer_led_serial.png
        :align: center

11. Si ves datos ilegibles, necesitar√°s ajustar la velocidad en baudios para que coincida con la configurada en tu c√≥digo.

    .. image:: img/10_dimmer_led_serial_baud.png
        :align: center

12. Ver√°s que cuando el bot√≥n no est√° presionado, imprime continuamente "1", y cuando el bot√≥n est√° presionado, imprime continuamente "0". Esta es la caracter√≠stica de una se√±al digital, que solo tiene dos estados: ‚Äú0‚Äù y ‚Äú1‚Äù.

**Detectando Cambios de Estado del Bot√≥n**

En este segmento, aprenderemos c√≥mo un bot√≥n simple puede controlar un LED alternando su estado de ENCENDIDO a APAGADO y viceversa. Esto implica detectar el momento preciso en que el bot√≥n cambia de no estar presionado a estarlo.

1. Comencemos con la funci√≥n principal que monitorea la pulsaci√≥n del bot√≥n.

Anteriormente, aprendimos c√≥mo determinar si un bot√≥n est√° presionado leyendo su estado como ``HIGH`` o ``LOW``. Sin embargo, esta lecci√≥n pretende responder a una √∫nica pulsaci√≥n sin necesidad de mantener presionado el bot√≥n. Esto requiere detectar un cambio en el estado del bot√≥n.

Para lograrlo, usamos una sentencia ``if`` que compara el estado anterior del bot√≥n (``lastButtonState``) con su estado actual (``buttonState``). El operador l√≥gico ``&&`` se usa aqu√≠, lo que significa que ambas condiciones deben ser verdaderas para que el bloque de c√≥digo dentro de la sentencia ``if`` se ejecute.

.. code-block:: Arduino
    :emphasize-lines: 7,8

    void loop() {
        int buttonState = digitalRead(7);  // Leer el estado del bot√≥n
        Serial.print("Button State: ");
        Serial.println(buttonState);  // Imprimir el estado actual del bot√≥n
            
        // Comprobar si el estado del bot√≥n ha cambiado desde la √∫ltima iteraci√≥n del bucle
        if (lastButtonState == HIGH && buttonState == LOW) {  // Se detect√≥ pulsaci√≥n de bot√≥n
        }
    }

2. Cuando se detecta que el bot√≥n ha sido presionado, alternamos el estado del LED. Esto significa que si el LED estaba apagado, se encender√°, y si estaba encendido, se apagar√°. El operador ``!`` se utiliza para invertir el estado de la variable ledState.

.. code-block:: Arduino
    :emphasize-lines: 8

    void loop() {
        int buttonState = digitalRead(7);  // Leer el estado del bot√≥n
        Serial.print("Button State: ");
        Serial.println(buttonState);  // Imprimir el estado actual del bot√≥n
            
        // Comprobar si el estado del bot√≥n ha cambiado desde la √∫ltima iteraci√≥n del bucle
        if (lastButtonState == HIGH && buttonState == LOW) {  // Se detect√≥ pulsaci√≥n de bot√≥n
            ledState = !ledState;                               // Alternar estado del LED
        }
    }

3. Despu√©s de verificar el estado del bot√≥n y actualizar el LED en consecuencia, necesitamos registrar el estado actual del bot√≥n como el nuevo 'estado conocido'. Este paso es crucial para detectar el pr√≥ximo cambio de estado.

.. code-block:: Arduino
    :emphasize-lines: 10,11

    void loop() {
        int buttonState = digitalRead(7);  // Leer el estado del bot√≥n
        Serial.print("Button State: ");
        Serial.println(buttonState);  // Imprimir el estado actual del bot√≥n
        
        // Verificar si el estado del bot√≥n ha cambiado desde la √∫ltima iteraci√≥n del bucle
        if (lastButtonState == HIGH && buttonState == LOW) {  // Se detect√≥ una pulsaci√≥n
            ledState = !ledState;                               // Alternar estado del LED
        }
        lastButtonState = buttonState;  // Actualizar lastButtonState al estado actual
        delay(200);                     // Opcional: Debouncing simple por software
    }

**Ajustando el Brillo con un Potenci√≥metro**

En escenarios donde ``ledState`` es ``HIGH``, queremos que el LED no solo se encienda, sino que tambi√©n tenga su brillo ajustable mediante un potenci√≥metro. As√≠ es como puedes implementar esta funcionalidad:

1. Justo despu√©s de la declaraci√≥n ``if`` que alterna el estado del LED al presionar el bot√≥n, agrega otra declaraci√≥n ``if`` para verificar si ``ledState`` est√° en ``HIGH``. Si lo est√°, ajustaremos el brillo del LED basado en el valor del potenci√≥metro.

.. code-block:: Arduino
    :emphasize-lines: 10,12

    void loop() {
        int buttonState = digitalRead(7);  // Leer el estado del bot√≥n
        Serial.print("Button State: ");
        Serial.println(buttonState);  // Imprimir el estado actual del bot√≥n
        
        // Verificar si el estado del bot√≥n ha cambiado desde la √∫ltima iteraci√≥n del bucle
        if (lastButtonState == HIGH && buttonState == LOW) {  // Se detect√≥ una pulsaci√≥n
            ledState = !ledState;                               // Alternar estado del LED
        }
        if (ledState == HIGH) {

        }
        lastButtonState = buttonState;  // Actualizar lastButtonState al estado actual
        delay(200);                     // Opcional: Debouncing simple por software
    }

2. Dentro del bloque ``if (ledState == HIGH)``, lee el valor del potenci√≥metro para determinar el nivel de brillo. Luego, aplica este valor para ajustar el brillo del LED usando ``analogWrite()``. Adem√°s, imprime este valor en el Monitor Serial para obtener retroalimentaci√≥n en tiempo real.

.. code-block:: Arduino
    :emphasize-lines: 6-9

    // Verificar si el estado del bot√≥n ha cambiado desde la √∫ltima iteraci√≥n del bucle
    if (lastButtonState == HIGH && buttonState == LOW) {  // Se detect√≥ una pulsaci√≥n
        ledState = !ledState;                               // Alternar estado del LED
    }
    if (ledState == HIGH) {
        potValue = analogRead(A0);  // Leer continuamente el valor del potenci√≥metro cuando el LED est√© encendido
        analogWrite(9, potValue / 4);  // Ajustar brillo continuamente
        Serial.print("Pot Value: ");
        Serial.println(potValue);
    }
    lastButtonState = buttonState;  // Actualizar lastButtonState al estado actual
    delay(200);                     // Opcional: Debouncing simple por software

3. Para asegurarte de que el LED se apague cuando ``ledState`` est√© en ``LOW``, agrega una declaraci√≥n ``else`` despu√©s del bloque ``if``. Esto manejar√° el apagado completo del LED cuando no se cumplan las condiciones dentro del ``if``.

.. image:: img/if_else.png
    :width: 400
    :align: center

.. code-block:: Arduino
    :emphasize-lines: 6-8

    if (ledState == HIGH) {
        potValue = analogRead(A0);  // Leer continuamente el valor del potenci√≥metro cuando el LED est√© encendido
        analogWrite(9, potValue / 4);  // Ajustar brillo continuamente
        Serial.print("Pot Value: ");
        Serial.println(potValue);
    } else {
        analogWrite(9, 0);  // Apagar el LED
    }

**Ejecutando el C√≥digo**

Ahora que tu c√≥digo est√° completo, el listado completo es el siguiente:

.. code-block:: Arduino

    int potValue = 0;            // Variable para almacenar el valor le√≠do del potenci√≥metro
    int ledState = LOW;          // Estado inicial del LED
    int lastButtonState = HIGH;  // La lectura previa del pin de entrada

    void setup() {
        pinMode(9, OUTPUT);        // Configurar el pin 9 como salida
        pinMode(7, INPUT_PULLUP);  // Configurar el pin 7 como entrada con resistencia pull-up interna
        Serial.begin(9600);        // Configurar la comunicaci√≥n serial a 9600 baudios
    }

    void loop() {
        int buttonState = digitalRead(7);  // Leer el estado del bot√≥n
        Serial.print("Button State: ");
        Serial.println(buttonState);

        // Verificar si el estado del bot√≥n ha cambiado desde la √∫ltima iteraci√≥n del bucle
        if (lastButtonState == HIGH && buttonState == LOW) {  // Se detect√≥ una pulsaci√≥n
            ledState = !ledState;                               // Alternar estado del LED
        }

        if (ledState == HIGH) {
            potValue = analogRead(A0);  // Leer continuamente el valor del potenci√≥metro cuando el LED est√© encendido
            analogWrite(9, potValue / 4);  // Ajustar brillo continuamente
            Serial.print("Pot Value: ");
            Serial.println(potValue);
        } else {
            analogWrite(9, 0);  // Apagar el LED
        }

        lastButtonState = buttonState;  // Actualizar lastButtonState al estado actual
        delay(200);                     // Opcional: Debouncing simple por software
    }

1. Despu√©s de seleccionar la placa y el puerto correctos, haz clic en "Subir" para cargar el c√≥digo en tu Arduino.

2. Abre el Monitor Serial para ver los datos de salida. Notar√°s que el estado del bot√≥n imprime "1" continuamente cuando no est√° presionado y "0" cuando se presiona. Al mismo tiempo, tambi√©n se imprimir√° el valor del potenci√≥metro. A medida que gires el potenci√≥metro, observar√°s en el Monitor Serial que cuanto mayor sea el valor, m√°s brillante se vuelve el LED, y viceversa.

.. image:: img/10_dimmer_led_serial_tool.png
    :align: center

.. note::

    Con esto, deber√≠as tener claro lo siguiente:

    - Las se√±ales digitales solo tienen dos estados: 0 y 1.
    - Sin embargo, las se√±ales anal√≥gicas tienen un rango, que en este caso va de 0 a 1023.

3. Finalmente, recuerda guardar tu c√≥digo y organizar tu espacio de trabajo.

**Pregunta**

1. ¬øQu√© suceder√≠a si configuras el pin digital 7 solo como INPUT? ¬øPor qu√©?

.. code-block::
    :emphasize-lines: 3

    void setup() {
        pinMode(9, OUTPUT);        // Configurar el pin 9 como salida
        pinMode(7, INPUT);  // Configurar el pin 7 como entrada con una resistencia pull-up interna
        Serial.begin(9600);        // Configurar la comunicaci√≥n serial a 9600 baudios
    }

2. Si el pin 7 se configura solo como ``INPUT``, ¬øqu√© ajustes necesitar√≠an hacerse en el circuito?

**Resumen**

Al final de esta lecci√≥n, tendr√°s una l√°mpara de escritorio ON/OFF completamente funcional, controlada a trav√©s de una interfaz de usuario simple. Habr√°s dominado c√≥mo integrar y manipular varios componentes electr√≥nicos y t√©cnicas de programaci√≥n con Arduino para crear un dispositivo electr√≥nico pr√°ctico e interactivo. Este proyecto no solo refuerza conceptos fundamentales en electr√≥nica y programaci√≥n, sino que tambi√©n te proporciona una pieza funcional para agregar a tu colecci√≥n de proyectos DIY.


.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Explorez plus en profondeur le Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Soutien Expert** : R√©solvez les probl√®mes post-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez & Partagez** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Avant-premi√®res Exclusives** : Acc√©dez en avant-premi√®re aux nouvelles annonces de produits et aux aper√ßus.
    - **R√©ductions Sp√©ciales** : B√©n√©ficiez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions Festives et Concours** : Participez √† des concours et √† des promotions saisonni√®res.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

9. Lampe de Bureau Dimmable
=============================================

Imaginez chaque lampe de bureau chez vous, diffusant doucement de la lumi√®re sur vos lectures du soir ou vos projets nocturnes. Vous √™tes-vous d√©j√† demand√© comment ces lampes ajustent leur luminosit√© si facilement ? Dans cette le√ßon, nous allons explorer les m√©canismes et l'√©lectronique d'une lampe de bureau, transformant la curiosit√© en connaissance en construisant une de A √† Z avec Arduino.

.. .. image:: img/9_desk_lamp_pot.jpg
..     :width: 500
..     :align: center
    
.. raw:: html

    <video muted controls style = "max-width:90%">
        <source src="_static/video/9_dimmble_led.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

Pr√©parez-vous √† :

* D√©coder le r√¥le des variables dans le stockage et la manipulation des donn√©es au sein des sketches Arduino.
* Ma√Ætriser la lecture des signaux analogiques avec ``analogRead()``.
* Explorer la modulation de largeur d'impulsion (PWM) √† travers ``analogWrite()`` pour affiner la luminosit√© des LEDs.

√Ä la fin de cette le√ßon, non seulement vous aurez cr√©√© une lampe de bureau √©lectronique pleinement fonctionnelle, mais vous aurez √©galement approfondi votre compr√©hension de la mani√®re dont le logiciel interagit avec le mat√©riel pour donner vie aux objets du quotidien. √âclairons nos connaissances en construisant une lampe de bureau qui r√©pond √† votre toucher.

Construire le Circuit
------------------------------------

**Composants N√©cessaires**

.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * LED Rouge
     - 1 * R√©sistance de 220Œ©
     - 1 * Potentiom√®tre
   * - |list_uno_r3| 
     - |list_red_led| 
     - |list_220ohm| 
     - |list_potentiometer| 
   * - 1 * C√¢ble USB
     - 1 * Breadboard
     - Fils de Connexion
     - 1 * Multim√®tre
   * - |list_usb_cable| 
     - |list_breadboard| 
     - |list_wire| 
     - |list_meter| 

**√âtapes de Construction**

1. Trouvez un potentiom√®tre.

Un potentiom√®tre, souvent appel√© pot, fonctionne comme une r√©sistance variable, ce qui signifie qu'il peut ajuster sa r√©sistance de presque z√©ro √† sa valeur maximale. La plupart des potentiom√®tres sont marqu√©s avec leur plage. Celui inclus dans votre kit est d√©sign√© comme un potentiom√®tre 103 (10K), ce qui √©quivaut √† 10 kilo-ohms ou 10 000 ohms.

.. image:: img/9_dimmer_pot.png
    :width: 200
    :align: center

√Ä l'int√©rieur du potentiom√®tre se trouve une bande de mat√©riau r√©sistant avec un curseur qui se d√©place le long de celle-ci. Chaque extr√©mit√© du mat√©riau r√©sistant est connect√©e √† une borne ou une pin, montr√©es ci-dessous comme les pins A et B. La r√©sistance entre les pins A et B est fixe et repr√©sente la r√©sistance maximale que le potentiom√®tre peut offrir. Pour ceux de votre kit, la r√©sistance maximale est de 10 kilo-ohms.

.. image:: img/9_dimmer_pot_2.png
    :width: 400
    :align: center

* **A** : Connect√© √† l'alimentation
* **B** : Connect√© √† la masse
* **C** : Connect√© √† la pin analogique
* **D** : Curseur
* **E** : Bande r√©sistante

La Pin C est connect√©e au curseur. La r√©sistance √† travers le curseur, ou Pin C, d√©pend de la position du curseur le long du mat√©riau r√©sistant.

.. image:: img/9_dimmer_pot_3.png
    :width: 400
    :align: center

Dans les sch√©mas √©lectriques, le symbole pour un potentiom√®tre ressemble g√©n√©ralement √† une r√©sistance avec une fl√®che au milieu.

.. image:: img/9_dimmer_pot_4.png
    :width: 200
    :align: center


Explorons maintenant comment le potentiom√®tre ajuste la r√©sistance dans un circuit.

2. Connectez un potentiom√®tre √† la breadboard. Ins√©rez ses trois broches dans les trous 30G, 29F, 28G.

.. note::
    Le potentiom√®tre est √©tiquet√© "P 103", indiquant sa plage de r√©sistance. Veuillez ins√©rer le potentiom√®tre dans la breadboard comme indiqu√©, avec le c√¥t√© √©tiquet√© face √† vous.

.. image:: img/9_dimmer_test_pot.png
    :width: 500
    :align: center

3. Pour mesurer la r√©sistance du potentiom√®tre, vous devez ins√©rer un fil dans 29J et le toucher avec la sonde de test rouge, puis ins√©rer un autre fil dans 28J et le toucher avec la sonde noire.

.. image:: img/9_dimmer_test_wore.png
    :width: 500
    :align: center

4. R√©glez le multim√®tre pour mesurer la r√©sistance dans la plage de 20 kilo-ohms (20K).

.. image:: img/multimeter_20k.png
    :width: 300
    :align: center

5. Tournez le potentiom√®tre √† la position "1" indiqu√©e dans le diagramme.

.. image:: img/9_pot_direction.png
    :width: 300
    :align: center

6. Notez les valeurs de r√©sistance mesur√©es dans le tableau.

.. note::
    Les valeurs du tableau sont mes mesures ; vos r√©sultats peuvent varier. Remplissez-les en fonction de vos r√©sultats r√©els.

.. list-table::
   :widths: 20 20
   :header-rows: 1

   * - Point de Mesure
     - R√©sistance (kilo-ohm)
   * - 1
     - *1.52*
   * - 2
     - 
   * - 3
     - 

7. Tournez le potentiom√®tre dans le sens des aiguilles d'une montre aux positions 2 et 3 pour mesurer la r√©sistance √† chaque point, et notez les r√©sultats dans le tableau.

.. list-table::
   :widths: 20 20
   :header-rows: 1

   * - Point de Mesure
     - R√©sistance (kilo-ohm)
   * - 1
     - *1.52*
   * - 2
     - *5.48*
   * - 3
     - *9.01*

√Ä partir des r√©sultats de mesure :

* En tournant le potentiom√®tre **dans le sens des aiguilles d'une montre** de la position 1 √† 3, la r√©sistance entre les positions 2 et 1 augmente.
* Inversement, en tournant **dans le sens inverse des aiguilles d'une montre** de la position 3 √† 1, la r√©sistance entre les positions 2 et 1 diminue.

8. Ins√©rez l'autre extr√©mit√© du fil de connexion de 28J dans la borne n√©gative de la breadboard.

.. image:: img/9_dimmer_led1_pot_gnd.png
    :width: 500
    :align: center

9. Ensuite, ins√©rez l'autre extr√©mit√© du fil de connexion de 29J dans la pin A0 de l'Arduino Uno R3.

.. image:: img/9_dimmer_led1_pot_a0.png
    :width: 500
    :align: center

10. Enfin, connectez le potentiom√®tre au 5V en ins√©rant un fil de connexion entre le trou 30J de la breadboard et la pin 5V de l'Arduino Uno R3.

.. image:: img/9_dimmer_led1_pot_5v.png
    :width: 500
    :align: center

11. Connectez la pin GND de l'Arduino Uno R3 √† la borne n√©gative de la breadboard √† l'aide d'un long fil de connexion.

.. image:: img/9_dimmer_led1_gnd.png
    :width: 500
    :align: center

12. Prenez une LED. Ins√©rez son anode (broche la plus longue) dans le trou 13A, et son cathode (broche la plus courte) dans la borne n√©gative de la breadboard.

.. image:: img/9_dimmer_led1_led.png
    :width: 500
    :align: center

13. Placez une r√©sistance de 220 ohms entre les trous 13E et 13G.

.. image:: img/9_dimmer_led1_resistor.png
    :width: 500
    :align: center

14. Connectez le trou 13J de la breadboard √† la pin 9 de l'Arduino Uno R3 avec un fil.

.. image:: img/9_dimmer_led1_pin9.png
    :width: 500
    :align: center

**Question** :

Comment pensez-vous que la tension sur A0 changerait lorsque le potentiom√®tre est tourn√© dans le sens des aiguilles d'une montre et dans le sens inverse des aiguilles d'une montre ?

Cr√©ation du Code
-------------------------------------

Dans cette le√ßon, notre objectif est d'ajuster la luminosit√© de la LED en fonction de la rotation du potentiom√®tre.

Voici √† quoi pourrait ressembler le pseudocode :

.. code-block::

    Create variable to store input information.
    Set a pin as output.
    Begin main loop:
        Store the potentiometer value in a variable.
        Set the LED brightness based on the potentiometer variable.
    End main loop.

**Initialisation des Pins**

1. Ouvrez l'IDE Arduino et d√©marrez un nouveau projet en s√©lectionnant ¬´ Nouveau Sketch ¬ª dans le menu ¬´ Fichier ¬ª.
2. Enregistrez votre sketch sous le nom ``Lesson9_Desk_Lamp`` en utilisant ``Ctrl + S`` ou en cliquant sur ¬´ Enregistrer ¬ª.

3. La LED dans votre circuit est connect√©e √† une pin num√©rique sur l'Arduino Uno R3, d√©finie comme sortie. N'oubliez pas d'ajouter un commentaire.

.. note::

    Le potentiom√®tre est un dispositif d'entr√©e analogique connect√© √† la pin analogique A0. Tous les pins analogiques sur Arduino sont des pins d'entr√©e, ce qui signifie qu'ils n'ont pas besoin d'√™tre d√©clar√©s comme INPUT comme les pins num√©riques.

.. code-block:: Arduino
    :emphasize-lines: 3

    void setup() {
        // Mettez votre code de configuration ici, √† ex√©cuter une fois :
        pinMode(9, OUTPUT);  // D√©finir la pin 9 comme sortie
    }

    void loop() {
        // Mettez votre code principal ici, √† ex√©cuter en boucle :
    }

**D√©claration des Variables**

Pour contr√¥ler la variation de l'intensit√© de la LED √† l'aide d'un potentiom√®tre, vous avez besoin d'une **variable** pour stocker la valeur du potentiom√®tre.

Plongeons dans le concept des variables en programmation. Une variable agit comme un conteneur dans votre programme, permettant de stocker et de r√©cup√©rer ult√©rieurement des informations.

.. image:: img/9_variable_define.png
    :width: 400
    :align: center

Avant d'utiliser une variable, elle doit √™tre d√©clar√©e, ce qui est connu sous le nom de d√©claration de variable.

Pour d√©clarer une variable, vous devez d√©finir son type et son nom. Il n'est pas n√©cessaire d'assigner une valeur √† la variable au moment de la d√©claration ; vous pouvez l'assigner plus tard dans votre sketch. Voici comment d√©clarer une variable :

.. code-block:: Arduino

    int var;

Ici, ``int`` est le type de donn√©es utilis√© pour les entiers, capable de stocker des valeurs allant de -32768 √† 32767. Les variables peuvent stocker divers types de donn√©es, y compris ``float``, ``byte``, ``boolean``, ``char`` et ``string``.

Les noms de variables peuvent √™tre ceux que vous choisissez, comme ``i``, ``pomme``, ``Bruce``, ``R2D2`` ou ``Sectumsempra``. Cependant, il y a des r√®gles pour les noms :

* Les noms peuvent inclure des lettres, des chiffres et des underscores, mais pas d'espaces ni de caract√®res sp√©ciaux comme !, #, %, etc.

  .. image:: img/9_variable_name1.png
    :width: 400
    :align: center

* Les noms doivent commencer par une lettre ou un underscore (_). Ils ne peuvent pas commencer par un chiffre.

  .. image:: img/9_variable_name2.png
    :width: 400
    :align: center

* Les noms sont sensibles √† la casse. ``monChat`` et ``monchat`` seraient consid√©r√©s comme des variables diff√©rentes.

* √âvitez d'utiliser des mots-cl√©s que l'IDE Arduino reconna√Æt et met en surbrillance, comme ``int``, qui est color√© pour indiquer une signification sp√©ciale. Si le nom devient d'une couleur comme l'orange ou le bleu, c'est un mot-cl√© et il ne doit pas √™tre utilis√© comme nom de variable.

La port√©e d'une variable d√©termine o√π elle peut √™tre utilis√©e dans votre sketch, en fonction de l'endroit o√π elle est d√©clar√©e.

* Une variable d√©clar√©e en dehors de toutes les fonctions (c'est-√†-dire en dehors des accolades) est une variable globale et peut √™tre utilis√©e partout dans votre sketch.
* Une variable d√©clar√©e √† l'int√©rieur d'une fonction (dans un ensemble d'accolades) est une variable locale et ne peut √™tre utilis√©e que dans cette fonction.

.. code-block:: Arduino
    :emphasize-lines: 1,4,9

    int variable_globale = 0; // Ceci est une variable globale

    void setup() {
        int variable = 0; // Ceci est une variable locale
    }

    void loop() {
        int variable = 0; // Ceci est une autre variable locale
    }

.. note::

    Les variables locales ne peuvent √™tre utilis√©es que dans les fonctions o√π elles sont d√©clar√©es, ce qui signifie que vous pouvez d√©clarer des variables avec le m√™me nom dans diff√©rentes fonctions sans probl√®me. Cependant, √©vitez d'utiliser le m√™me nom pour les variables locales et globales afin d'√©viter toute confusion.

Typiquement, un sketch Arduino doit suivre un sch√©ma coh√©rent : d√©clarer d'abord les variables globales, puis d√©finir la fonction ``void setup()`` et enfin, la fonction ``void loop()``.

4. Allez au tout d√©but de votre sketch, avant la fonction ``void setup()``. Ici, vous d√©clarerez votre variable pour stocker la valeur du potentiom√®tre.

.. code-block:: Arduino
    :emphasize-lines: 1

    int potValue = 0;

    void setup() {
        // Mettez votre code de configuration ici, √† ex√©cuter une fois :
        pinMode(9, OUTPUT);  // D√©finir la pin 9 comme sortie
    }

    void loop() {
        // Mettez votre code principal ici, √† ex√©cuter en boucle :
    }

Vous venez de d√©clarer une variable enti√®re nomm√©e ``valeurPotentiometre`` et de l'initialiser √† z√©ro. Cette variable sera utilis√©e plus tard dans votre sketch pour stocker la sortie du potentiom√®tre.

**Lecture des Valeurs Analogiques**

Vous √™tes maintenant pr√™t √† entrer dans la boucle principale du programme. La premi√®re chose que vous ferez dans la fonction ``void loop()`` est de d√©terminer la valeur du potentiom√®tre.

Le potentiom√®tre est connect√© √† une pin d'alimentation de 5 volts, ce qui permet √† la tension √† la pin A0 de varier de 0 √† 5 volts. Cette tension est ensuite convertie par le microprocesseur de l'Arduino Uno R3 en une valeur analogique allant de 0 √† 1023, gr√¢ce √† la r√©solution de 10 bits du microprocesseur.

Une fois converties, ces valeurs analogiques peuvent √™tre utilis√©es dans votre programme.

Pour obtenir la valeur analogique du potentiom√®tre, utilisez la commande ``analogRead(pin)``. Cette commande lit la tension entrant dans une pin analogique et la mappe √† une valeur entre 0 et 1023 :

- S'il n'y a pas de tension, la valeur analogique est 0.
- Si la tension est de 5 volts complets, la valeur analogique sera 1023.

Voici comment l'utiliser :

    * ``analogRead(pin)`` : Lit la valeur de la pin analogique sp√©cifi√©e.

    **Param√®tres**
        - ``pin`` : le nom de la pin d'entr√©e analogique √† lire.

    **Retourne**
        La lecture analogique sur la pin. Bien qu'elle soit limit√©e par la r√©solution du convertisseur analogique-num√©rique (0-1023 pour 10 bits ou 0-4095 pour 12 bits). Type de donn√©es : int.

5. Placez la commande suivante √† l'int√©rieur de la fonction ``void loop()`` pour stocker la valeur analogique du potentiom√®tre dans la variable ``potValue`` d√©clar√©e en haut de votre sketch :

.. code-block:: Arduino
    :emphasize-lines: 10

    int potValue = 0;

    void setup() {
        // Mettez votre code de configuration ici, √† ex√©cuter une fois :
        pinMode(9, OUTPUT);  // D√©finir la pin 9 comme sortie
    }

    void loop() {
        // Mettez votre code principal ici, √† ex√©cuter en boucle :
        potValue = analogRead(A0);        // Lire la valeur du potentiom√®tre
    }

Assurez-vous de sauvegarder et de v√©rifier votre code pour corriger toute erreur.


**√âcriture des Valeurs Analogiques**

Les pins num√©riques sur l'Arduino Uno R3 peuvent √™tre soit en √©tat ON, soit en √©tat OFF, ce qui signifie qu'elles ne peuvent pas √©mettre de v√©ritables valeurs analogiques. Pour simuler un comportement analogique, comme le contr√¥le de la luminosit√© d'une LED, nous utilisons une technique appel√©e Modulation de Largeur d'Impulsion (PWM). Les pins PWM, marqu√©es d'un tilde (~) sur la carte, peuvent varier la sortie per√ßue en ajustant le cycle de service du signal.

.. image:: img/9_dimmer_pwm_pin.png
    :width: 500
    :align: center

Pour contr√¥ler la luminosit√© d'une LED, nous utilisons la commande ``analogWrite(pin, value)``. Cela ajuste la luminosit√© de la LED en modifiant le cycle de service du signal PWM envoy√© √† la pin.

    * ``analogWrite(pin, value)`` : √âcrit une valeur analogique (onde PWM) sur une pin. Peut √™tre utilis√© pour √©clairer une LED √† des niveaux de luminosit√© variables ou pour faire fonctionner un moteur √† diff√©rentes vitesses.

    **Param√®tres**
        - ``pin`` : la pin Arduino √† laquelle √©crire. Types de donn√©es autoris√©s : int.
        - ``value`` : le cycle de service : entre 0 (toujours √©teint) et 255 (toujours allum√©). Types de donn√©es autoris√©s : int.
    
    **Retourne**
        Rien

Consid√©rez le cycle de service comme le sch√©ma d'ouverture et de fermeture d'un robinet contr√¥lant le d√©bit d'eau dans un seau, repr√©sentant la luminosit√© de la LED. Voici une explication simple :

* ``analogWrite(255)`` signifie que le robinet est compl√®tement ouvert tout le temps, remplissant le seau et rendant la LED au maximum de sa luminosit√©.
* ``analogWrite(191)`` signifie que le robinet est ouvert 75 % du temps, rendant le seau moins plein et la LED moins lumineuse.
* ``analogWrite(0)`` signifie que le robinet est compl√®tement ferm√©, laissant le seau vide et la LED √©teinte.

.. image:: img/9_pwm_signal.png
    :width: 400
    :align: center

6. Ajoutez une commande ``analogWrite()`` dans la fonction ``void loop()`` et commentez chaque ligne pour plus de clart√© :

.. note::

    * √âtant donn√© que la plage d'entr√©e du potentiom√®tre est de 0 √† 1023, mais que la plage de sortie pour les LEDs est de 0 √† 255. Pour combler cet √©cart, vous pouvez r√©duire la valeur du potentiom√®tre en la divisant par 4 :

    * Bien que le r√©sultat de la division ne soit pas toujours un entier, seule la partie enti√®re est stock√©e car les variables sont d√©clar√©es comme entiers (int).

.. code-block:: Arduino
    :emphasize-lines: 11

    int potValue = 0;

    void setup() {
        // Mettez votre code de configuration ici, √† ex√©cuter une fois :
        pinMode(9, OUTPUT);  // D√©finir la pin 9 comme sortie
    }

    void loop() {
        // Mettez votre code principal ici, √† ex√©cuter en boucle :
        potValue = analogRead(A0);        // Lire la valeur du potentiom√®tre
        analogWrite(9, potValue / 4);       // Appliquer la luminosit√© √† la LED sur la pin 9
    }

7. Une fois le code t√©l√©charg√© sur l'Arduino Uno R3, tourner le potentiom√®tre changera la luminosit√© des LEDs. Selon notre configuration, tourner le potentiom√®tre dans le sens des aiguilles d'une montre devrait augmenter la luminosit√©, tandis que dans le sens inverse devrait la diminuer.

.. note::

    Le d√©bogage n√©cessite souvent de v√©rifier √† la fois le code et le circuit pour d√©tecter des erreurs. Si le code se compile correctement ou semble correct mais que la LED ne change pas comme pr√©vu, le probl√®me peut √™tre li√© au circuit. V√©rifiez toutes les connexions et composants sur la breadboard pour vous assurer qu'ils sont bien en contact.

8. Enfin, n'oubliez pas de sauvegarder votre code et de ranger votre espace de travail.

**Question**

Si vous connectez la LED √† une pin diff√©rente, comme la pin 8, et que vous tournez le potentiom√®tre, la luminosit√© de la LED changera-t-elle toujours ? Pourquoi ou pourquoi pas ?

**R√©sum√©**

Dans cette le√ßon, nous avons explor√© comment travailler avec des signaux analogiques dans les projets Arduino. Nous avons appris √† lire des valeurs analogiques √† partir d'un potentiom√®tre, √† traiter ces valeurs dans le sketch Arduino et √† contr√¥ler la luminosit√© d'une LED en utilisant la Modulation de Largeur d'Impulsion (PWM). Nous avons √©galement approfondi l'utilisation des variables pour stocker et manipuler des donn√©es dans nos sketches. En int√©grant ces √©l√©ments, nous avons d√©montr√© le contr√¥le dynamique des composants √©lectroniques, reliant la sortie num√©rique simple √† un contr√¥le plus nuanc√© du mat√©riel via les lectures d'entr√©e analogiques.

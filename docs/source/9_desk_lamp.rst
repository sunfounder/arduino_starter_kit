.. note::

    ¬°Hola! Bienvenido a la comunidad de entusiastas de SunFounder Raspberry Pi, Arduino y ESP32 en Facebook. Sum√©rgete en el mundo de Raspberry Pi, Arduino y ESP32 junto a otros entusiastas.

    **¬øPor qu√© unirte?**

    - **Soporte de expertos**: Resuelve problemas post-venta y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Acceso exclusivo**: Accede anticipadamente a nuevos lanzamientos de productos y vistas previas.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones y sorteos festivos**: Participa en sorteos y promociones especiales durante las festividades.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo.

9. L√°mpara de escritorio regulable
=============================================

Imagina cada l√°mpara de escritorio en casa, suavemente iluminando tus lecturas nocturnas o proyectos de √∫ltima hora. ¬øTe has preguntado c√≥mo logran estas l√°mparas ajustar su brillo de manera tan fluida? En esta lecci√≥n, exploraremos la mec√°nica y la electr√≥nica detr√°s de una l√°mpara de escritorio, transformando la curiosidad en conocimiento al construir una desde cero utilizando Arduino.

.. .. image:: img/9_desk_lamp_pot.jpg
..     :width: 500
..     :align: center
    
.. raw:: html

    <video muted controls style = "max-width:90%">
        <source src="_static/video/9_dimmble_led.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

Prep√°rate para:

* Decodificar el papel de las variables en el almacenamiento y manipulaci√≥n de datos en los esquemas de Arduino.
* Dominar la lectura de se√±ales anal√≥gicas con ``analogRead()``.
* Explorar el PWM mediante ``analogWrite()`` para ajustar el brillo de los LED.

Al finalizar esta lecci√≥n, no solo habr√°s construido una l√°mpara de escritorio electr√≥nica completamente funcional, sino que tambi√©n habr√°s profundizado tu comprensi√≥n de c√≥mo el software interact√∫a con el hardware para dar vida a objetos cotidianos. Iluminemos nuestro conocimiento construyendo una l√°mpara de escritorio que responda a tu toque.

Construye el circuito
------------------------------------

**Componentes necesarios**

.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * LED rojo
     - 1 * Resistencia de 220Œ©
     - 1 * Potenci√≥metro
   * - |list_uno_r3| 
     - |list_red_led| 
     - |list_220ohm| 
     - |list_potentiometer| 
   * - 1 * Cable USB
     - 1 * Protoboard
     - Cables jumper
     - 1 * Mult√≠metro
   * - |list_usb_cable| 
     - |list_breadboard| 
     - |list_wire| 
     - |list_meter| 

**Pasos de construcci√≥n**

1. Encuentra un potenci√≥metro.

Un potenci√≥metro, a menudo llamado "pot", act√∫a como una resistencia variable, lo que significa que puede ajustar su resistencia desde casi cero hasta su l√≠mite m√°ximo. La mayor√≠a de los potenci√≥metros est√°n marcados con su rango. El incluido en tu kit es un potenci√≥metro 103 (10K), que equivale a 10 kilo-ohmios o 10,000 ohmios.

.. image:: img/9_dimmer_pot.png
    :width: 200
    :align: center

Dentro del potenci√≥metro hay una tira de material resistivo con un deslizador que se mueve a lo largo de ella. Cada extremo del material resistivo est√° conectado a un terminal o pin, mostrados a continuaci√≥n como pines A y B. La resistencia entre los pines A y B es fija y representa la resistencia m√°xima que puede ofrecer el potenci√≥metro. Para los de tu kit, la resistencia m√°xima es de 10 kilo-ohmios.

.. image:: img/9_dimmer_pot_2.png
    :width: 400
    :align: center

* **A**: Conectar a la alimentaci√≥n
* **B**: Conectar a tierra
* **C**: Conectar al pin anal√≥gico
* **D**: Deslizador
* **E**: Tira resistiva

El pin C est√° conectado al deslizador. La resistencia a trav√©s del deslizador, o el pin C, depende de la posici√≥n del deslizador a lo largo del material resistivo.

.. image:: img/9_dimmer_pot_3.png
    :width: 400
    :align: center

En los diagramas esquem√°ticos, el s√≠mbolo de un potenci√≥metro suele parecerse a una resistencia con una flecha en el centro.

.. image:: img/9_dimmer_pot_4.png
    :width: 200
    :align: center

Ahora exploremos c√≥mo el potenci√≥metro ajusta la resistencia en un circuito.

2. Conecta un potenci√≥metro a la protoboard. Inserta sus tres pines en los agujeros 30G, 29F, 28G.

.. note::
    El potenci√≥metro tiene una etiqueta "P 103", que indica su rango de resistencia. Inserta el potenci√≥metro en la protoboard como se muestra, con el lado etiquetado mirando hacia ti.

.. image:: img/9_dimmer_test_pot.png
    :width: 500
    :align: center

3. Para medir la resistencia del potenci√≥metro, necesitas insertar un cable en 29J y luego tocarlo con la punta de prueba roja, e insertar otro cable en 28J y tocarlo con la punta negra.

.. image:: img/9_dimmer_test_wore.png
    :width: 500
    :align: center

4. Configura el mult√≠metro para medir la resistencia en el rango de 20 kilo-ohmios (20K).

.. image:: img/multimeter_20k.png
    :width: 300
    :align: center

5. Gira el potenci√≥metro a la posici√≥n "1" indicada en el diagrama.

.. image:: img/9_pot_direction.png
    :width: 300
    :align: center
    
6. Registra los valores de resistencia medidos en la tabla.

.. note::
    Los valores en la tabla son mis mediciones; tus resultados pueden variar. Ll√©nalos seg√∫n tus propios hallazgos.

.. list-table::
   :widths: 20 20
   :header-rows: 1

   * - Punto de medici√≥n
     - Resistencia (kilo-ohmios)
   * - 1
     - *1.52*
   * - 2
     - 
   * - 3
     - 

7. Gira el potenci√≥metro en sentido horario hacia las posiciones 2 y 3 para medir la resistencia en cada punto, y registra los resultados en la tabla.

.. list-table::
   :widths: 20 20
   :header-rows: 1

   * - Punto de medici√≥n
     - Resistencia (kilo-ohmios)
   * - 1
     - *1.52*
   * - 2
     - *5.48*
   * - 3
     - *9.01*

De los resultados de la medici√≥n:

* A medida que giras el potenci√≥metro **en sentido horario** desde la posici√≥n 1 a la 3, la resistencia entre la posici√≥n 2 y la posici√≥n 1 aumenta.
* Por el contrario, al girar **en sentido antihorario** de la posici√≥n 3 a la 1, la resistencia entre la posici√≥n 2 y la posici√≥n 1 disminuir√°.

8. Inserta el otro extremo del cable jumper desde 28J en el terminal negativo de la protoboard.

.. image:: img/9_dimmer_led1_pot_gnd.png
    :width: 500
    :align: center

9. Luego, inserta el otro extremo del cable jumper desde 29J en el pin A0 del Arduino Uno R3.

.. image:: img/9_dimmer_led1_pot_a0.png
    :width: 500
    :align: center

10. Finalmente, conecta el potenci√≥metro a 5V insertando un cable jumper entre el agujero 30J de la protoboard y el pin de 5V en el Arduino Uno R3.

.. image:: img/9_dimmer_led1_pot_5v.png
    :width: 500
    :align: center

11. Conecta el pin GND del Arduino Uno R3 al terminal negativo de la protoboard usando un cable jumper largo.

.. image:: img/9_dimmer_led1_gnd.png
    :width: 500
    :align: center

12. Saca un LED. Inserta su √°nodo (pin m√°s largo) en el agujero 13A, y su c√°todo (pin m√°s corto) en el terminal negativo de la protoboard.

.. image:: img/9_dimmer_led1_led.png
    :width: 500
    :align: center

13. Coloca una resistencia de 220 ohmios entre los agujeros 13E y 13G.

.. image:: img/9_dimmer_led1_resistor.png
    :width: 500
    :align: center

14. Conecta el agujero 13J de la protoboard al pin 9 del Arduino Uno R3 con un cable.

.. image:: img/9_dimmer_led1_pin9.png
    :width: 500
    :align: center

**Pregunta**:

¬øC√≥mo crees que cambiar√° el voltaje en A0 cuando se gire el potenci√≥metro en sentido horario y antihorario?


Creaci√≥n de C√≥digo
-------------------------------------

En esta lecci√≥n, buscamos ajustar el brillo del LED seg√∫n la rotaci√≥n del potenci√≥metro.

Este ser√≠a un pseudoc√≥digo de ejemplo:

.. code-block::

    Crear una variable para almacenar la informaci√≥n de entrada.
    Configurar un pin como salida.
    Iniciar bucle principal:
        Almacenar el valor del potenci√≥metro en una variable.
        Ajustar el brillo del LED basado en la variable del potenci√≥metro.
    Finalizar bucle principal.

**Inicializaci√≥n de Pines**

1. Abre el IDE de Arduino y comienza un nuevo proyecto seleccionando ‚ÄúNew Sketch‚Äù en el men√∫ ‚ÄúFile‚Äù.
2. Guarda tu sketch como ``Lesson9_Desk_Lamp`` usando ``Ctrl + S`` o haciendo clic en ‚ÄúGuardar‚Äù.

3. El LED en tu circuito est√° conectado a un pin digital del Arduino Uno R3, configurado como salida. Recuerda a√±adir un comentario.

.. note::

    El potenci√≥metro es un dispositivo de entrada anal√≥gica conectado al pin A0. Todos los pines anal√≥gicos en Arduino son pines de entrada, lo que significa que no necesitan ser declarados como INPUT como los pines digitales.

.. code-block:: Arduino
    :emphasize-lines: 3

    void setup() {
        // Configura el c√≥digo de inicializaci√≥n, se ejecuta una vez:
        pinMode(9, OUTPUT);  // Configura el pin 9 como salida
    }

    void loop() {
        // Escribe el c√≥digo principal aqu√≠, se ejecuta repetidamente:
    }

**Declaraci√≥n de Variables**

Para controlar el desvanecimiento del LED usando un potenci√≥metro, necesitas una **variable** para almacenar el valor del potenci√≥metro.

Vamos a profundizar en el concepto de variables en programaci√≥n. Una variable act√∫a como un contenedor en tu programa, permitiendo almacenar y recuperar informaci√≥n m√°s tarde.

.. image:: img/9_variable_define.png
    :width: 400
    :align: center

Antes de usar una variable, debe ser declarada, lo que se conoce como declaraci√≥n de variables.

Para declarar una variable, debes definir su tipo y nombre. No es necesario asignar un valor a la variable en el momento de la declaraci√≥n; puedes asign√°rselo m√°s adelante en tu sketch. Aqu√≠ tienes c√≥mo declarar una variable:

.. code-block:: Arduino

    int var;

Aqu√≠, ``int`` es el tipo de dato utilizado para enteros, capaz de almacenar valores entre -32768 y 32767. Las variables pueden almacenar varios tipos de datos, incluidos ``float``, ``byte``, ``boolean``, ``char`` y ``string``.

Los nombres de las variables pueden ser cualquier cosa que elijas, como ``i``, ``apple``, ``Bruce``, ``R2D2`` o ``Sectumsempra``. Sin embargo, existen reglas para nombrar:

* Los nombres pueden incluir letras, d√≠gitos y guiones bajos, pero no espacios ni caracteres especiales como !, #, %, etc.

  .. image:: img/9_variable_name1.png
    :width: 400
    :align: center
* Los nombres deben comenzar con una letra o un guion bajo (_). No pueden comenzar con un n√∫mero.

  .. image:: img/9_variable_name2.png
    :width: 400
    :align: center

* Los nombres distinguen entre may√∫sculas y min√∫sculas. ``myCat`` y ``mycat`` se considerar√°n variables diferentes.

* Evita usar palabras clave que el IDE de Arduino reconoce y resalta, como ``int``, que se colorea para indicar su importancia especial. Si el nombre cambia de color, como naranja o azul, es una palabra clave y debe evitarse como nombre de variable.

El alcance de una variable determina d√≥nde puede ser utilizada en tu sketch, dependiendo de d√≥nde se haya declarado.

* Una variable declarada fuera de todas las funciones (es decir, fuera de cualquier corchete) es una variable global y puede usarse en cualquier parte de tu sketch.
* Una variable declarada dentro de una funci√≥n (dentro de un conjunto de corchetes) es una variable local y solo puede ser utilizada dentro de esa funci√≥n.

.. code-block:: Arduino
    :emphasize-lines: 1,4,9

    int global_variable = 0; // Esta es una variable global

    void setup() {
        int variable = 0; // Esta es una variable local
    }

    void loop() {
        int variable = 0; // Esta es otra variable local
    }

.. note::

    Las variables locales solo pueden usarse dentro de las funciones donde fueron declaradas, lo que significa que puedes declarar variables con el mismo nombre en diferentes funciones sin problema. Sin embargo, evita usar el mismo nombre para variables locales y globales para prevenir confusiones.

Normalmente, un sketch de Arduino deber√≠a seguir un patr√≥n consistente: declarar primero las variables globales, luego definir la funci√≥n ``void setup()`` y finalmente, la funci√≥n ``void loop()``.

4. Ve al inicio de tu sketch, antes de la funci√≥n ``void setup()``. Aqu√≠ es donde declarar√°s tu variable para almacenar el valor del potenci√≥metro.

.. code-block:: Arduino
    :emphasize-lines: 1

    int potValue = 0;

    void setup() {
        // Configura tu c√≥digo aqu√≠, se ejecuta una vez:
        pinMode(9, OUTPUT);  // Configura el pin 9 como salida
    }

    void loop() {
        // Escribe el c√≥digo principal aqu√≠, se ejecuta repetidamente:
    }

Acabas de declarar una variable entera llamada ``potValue`` y la has inicializado en cero. Esta variable se utilizar√° m√°s adelante en tu sketch para almacenar la salida del potenci√≥metro.

**Lectura de Valores Anal√≥gicos**

Ahora est√°s listo para entrar en el bucle principal del programa. Lo primero que har√°s en la funci√≥n ``void loop()`` es determinar el valor del potenci√≥metro.

El potenci√≥metro est√° conectado a un pin de alimentaci√≥n de 5 voltios, lo que permite que el voltaje en el pin A0 var√≠e entre 0 y 5 voltios. Este voltaje es convertido por el microprocesador del Arduino Uno R3 en un valor anal√≥gico que var√≠a entre 0 y 1023, gracias a la resoluci√≥n de 10 bits del microprocesador.

Una vez convertido, estos valores anal√≥gicos pueden ser utilizados dentro de tu programa.

Para obtener el valor anal√≥gico del potenci√≥metro, utiliza el comando ``analogRead(pin)``. Este comando lee el voltaje que entra por un pin anal√≥gico y lo asigna a un valor entre 0 y 1023:

- Si no hay voltaje, el valor anal√≥gico es 0.
- Si el voltaje es de 5 voltios completos, el valor anal√≥gico ser√° 1023.

As√≠ es como se utiliza:

    * ``analogRead(pin)``: Lee el valor del pin anal√≥gico especificado.

    **Par√°metros**
        - ``pin``: el nombre del pin de entrada anal√≥gico desde el cual se leer√°.

    **Devuelve**
        La lectura anal√≥gica en el pin. Aunque est√° limitada a la resoluci√≥n del convertidor de anal√≥gico a digital (0-1023 para 10 bits o 0-4095 para 12 bits). Tipo de dato: int.

5. Coloca el siguiente comando dentro de la funci√≥n ``void loop()`` para almacenar el valor anal√≥gico del potenci√≥metro en la variable ``potValue`` declarada al inicio de tu sketch:

.. code-block:: Arduino
    :emphasize-lines: 10

    int potValue = 0;

    void setup() {
        // Configura tu c√≥digo aqu√≠, se ejecuta una vez:
        pinMode(9, OUTPUT);  // Configura el pin 9 como salida
    }

    void loop() {
        // Escribe el c√≥digo principal aqu√≠, se ejecuta repetidamente:
        potValue = analogRead(A0);        // Leer valor del potenci√≥metro
    }

Aseg√∫rate de guardar y verificar tu c√≥digo para corregir cualquier error.

**Escritura de Valores Anal√≥gicos**

Los pines digitales en el Arduino Uno R3 solo son capaces de estar en los estados ON o OFF, lo que significa que no pueden emitir verdaderos valores anal√≥gicos. Para simular un comportamiento anal√≥gico en aplicaciones como el control del brillo de un LED, utilizamos una t√©cnica llamada Modulaci√≥n por Ancho de Pulso (PWM). Los pines PWM, marcados con una tilde (~) en la placa, pueden variar la salida percibida ajustando el ciclo de trabajo de la se√±al.

.. image:: img/9_dimmer_pwm_pin.png
    :width: 500
    :align: center

Para controlar el brillo de un LED, usamos el comando ``analogWrite(pin, value)``. Este ajusta el brillo del LED cambiando el ciclo de trabajo de la se√±al PWM enviada al pin.

    * ``analogWrite(pin, value)``: Escribe un valor anal√≥gico (onda PWM) en un pin. Puede usarse para encender un LED a varios niveles de brillo o controlar un motor a diferentes velocidades.

    **Par√°metros**
        - ``pin``: el pin de Arduino al que escribir. Tipos de datos permitidos: int.
        - ``value``: el ciclo de trabajo: entre 0 (siempre apagado) y 255 (siempre encendido). Tipos de datos permitidos: int.
    
    **Devuelve**
        Nada

Piensa en el ciclo de trabajo como el patr√≥n de encendido y apagado de un grifo que controla el flujo de agua en un cubo, que representa el brillo del LED. Aqu√≠ tienes un desglose sencillo:

* ``analogWrite(255)`` significa que el grifo est√° completamente abierto todo el tiempo, llenando el cubo al m√°ximo y haciendo que el LED brille con su m√°xima intensidad.
* ``analogWrite(191)`` significa que el grifo est√° abierto el 75% del tiempo, llenando menos el cubo y atenuando el LED.
* ``analogWrite(0)`` significa que el grifo est√° completamente cerrado, dejando el cubo vac√≠o y apagando el LED.

.. image:: img/9_pwm_signal.png
    :width: 400
    :align: center

6. Agrega un comando ``analogWrite()`` en la funci√≥n ``void loop()`` y comenta cada l√≠nea para mayor claridad:

.. note::

    * Dado que el rango de entrada del potenci√≥metro es de 0 a 1023, pero el rango de salida para los LEDs es de 0 a 255, puedes reducir el valor del potenci√≥metro dividi√©ndolo por 4:

    * Aunque el resultado de la divisi√≥n puede no ser siempre un n√∫mero entero, solo se almacena la parte entera porque las variables est√°n declaradas como enteras (int).

.. code-block:: Arduino
    :emphasize-lines: 11

    int potValue = 0;

    void setup() {
        // Configura tu c√≥digo de inicializaci√≥n, se ejecuta una vez:
        pinMode(9, OUTPUT);  // Configura el pin 9 como salida
    }

    void loop() {
        // Escribe tu c√≥digo principal aqu√≠, se ejecuta repetidamente:
        potValue = analogRead(A0);        // Leer valor del potenci√≥metro
        analogWrite(9, potValue / 4);       // Aplicar brillo al LED en el pin 9
    }

7. Una vez que el c√≥digo est√© cargado en el Arduino Uno R3, girar el potenci√≥metro cambiar√° el brillo de los LEDs. Seg√∫n nuestra configuraci√≥n, girar el potenci√≥metro en sentido horario deber√≠a aumentar el brillo, mientras que girarlo en sentido antihorario deber√≠a disminuirlo.

.. note::

    La depuraci√≥n a menudo requiere revisar tanto el c√≥digo como el circuito para encontrar errores. Si el c√≥digo se compila correctamente o parece estar bien, pero el LED no cambia como se esperaba, el problema puede estar en el circuito. Revisa todas las conexiones y componentes en la protoboard para asegurar un buen contacto.

8. Finalmente, recuerda guardar tu c√≥digo y organizar tu espacio de trabajo.

**Pregunta**

Si conectas el LED a un pin diferente, como el pin 8, y giras el potenci√≥metro, ¬øseguir√° cambiando el brillo del LED? ¬øPor qu√© o por qu√© no?

**Resumen**

En esta lecci√≥n, exploramos c√≥mo trabajar con se√±ales anal√≥gicas en proyectos de Arduino. Aprendimos a leer valores anal√≥gicos de un potenci√≥metro, c√≥mo procesar estos valores en el sketch de Arduino y c√≥mo controlar el brillo de un LED utilizando Modulaci√≥n por Ancho de Pulso (PWM). Tambi√©n profundizamos en el uso de variables para almacenar y manipular datos dentro de nuestros sketches. Al integrar estos elementos, demostramos el control din√°mico de componentes electr√≥nicos, cerrando la brecha entre salidas digitales simples y un control m√°s matizado del hardware a trav√©s de lecturas de entradas anal√≥gicas.


.. note::

    Hallo, willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Community auf Facebook! Tauche gemeinsam mit anderen Enthusiasten tiefer in die Welt von Raspberry Pi, Arduino und ESP32 ein.

    **Warum solltest du beitreten?**

    - **Expertenunterst√ºtzung**: L√∂se nach dem Kauf auftretende Probleme und technische Herausforderungen mit Hilfe unserer Community und unseres Teams.
    - **Lernen & Teilen**: Tausche Tipps und Tutorials aus, um deine F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalte fr√ºhzeitig Einblicke in neue Produktank√ºndigungen und Sneak Peeks.
    - **Sonderrabatte**: Profitiere von exklusiven Rabatten auf unsere neuesten Produkte.
    - **Festliche Aktionen und Verlosungen**: Nimm an Verlosungen und saisonalen Aktionen teil.

    üëâ Bereit, mit uns zu entdecken und zu kreieren? Klicke auf [|link_sf_facebook|] und trete noch heute bei!

9. Dimmbarer Schreibtischlampe
=============================================

Stell dir jede Schreibtischlampe zu Hause vor, die sanft Licht √ºber deine Abendlekt√ºren oder n√§chtlichen Projekte wirft. Hast du dich jemals gefragt, wie diese Lampen es schaffen, ihre Helligkeit so nahtlos anzupassen? In dieser Lektion tauchen wir in die Mechanik und Elektronik einer Schreibtischlampe ein und verwandeln Neugier in Wissen, indem wir eine solche Lampe von Grund auf mit Arduino bauen.

.. .. image:: img/9_desk_lamp_pot.jpg
..     :width: 500
..     :align: center
    
.. raw:: html

    <video muted controls style = "max-width:90%">
        <source src="_static/video/9_dimmble_led.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

Mach dich bereit, um:

* Die Rolle von Variablen zu entschl√ºsseln, die Daten in Arduino-Skizzen speichern und manipulieren.
* Das Lesen analoger Signale mit ``analogRead()`` zu meistern.
* PWM (Pulsweitenmodulation) durch ``analogWrite()`` zu erkunden, um die Helligkeit von LEDs fein zu justieren.

Am Ende dieser Lektion wirst du nicht nur eine voll funktionsf√§hige elektronische Schreibtischlampe gebaut haben, sondern auch dein Verst√§ndnis daf√ºr vertieft haben, wie Software mit Hardware interagiert, um allt√§gliche Objekte zum Leben zu erwecken. Lass uns unser Wissen erhellen, indem wir eine Lampe bauen, die auf deine Ber√ºhrung reagiert.


Den Schaltkreis aufbauen
------------------------------------

**Ben√∂tigte Komponenten**

.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * Rote LED
     - 1 * 220Œ© Widerstand
     - 1 * Potentiometer
   * - |list_uno_r3| 
     - |list_red_led| 
     - |list_220ohm| 
     - |list_potentiometer| 
   * - 1 * USB-Kabel
     - 1 * Breadboard
     - Jumper-Kabel
     - 1 * Multimeter
   * - |list_usb_cable| 
     - |list_breadboard| 
     - |list_wire| 
     - |list_meter|

**Schritte zum Aufbau**

1. Finde ein Potentiometer.

Ein Potentiometer, oft einfach ‚ÄûPoti‚Äú genannt, dient als variabler Widerstand. Das bedeutet, dass es seinen Widerstand von nahezu null bis zu seinem Maximalwert anpassen kann. Die meisten Potentiometer sind mit ihrem Bereich gekennzeichnet. Das Potentiometer in deinem Kit ist als 103 (10K) Potentiometer bezeichnet, was 10 Kiloohm oder 10.000 Ohm entspricht.

.. image:: img/9_dimmer_pot.png
    :width: 200
    :align: center

Im Inneren des Potentiometers befindet sich ein Streifen aus Widerstandsmaterial mit einem Schieberegler, der sich entlang dieses Streifens bewegt. Jeder Endpunkt des Widerstandsmaterials ist mit einem Anschluss oder Pin verbunden, hier als Pins A und B dargestellt. Der Widerstand zwischen den Pins A und B ist fest und stellt den maximalen Widerstand dar, den das Potentiometer bieten kann. Bei den in deinem Kit enthaltenen betr√§gt dieser maximale Widerstand 10 Kiloohm.

.. image:: img/9_dimmer_pot_2.png
    :width: 400
    :align: center

* **A**: Mit Strom verbinden
* **B**: Mit Masse verbinden
* **C**: Mit Analogpin verbinden
* **D**: Schieberegler
* **E**: Widerstandsstreifen

Pin C ist mit dem Schieberegler verbunden. Der Widerstand durch den Schieberegler oder Pin C h√§ngt von der Position des Schiebers auf dem Widerstandsmaterial ab.

.. image:: img/9_dimmer_pot_3.png
    :width: 400
    :align: center

In Schaltpl√§nen sieht das Symbol f√ºr ein Potentiometer typischerweise aus wie ein Widerstand mit einem Pfeil durch die Mitte.

.. image:: img/9_dimmer_pot_4.png
    :width: 200
    :align: center


Nun wollen wir sehen, wie das Potentiometer den Widerstand in einem Stromkreis einstellt.

2. Schlie√üe das Potentiometer an das Breadboard an. Stecke seine drei Pins in die L√∂cher 30G, 29F und 28G.

.. note::
    Das Potentiometer tr√§gt die Aufschrift "P 103", was auf seinen Widerstandsbereich hinweist. Setze das Potentiometer wie gezeigt in das Breadboard ein, wobei die beschriftete Seite zu dir zeigt.

.. image:: img/9_dimmer_test_pot.png
    :width: 500
    :align: center

3. Um den Widerstand des Potentiometers zu messen, steckst du ein Kabel in 29J und ber√ºhrst es mit der roten Pr√ºfspitze, und ein weiteres Kabel in 28J, das du mit der schwarzen Pr√ºfspitze ber√ºhrst.

.. image:: img/9_dimmer_test_wore.png
    :width: 500
    :align: center

4. Stelle das Multimeter auf den Widerstandsmessbereich von 20 Kiloohm (20K) ein.

.. image:: img/multimeter_20k.png
    :width: 300
    :align: center

5. Drehe das Potentiometer auf die "1"-Position, wie im Diagramm angegeben.

.. image:: img/9_pot_direction.png
    :width: 300
    :align: center
    
6. Trage die gemessenen Widerstandswerte in die Tabelle ein.

.. note::
    Die Werte in der Tabelle sind meine Messungen; deine Ergebnisse k√∂nnen variieren. Trage sie entsprechend deinen tats√§chlichen Messungen ein.

.. list-table::
   :widths: 20 20
   :header-rows: 1

   * - Messpunkt
     - Widerstand (Kiloohm)
   * - 1
     - *1,52*
   * - 2
     -
   * - 3
     -

7. Drehe das Potentiometer im Uhrzeigersinn auf die Positionen 2 und 3, um den Widerstand an jedem Punkt zu messen, und trage die Ergebnisse in die Tabelle ein.

.. list-table::
   :widths: 20 20
   :header-rows: 1

   * - Messpunkt
     - Widerstand (Kiloohm)
   * - 1
     - *1,52*
   * - 2
     - *5,48*
   * - 3
     - *9,01*

Aus den Messergebnissen:

* Wenn du das Potentiometer **im Uhrzeigersinn** von Position 1 zu Position 3 drehst, erh√∂ht sich der Widerstand zwischen Position 2 und Position 1.
* Umgekehrt verringert sich der Widerstand zwischen Position 2 und Position 1, wenn du das Potentiometer **gegen den Uhrzeigersinn** von Position 3 zu Position 1 drehst.

8. Stecke das andere Ende des Jumperkabels von 28J in den negativen Anschluss des Breadboards.

.. image:: img/9_dimmer_led1_pot_gnd.png
    :width: 500
    :align: center

9. Stecke dann das andere Ende des Jumperkabels von 29J in den A0-Pin des Arduino Uno R3.

.. image:: img/9_dimmer_led1_pot_a0.png
    :width: 500
    :align: center

10. Verbinde schlie√ülich das Potentiometer mit 5V, indem du ein Jumperkabel zwischen Loch 30J des Breadboards und den 5V-Pin des Arduino Uno R3 einf√ºgst.

.. image:: img/9_dimmer_led1_pot_5v.png
    :width: 500
    :align: center

11. Verbinde den GND-Pin des Arduino Uno R3 mit dem negativen Anschluss des Breadboards, indem du ein langes Jumperkabel verwendest.

.. image:: img/9_dimmer_led1_gnd.png
    :width: 500
    :align: center

12. Nimm eine LED heraus. Stecke ihre Anode (langer Pin) in Loch 13A und ihre Kathode (kurzer Pin) in den negativen Anschluss des Breadboards.

.. image:: img/9_dimmer_led1_led.png
    :width: 500
    :align: center

13. Platziere einen 220-Ohm-Widerstand zwischen den L√∂chern 13E und 13G.

.. image:: img/9_dimmer_led1_resistor.png
    :width: 500
    :align: center

14. Verbinde das Loch 13J des Breadboards mit Pin 9 des Arduino Uno R3 mithilfe eines Kabels.

.. image:: img/9_dimmer_led1_pin9.png
    :width: 500
    :align: center

**Frage**:

Wie denkst du, w√ºrde sich die Spannung an A0 √§ndern, wenn das Potentiometer im Uhrzeigersinn bzw. gegen den Uhrzeigersinn gedreht wird?


Codeerstellung
-------------------------------------

In dieser Lektion wollen wir die Helligkeit der LED basierend auf der Drehung des Potentiometers anpassen.

So k√∂nnte der Pseudocode aussehen:

.. code-block::

    Erstelle eine Variable, um die Eingabewerte zu speichern.
    Setze einen Pin als Ausgang fest.
    Beginne die Hauptschleife:
        Speichere den Wert des Potentiometers in einer Variable.
        Setze die LED-Helligkeit basierend auf der Potentiometer-Variable.
    Beende die Hauptschleife.

**Pin-Initialisierung**

1. √ñffne die Arduino IDE und starte ein neues Projekt, indem du im Men√º ‚ÄûDatei‚Äú die Option ‚ÄûNeue Skizze‚Äú ausw√§hlst.
2. Speichere deine Skizze unter dem Namen ``Lesson9_Desk_Lamp`` mit ``Strg + S`` oder durch Klicken auf ‚ÄûSpeichern‚Äú.

3. Die LED in deinem Schaltkreis ist an einen digitalen Pin des Arduino Uno R3 angeschlossen, der als Ausgang definiert werden muss. Vergiss nicht, einen Kommentar hinzuzuf√ºgen.

.. note::

    Das Potentiometer ist ein analoges Eingabeger√§t, das mit dem analogen Pin A0 verbunden ist. Alle analogen Pins am Arduino sind Eing√§nge und m√ºssen daher nicht wie digitale Pins als INPUT deklariert werden.
    
.. code-block:: Arduino
    :emphasize-lines: 3

    void setup() {
        // Setup-Code, der einmal ausgef√ºhrt wird:
        pinMode(9, OUTPUT);  // Setze Pin 9 als Ausgang
    }

    void loop() {
        // Hauptcode, der wiederholt ausgef√ºhrt wird:
    }

**Variablendeklaration**

Um die LED mit einem Potentiometer zu steuern, ben√∂tigst du eine **Variable**, um den Wert des Potentiometers zu speichern.

Tauchen wir in das Konzept der Variablen in der Programmierung ein. Eine Variable funktioniert wie ein Beh√§lter in deinem Programm und erlaubt es dir, Informationen zu speichern und sp√§ter abzurufen.

.. image:: img/9_variable_define.png
    :width: 400
    :align: center

Bevor du eine Variable verwendest, muss sie deklariert werden, was als Variablendeklaration bezeichnet wird.

Um eine Variable zu deklarieren, musst du ihren Typ und ihren Namen definieren. Es ist nicht notwendig, der Variablen sofort einen Wert zuzuweisen ‚Äì dies kann sp√§ter im Sketch erfolgen. So kannst du eine Variable deklarieren:

.. code-block:: Arduino

    int var;

Hier ist ``int`` der Datentyp f√ºr ganze Zahlen, der Werte von -32768 bis 32767 speichern kann. Variablen k√∂nnen verschiedene Datentypen speichern, darunter ``float``, ``byte``, ``boolean``, ``char`` und ``string``.

Variablennamen k√∂nnen beliebig sein, zum Beispiel ``i``, ``apple``, ``Bruce``, ``R2D2`` oder ``Sectumsempra``. Es gibt jedoch Regeln f√ºr die Namensgebung:

* Namen d√ºrfen Buchstaben, Ziffern und Unterstriche enthalten, aber keine Leerzeichen oder Sonderzeichen wie !, #, % usw.

  .. image:: img/9_variable_name1.png
    :width: 400
    :align: center

* Namen m√ºssen mit einem Buchstaben oder einem Unterstrich (_) beginnen. Sie d√ºrfen nicht mit einer Zahl beginnen.

  .. image:: img/9_variable_name2.png
    :width: 400
    :align: center

* Namen sind case-sensitive. ``myCat`` und ``mycat`` w√ºrden als unterschiedliche Variablen betrachtet werden.

* Vermeide die Verwendung von Schl√ºsselw√∂rtern, die von der Arduino IDE erkannt und hervorgehoben werden, wie ``int``, das farblich hervorgehoben wird, um seine besondere Bedeutung zu zeigen. Wenn der Name eine Farbe wie Orange oder Blau annimmt, ist es ein Schl√ºsselwort und sollte nicht als Variablenname verwendet werden.


Der Geltungsbereich einer Variable bestimmt, wo sie in deinem Sketch verwendet werden kann, abh√§ngig davon, wo sie deklariert wird.

* Eine au√üerhalb aller Funktionen (d.h. au√üerhalb von geschweiften Klammern) deklarierte Variable ist eine globale Variable und kann √ºberall im Sketch verwendet werden.
* Eine innerhalb einer Funktion (innerhalb von geschweiften Klammern) deklarierte Variable ist eine lokale Variable und kann nur innerhalb dieser Funktion verwendet werden.

.. code-block:: Arduino
    :emphasize-lines: 1,4,9

    int global_variable = 0; // Dies ist eine globale Variable

    void setup() {
        int variable = 0; // Dies ist eine lokale Variable
    }

    void loop() {
        int variable = 0; // Dies ist eine weitere lokale Variable
    }

.. note::

    Lokale Variablen k√∂nnen nur innerhalb der Funktionen verwendet werden, in denen sie deklariert wurden. Das bedeutet, dass du Variablen mit dem gleichen Namen in verschiedenen Funktionen ohne Probleme deklarieren kannst. Vermeide jedoch die Verwendung desselben Namens f√ºr lokale und globale Variablen, um Verwirrung zu vermeiden.

In der Regel sollte ein Arduino-Sketch einem konsistenten Muster folgen: Zuerst werden globale Variablen deklariert, dann die ``void setup()``-Funktion definiert und schlie√ülich die ``void loop()``-Funktion.

4. Gehe ganz an den Anfang deines Sketches, vor die ``void setup()``-Funktion. Hier deklarierst du die Variable, um den Wert vom Potentiometer zu speichern.

.. code-block:: Arduino
    :emphasize-lines: 1

    int potValue = 0;

    void setup() {
        // Setup-Code, der einmal ausgef√ºhrt wird:
        pinMode(9, OUTPUT);  // Setze Pin 9 als Ausgang
    }

    void loop() {
        // Hauptcode, der wiederholt ausgef√ºhrt wird:
    }

Du hast gerade eine Integer-Variable namens ``potValue`` deklariert und auf Null gesetzt. Diese Variable wird sp√§ter im Sketch verwendet, um den Ausgangswert des Potentiometers zu speichern.

**Analogwerte lesen**

Nun bist du bereit, die Hauptschleife des Programms zu betreten. Das Erste, was du in der ``void loop()``-Funktion tun wirst, ist den Wert des Potentiometers zu ermitteln.

Das Potentiometer ist an einen 5-Volt-Pin angeschlossen, wodurch die Spannung am Pin A0 zwischen 0 und 5 Volt variieren kann. Diese Spannung wird vom Mikroprozessor des Arduino Uno R3 in einen Analogwert von 0 bis 1023 umgewandelt, dank der 10-Bit-Aufl√∂sung des Mikroprozessors.

Einmal umgewandelt, k√∂nnen diese Analogwerte im Programm verwendet werden.

Um den Analogwert des Potentiometers abzurufen, verwende den Befehl ``analogRead(pin)``. Dieser liest die an einem analogen Pin anliegende Spannung und ordnet sie einem Wert zwischen 0 und 1023 zu:

- Liegt keine Spannung an, ist der Analogwert 0.
- Bei voller 5-Volt-Spannung betr√§gt der Analogwert 1023.

So verwendest du den Befehl:

    * ``analogRead(pin)``: Liest den Wert vom angegebenen analogen Pin.

    **Parameter**
        - ``pin``: der Name des analogen Eingangs-Pins, von dem gelesen wird.

    **R√ºckgabewert**
        Der analoge Wert auf dem Pin, begrenzt auf die Aufl√∂sung des Analog-Digital-Wandlers (0-1023 f√ºr 10 Bit oder 0-4095 f√ºr 12 Bit). Datentyp: int.

5. Platziere den folgenden Befehl in der ``void loop()``-Funktion, um den Analogwert des Potentiometers in der oben deklarierten Variable ``potValue`` zu speichern:

.. code-block:: Arduino
    :emphasize-lines: 10

    int potValue = 0;

    void setup() {
        // Setup-Code, der einmal ausgef√ºhrt wird:
        pinMode(9, OUTPUT);  // Setze Pin 9 als Ausgang
    }

    void loop() {
        // Hauptcode, der wiederholt ausgef√ºhrt wird:
        potValue = analogRead(A0);        // Lese den Wert vom Potentiometer
    }

Speichere und √ºberpr√ºfe deinen Code, um eventuelle Fehler zu korrigieren.


**Analogwerte schreiben**

Die digitalen Pins des Arduino Uno R3 k√∂nnen nur EIN- oder AUS-Zust√§nde annehmen, was bedeutet, dass sie keine echten Analogwerte ausgeben k√∂nnen. Um ein analoges Verhalten wie die Steuerung der Helligkeit einer LED zu simulieren, verwenden wir eine Technik namens Pulsweitenmodulation (PWM). PWM-Pins, die auf der Platine mit einer Tilde (~) markiert sind, k√∂nnen den wahrgenommenen Ausgangswert durch Anpassung des Tastverh√§ltnisses des Signals variieren.

.. image:: img/9_dimmer_pwm_pin.png
    :width: 500
    :align: center

Um die Helligkeit einer LED zu steuern, verwenden wir den Befehl ``analogWrite(pin, value)``. Dieser passt die Helligkeit der LED an, indem das Tastverh√§ltnis des PWM-Signals, das an den Pin gesendet wird, ver√§ndert wird.

    * ``analogWrite(pin, value)``: Schreibt einen analogen Wert (PWM-Signal) an einen Pin. Kann verwendet werden, um eine LED in unterschiedlicher Helligkeit zu betreiben oder einen Motor mit verschiedenen Geschwindigkeiten anzutreiben.

    **Parameter**
        - ``pin``: Der Arduino-Pin, auf den geschrieben wird. Erlaubte Datentypen: int.
        - ``value``: Das Tastverh√§ltnis: zwischen 0 (immer aus) und 255 (immer an). Erlaubte Datentypen: int.
    
    **R√ºckgabewert**
        Nichts

Betrachte das Tastverh√§ltnis wie ein Wasserhahn, der den Wasserfluss (LED-Helligkeit) in einen Eimer regelt. Hier ist eine einfache √úbersicht:

* ``analogWrite(255)`` bedeutet, dass der Wasserhahn die ganze Zeit vollst√§ndig offen ist, wodurch der Eimer voll und die LED am hellsten ist.
* ``analogWrite(191)`` bedeutet, dass der Wasserhahn 75 % der Zeit offen ist, wodurch der Eimer weniger voll und die LED dunkler ist.
* ``analogWrite(0)`` bedeutet, dass der Wasserhahn vollst√§ndig geschlossen ist, der Eimer leer bleibt und die LED aus ist.

.. image:: img/9_pwm_signal.png
    :width: 400
    :align: center

6. F√ºge einen ``analogWrite()``-Befehl in die ``void loop()``-Funktion ein und kommentiere jede Zeile f√ºr eine bessere √úbersichtlichkeit:

.. note::

    * Da der Eingangsbereich des Potentiometers von 0 bis 1023 reicht, der Ausgangsbereich f√ºr die LEDs jedoch von 0 bis 255, kannst du den Wert des Potentiometers durch 4 teilen, um diese L√ºcke zu √ºberbr√ºcken:

    * Obwohl das Ergebnis der Division m√∂glicherweise kein ganzzahliger Wert ist, wird nur der Ganzzahlanteil gespeichert, da die Variablen als Integer (int) deklariert sind.


.. code-block:: Arduino
    :emphasize-lines: 11

    int potValue = 0;

    void setup() {
        // Setup-Code, der einmal ausgef√ºhrt wird:
        pinMode(9, OUTPUT);  // Setze Pin 9 als Ausgang
    }

    void loop() {
        // Hauptcode, der wiederholt ausgef√ºhrt wird:
        potValue = analogRead(A0);        // Lese den Wert vom Potentiometer
        analogWrite(9, potValue / 4);     // Wende die Helligkeit auf die LED an Pin 9 an
    }

7. Sobald der Code auf das Arduino Uno R3 hochgeladen ist, ver√§ndert das Drehen des Potentiometers die Helligkeit der LEDs. Gem√§√ü unserem Aufbau sollte das Drehen des Potentiometers im Uhrzeigersinn die Helligkeit erh√∂hen, w√§hrend das Drehen gegen den Uhrzeigersinn sie verringert.

.. note::

    Debugging erfordert oft die √úberpr√ºfung sowohl des Codes als auch der Schaltung auf Fehler. Wenn der Code korrekt kompiliert oder korrekt erscheint, die LED jedoch nicht wie erwartet reagiert, k√∂nnte das Problem in der Schaltung liegen. √úberpr√ºfe alle Verbindungen und Komponenten auf dem Breadboard auf guten Kontakt.

8. Speichere abschlie√üend deinen Code und r√§ume deinen Arbeitsplatz auf.

**Frage**

Wenn du die LED an einen anderen Pin anschlie√üt, z. B. Pin 8, und das Potentiometer drehst, wird die Helligkeit der LED weiterhin ge√§ndert? Warum oder warum nicht?

**Zusammenfassung**

In dieser Lektion haben wir gelernt, wie man mit analogen Signalen in Arduino-Projekten arbeitet. Wir haben verstanden, wie man Analogwerte von einem Potentiometer liest, diese Werte im Arduino-Sketch verarbeitet und die Helligkeit einer LED mithilfe von Pulsweitenmodulation (PWM) steuert. Dar√ºber hinaus haben wir den Einsatz von Variablen zur Speicherung und Manipulation von Daten in unseren Sketchen erlernt. Durch die Integration dieser Elemente haben wir eine dynamische Steuerung elektronischer Komponenten demonstriert und den √úbergang von einfachen digitalen Ausg√§ngen zu einer feineren Steuerung von Hardware √ºber analoge Eingaben vollzogen.

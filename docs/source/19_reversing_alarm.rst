.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder sur Facebook ! Plongez plus profond√©ment dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez vos probl√®mes apr√®s-vente et relevez vos d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez & Partagez** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Profitez d'un acc√®s anticip√© aux annonces de nouveaux produits et √† des avant-premi√®res exclusives.
    - **R√©ductions sp√©ciales** : B√©n√©ficiez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et concours** : Participez √† des concours et √† des promotions festives.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

19. Syst√®me d'alarme de stationnement en marche arri√®re
=============================================================

.. image:: img/19_packing.png
    :width: 600
    :align: center

Lorsqu'on recule avec une voiture, il est crucial d'√™tre conscient des obstacles derri√®re le v√©hicule, surtout dans des situations de visibilit√© r√©duite. 
Pour am√©liorer la s√©curit√©, de nombreux v√©hicules modernes sont √©quip√©s de syst√®mes d'avertissement de recul. 

Dans ce projet, nous allons utiliser un Arduino, un capteur ultrasonique et un buzzer actif pour simuler un tel syst√®me. 
Le capteur ultrasonique permet de d√©tecter la distance des obstacles derri√®re le v√©hicule, et lorsque cette distance est trop courte, le buzzer actif √©met une alerte pour avertir le conducteur. 

Ce projet nous permet non seulement de mieux comprendre le fonctionnement des capteurs ultrasoniques, mais √©galement d'apprendre √† programmer et √† contr√¥ler un Arduino pour mettre en ≈ìuvre une fonction pratique d'avertissement de recul. 

.. raw:: html

    <video controls style = "max-width:90%">
        <source src="_static/video/19_reverse_parking_system.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>
  

**Module Ultrasonique**

Imaginez que vous vous trouvez dans une pi√®ce sombre et que vous ne pouvez pas voir les objets autour de vous. Dans cette situation, vous pourriez taper dans vos mains pour produire un son qui se propage vers l'ext√©rieur. Lorsque ce son rencontre un mur ou un autre objet, il rebondit sous forme d'√©cho. Si vous √©coutez attentivement, vous pouvez entendre cet √©cho. En calculant le temps que le son met pour voyager et revenir, vous pouvez estimer approximativement la distance qui vous s√©pare du mur ou de l'objet. Les capteurs ultrasoniques fonctionnent de mani√®re similaire pour "voir" le monde qui les entoure.

.. image:: img/19_ultrasonic_pic.png
    :width: 400
    :align: center

Les capteurs ultrasoniques se composent principalement de deux parties : un √©metteur et un r√©cepteur, un peu comme votre bouche et vos oreilles.

1. √âmission des ondes sonores :

Lorsque le capteur ultrasonique est activ√©, l'√©metteur envoie une s√©rie d'ondes sonores rapides, un peu comme si vous tapiez dans vos mains. Ces ondes sonores ont une fr√©quence si √©lev√©e que nos oreilles ne peuvent pas les entendre.

2. Propagation et retour du son :

Les ondes sonores se propagent vers l'avant jusqu'√† rencontrer un obstacle, comme un mur ou une table, puis elles rebondissent.

3. R√©ception des ondes sonores :

La partie r√©ceptrice du capteur ultrasonique est charg√©e de "capturer" ces √©chos, comme vos oreilles captant les sons r√©fl√©chis par les objets.

4. Calcul de la distance :

Le capteur enregistre le temps n√©cessaire aux ondes sonores pour se d√©placer et revenir. 
√âtant donn√© que la vitesse du son est connue (environ 340 m√®tres par seconde dans l'air), 
en multipliant ce temps par la vitesse du son, on obtient la distance totale parcourue par les ondes sonores. 
Comme nous n'avons besoin que de la distance aller simple jusqu'√† l'objet, 
nous divisons la distance totale par 2 pour obtenir le r√©sultat final.
Cette technologie rend les capteurs ultrasoniques tr√®s utiles dans de nombreuses situations, 
comme aider les robots √† √©viter les obstacles ou assister les conducteurs en indiquant la distance par rapport aux objets lorsqu'ils reculent.

.. image:: img/19_ultrasonic_ms.png
    :width: 500
    :align: center


**Synchronisation Ultrasonique**

Le diagramme de synchronisation est illustr√© ci-dessous. 
Il suffit de fournir une br√®ve impulsion de 10us pour l'entr√©e de d√©clenchement afin de d√©marrer le mesurage, 
puis le module enverra une rafale de 8 cycles d'ultrasons √† 40 kHz et rel√®vera son √©cho. 
Vous pouvez calculer la distance √† l'aide de l'intervalle de temps entre l'envoi du signal de d√©clenchement et la r√©ception du signal d'√©cho.

Formule : us / 58 = centim√®tres ou us / 148 = pouces ; ou : la distance = temps de haut niveau * vitesse (340M/S) / 2 ; 
il est recommand√© d'utiliser un cycle de mesure sup√©rieur √† 60 ms afin de pr√©venir les collisions de signaux entre le signal de d√©clenchement et le signal d'√©cho.

.. image:: img/19_ultrasonic_timing.png
    :width: 600
    :align: center


Construction du circuit
--------------------------------

**Composants n√©cessaires**

.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * Module Ultrasonique
     - 1 * Buzzer Actif
     - Fils de connexion
   * - |list_uno_r3| 
     - |list_ultrasonic| 
     - |list_active_buzzer| 
     - |list_wire| 
   * - 1 * C√¢ble USB
     - 1 * Plaque d'essai
     - 1 * Multim√®tre
     - 
   * - |list_usb_cable| 
     - |list_breadboard| 
     - |list_meter| 
     - 



**√âtapes de construction**

Suivez le sch√©ma de c√¢blage ou les √©tapes ci-dessous pour assembler votre circuit.



.. image:: img/19_reversing_aid_bb.png
    :width: 600
    :align: center


Cr√©ation du code
--------------------

1. Ouvrez l'IDE Arduino et d√©marrez un nouveau projet en s√©lectionnant "New Sketch" dans le menu "Fichier".
2. Enregistrez votre sketch sous le nom ``Lesson19_reversing_alarm`` en utilisant ``Ctrl + S`` ou en cliquant sur "Enregistrer".

3. Tout d'abord, nous devons d√©finir les broches de l'Arduino qui sont connect√©es au capteur ultrasonique et au buzzer. Cette √©tape est cruciale car elle pose les bases de l'interface mat√©rielle.

* **TRIGGER_PIN** et **ECHO_PIN** sont utilis√©s pour d√©clencher et recevoir les √©chos du capteur ultrasonique.
* **BUZZER_PIN** est la broche connect√©e au buzzer.

.. code-block:: Arduino

  #define TRIGGER_PIN  10
  #define ECHO_PIN     9
  #define BUZZER_PIN   2


4. Dans la fonction setup(), nous d√©finissons le mode de chaque broche. La broche Trig doit √™tre configur√©e en sortie (car elle envoie le signal), la broche Echo est configur√©e en entr√©e (car elle re√ßoit le signal), et la broche du buzzer est √©galement d√©finie en sortie (car elle doit √©mettre un son).

.. code-block:: Arduino

  void setup() {
    pinMode(TRIGGER_PIN, OUTPUT);
    pinMode(ECHO_PIN, INPUT);
    pinMode(BUZZER_PIN, OUTPUT);
    Serial.begin(9600); // D√©marrage de la communication s√©rie pour le d√©bogage et la visualisation de la distance
  }

5. √âcriture de la fonction measureDistance():

La fonction measureDistance() encapsule la logique n√©cessaire pour d√©clencher le capteur ultrasonique et lire la distance en fonction de l'√©cho re√ßu :

a. D√©clenchement de l'impulsion ultrasonique

  * Mettez le TRIGGER_PIN √† LOW au d√©part pour assurer une impulsion propre.
  * Un court d√©lai de 2 microsecondes garantit que la ligne est d√©gag√©e.
  * Envoyez une impulsion HIGH de 10 microsecondes sur le TRIGGER_PIN. Cette impulsion demande au capteur d'√©mettre une onde sonore ultrasonique.
  * Remettez le TRIGGER_PIN √† LOW pour terminer l'impulsion.

  .. code-block:: Arduino

    long measureDistance() {
      digitalWrite(TRIGGER_PIN, LOW);  // Assurez-vous que la broche Trig est √† LOW avant une impulsion
      delayMicroseconds(2);
      digitalWrite(TRIGGER_PIN, HIGH); // Envoyez une impulsion HIGH
      delayMicroseconds(10);           // Dur√©e de l'impulsion de 10 microsecondes
      digitalWrite(TRIGGER_PIN, LOW);  // Terminez l'impulsion HIGH
    }

.. note::

  Dans les le√ßons pr√©c√©dentes, nous avons travaill√© avec des types de variables ``int`` et ``float``. Voyons maintenant ce que sont les variables ``long`` et ``unsigned long`` :

  * ``long`` : Un entier ``long`` est une version √©tendue d'un ``int``. Il est utilis√© pour stocker des valeurs enti√®res plus grandes que la capacit√© des ``int`` standard. Un ``long`` occupe g√©n√©ralement 32 ou 64 bits de m√©moire, ce qui lui permet de contenir des valeurs beaucoup plus grandes, positives comme n√©gatives.
  * ``unsigned long`` : Un ``unsigned long`` est similaire √† un ``long`` mais ne peut repr√©senter que des valeurs non n√©gatives. Il utilise le bit normalement r√©serv√© au signe pour √©tendre la plage des valeurs possibles, mais uniquement dans le spectre positif.



b. Lecture de l'√©cho

  * La fonction pulseIn() est utilis√©e sur l'ECHO_PIN pour mesurer la dur√©e de l'impulsion entrante. Cette fonction attend que la broche passe √† HIGH, mesure combien de temps elle reste √† HIGH, puis retourne la dur√©e en microsecondes.
  * Cette dur√©e correspond au temps n√©cessaire √† l'onde ultrasonique pour voyager jusqu'√† l'objet et revenir.

  .. code-block:: Arduino
    :emphasize-lines: 7

    long measureDistance() {
      digitalWrite(TRIGGER_PIN, LOW);  // Assurez-vous que la broche Trig est √† LOW avant une impulsion
      delayMicroseconds(2);
      digitalWrite(TRIGGER_PIN, HIGH); // Envoyez une impulsion HIGH
      delayMicroseconds(10);           // Dur√©e de l'impulsion de 10 microsecondes
      digitalWrite(TRIGGER_PIN, LOW);  // Terminez l'impulsion HIGH
      long duration = pulseIn(ECHO_PIN, HIGH);  // Mesurez la dur√©e du niveau HIGH sur la broche Echo
    }

c. Calcul de la distance

  * La vitesse du son dans l'air (environ 340 m/s) est utilis√©e ici. La formule pour calculer la distance est (dur√©e * vitesse du son) / 2. Nous divisons par 2 car l'onde sonore se d√©place jusqu'√† l'objet et revient, donc nous ne comptons que la moiti√© de la distance pour une mesure aller simple.
  * Dans notre code, 0.034 cm/us (vitesse du son en cm/microseconde) est utilis√© comme facteur de conversion.

  .. code-block:: Arduino
    :emphasize-lines: 8,9

    long measureDistance() {
      digitalWrite(TRIGGER_PIN, LOW);  // Assurez-vous que la broche Trig est √† LOW avant une impulsion
      delayMicroseconds(2);
      digitalWrite(TRIGGER_PIN, HIGH); // Envoyez une impulsion HIGH
      delayMicroseconds(10);           // Dur√©e de l'impulsion de 10 microsecondes
      digitalWrite(TRIGGER_PIN, LOW);  // Terminez l'impulsion HIGH
      long duration = pulseIn(ECHO_PIN, HIGH);  // Mesurez la dur√©e du niveau HIGH sur la broche Echo
      long distance = duration * 0.034 / 2;     // Calculez la distance (en cm)
      return distance;
    }

6. Impl√©mentation de la boucle principale
Dans la fonction loop(), la distance est mesur√©e fr√©quemment en utilisant la fonction measureDistance(). 
Des d√©cisions sont prises en fonction de cette distance, comme l'activation du buzzer.

.. code-block:: Arduino

  void loop() {
    long distance = measureDistance(); // Mesurer la distance
    Serial.print("Distance : ");
    Serial.print(distance);
    Serial.println(" cm");

    if (distance > 0 && distance <= 50) {
      digitalWrite(BUZZER_PIN, HIGH);  // Activer le buzzer si l'objet est proche
      delay(100);                      // Le buzzer sonne pendant 100 millisecondes
      digitalWrite(BUZZER_PIN, LOW);   // √âteindre le buzzer
    } else {
      digitalWrite(BUZZER_PIN, LOW);   // Laisser le buzzer √©teint
    }

    delay(100);  // D√©lai entre les mesures pour √©viter une surcharge du capteur
  }

7. Voici votre code complet. Vous pouvez maintenant cliquer sur "T√©l√©verser" pour envoyer le code √† l'Arduino Uno R3.

.. code-block:: Arduino

  #define TRIGGER_PIN  10
  #define ECHO_PIN     9
  #define BUZZER_PIN   2

  void setup() {
    pinMode(TRIGGER_PIN, OUTPUT);  // Configurer la broche Trig comme sortie
    pinMode(ECHO_PIN, INPUT);      // Configurer la broche Echo comme entr√©e
    pinMode(BUZZER_PIN, OUTPUT);   // Configurer la broche du buzzer comme sortie
    Serial.begin(9600);            // D√©marrer la communication s√©rie pour le d√©bogage
  }

  void loop() {
    long distance = measureDistance(); // Appeler la fonction pour mesurer la distance
    Serial.print("Distance : ");
    Serial.print(distance);
    Serial.println(" cm");

    if (distance > 0 && distance <= 50) { // Si la distance est inf√©rieure ou √©gale √† 50 centim√®tres
      digitalWrite(BUZZER_PIN, HIGH);     // Activer le buzzer
      delay(100);                         // Le buzzer sonne pendant 100 millisecondes
      digitalWrite(BUZZER_PIN, LOW);      // √âteindre le buzzer
    } else {
      digitalWrite(BUZZER_PIN, LOW);      // Laisser le buzzer √©teint
    }

    delay(100);  // D√©lai entre les mesures
  }

  long measureDistance() {
    digitalWrite(TRIGGER_PIN, LOW);  // Assurez-vous que la broche Trig est √† LOW avant l'impulsion
    delayMicroseconds(2);
    digitalWrite(TRIGGER_PIN, HIGH); // Envoyer une impulsion HIGH
    delayMicroseconds(10);           // Dur√©e de l'impulsion de 10 microsecondes
    digitalWrite(TRIGGER_PIN, LOW);  // Terminer l'impulsion HIGH

    long duration = pulseIn(ECHO_PIN, HIGH);  // Mesurer la dur√©e du niveau HIGH sur la broche Echo
    long distance = duration * 0.034 / 2;     // Calculer la distance (en cm)
    return distance;
  }

8. Enfin, n'oubliez pas d'enregistrer votre code et de ranger votre espace de travail.

**Question**

Si vous souhaitez que la distance d√©tect√©e par cet appareil soit plus pr√©cise avec des d√©cimales, comment devriez-vous modifier le code ?

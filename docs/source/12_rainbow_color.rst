.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers fascinant du Raspberry Pi, d'Arduino et d'ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez et partagez** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos nouveaux produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et √† des promotions pendant les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

12. Les Couleurs de l'Arc-en-ciel
=======================================
Imaginez que vous puissiez peindre avec de la lumi√®re, en m√©langeant le rouge, le vert et le bleu pour cr√©er toutes les nuances possibles, comme si vous m√©langez des couleurs sur une palette, mais avec des faisceaux de lumi√®re.

.. image:: img/12_rgb_mix.png
    :width: 300
    :align: center

Bienvenue dans cette le√ßon, o√π vous allez explorer le monde captivant des LEDs RGB et d√©couvrir comment la combinaison des couleurs primaires peut cr√©er un spectre vibrant de nuances. Ce cours pratique vous guidera √† travers les principes de fonctionnement des LEDs RGB et vous introduira aux applications pratiques de la programmation et de la construction de circuits.

Dans cette le√ßon, vous apprendrez √† :

* Comprendre les principes de fonctionnement des LEDs RGB.
* Apprendre √† cr√©er et utiliser des fonctions dans votre code pour simplifier les t√¢ches et am√©liorer la lisibilit√©.
* Explorer l'impact des diff√©rentes combinaisons de couleurs en manipulant la LED RGB.

Construction du Circuit
-----------------------------

**Composants n√©cessaires**

.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * LED RGB
     - 3 * R√©sistance de 220Œ©
     - Fils de connexion
   * - |list_uno_r3| 
     - |list_rgb_led| 
     - |list_220ohm| 
     - |list_wire| 
   * - 1 * C√¢ble USB
     - 1 * Breadboard
     - 1 * Multim√®tre
     - 
   * - |list_usb_cable| 
     - |list_breadboard| 
     - |list_meter| 
     - 
     
**Instructions de construction √©tape par √©tape**

Suivez le sch√©ma de c√¢blage ou ces √©tapes pour construire le circuit.

.. image:: img/12_mix_color_bb_4.png
    :width: 500
    :align: center

1. Commencez avec une LED RGB.

Les LEDs RGB √©mettent de la lumi√®re en diff√©rentes couleurs en int√©grant des LEDs rouge, verte et bleue dans un seul bo√Ætier. En variant la tension appliqu√©e aux trois broches, ces LEDs peuvent produire jusqu'√† 16 777 216 couleurs diff√©rentes.

.. image:: img/12_mix_color_rgb.png
    :width: 400
    :align: center

Selon leur conception, les LEDs RGB peuvent √™tre √† anode commune ou cathode commune. Pour ce projet, nous utilisons une LED RGB **√† cathode commune**, o√π les trois LEDs partagent une connexion n√©gative.

* Les LEDs RGB √† cathode commune ont une connexion n√©gative partag√©e.
* Les LEDs RGB √† anode commune ont une connexion positive partag√©e.

.. image:: img/12_rgb_cc_ca.jpg
    :width: 600
    :align: center

Une LED RGB comporte g√©n√©ralement 4 broches ; la plus longue est la masse (GND). En pla√ßant la LED RGB, assurez-vous que la plus longue broche est la deuxi√®me en partant de la gauche, en configurant les broches comme suit : Rouge, GND, Vert et Bleu de gauche √† droite.

.. image:: img/12_mix_color_rgb_1.jpg
    :width: 200
    :align: center

Vous pouvez √©galement utiliser un multim√®tre en mode test de diode pour identifier la couleur √©mise par chaque broche.

R√©glez le multim√®tre sur le mode **Continuit√©** pour mesurer la r√©sistance.

.. image:: img/multimeter_diode_measure.png
    :width: 300
    :align: center

Touchez la broche la plus longue de la LED RGB avec le fil noir du multim√®tre, puis touchez les autres broches individuellement avec le fil rouge. Vous verrez la LED RGB s'allumer en rouge, vert ou bleu en cons√©quence.

.. image:: img/12_mix_color_measure_pin.png
    :width: 500
    :align: center

2. Ins√©rez la LED RGB dans la breadboard, avec la broche la plus longue dans le trou 17D, et les trois autres broches dans les trous 18C, 16C et 15C respectivement.

.. image:: img/12_mix_color_bb_1.png
    :width: 500
    :align: center

3. Ins√©rez trois r√©sistances de 220Œ© comme indiqu√©, entre les trous 15E et 15G, 16E et 16G, et 18E et 18G.

.. image:: img/12_mix_color_bb_2.png
    :width: 500
    :align: center

4. Connectez ces r√©sistances aux broches 9, 10 et 11 de l'Arduino Uno R3 √† l'aide de fils de connexion comme illustr√©.

.. image:: img/12_mix_color_bb_3.png
    :width: 500
    :align: center

5. Connectez la broche la plus longue de la LED RGB √† la masse (GND) √† l'aide d'un fil de connexion.

.. image:: img/12_mix_color_bb_4.png
    :width: 500
    :align: center

Cr√©ation du Code - Allumer une LED RGB
-------------------------------------------

1. Ouvrez l'IDE Arduino et d√©marrez un nouveau projet en s√©lectionnant ¬´ Nouveau Sketch ¬ª dans le menu ¬´ Fichier ¬ª.
2. Sauvegardez votre sketch sous le nom de ``Lesson12_Rainbow_Color`` en utilisant ``Ctrl + S`` ou en cliquant sur ¬´ Enregistrer ¬ª.

3. La LED dans votre circuit est connect√©e aux broches num√©riques de l'Arduino Uno R3. Comme la LED est un dispositif de sortie, vous devrez configurer les broches num√©riques 9, 10 et 11 comme ``OUTPUT``.

.. code-block:: Arduino
    :emphasize-lines: 3-5


    void setup() {
        // Code √† ex√©cuter une seule fois :
        pinMode(9, OUTPUT);   // Configurer la broche bleue de la LED RGB en sortie
        pinMode(10, OUTPUT);  // Configurer la broche verte de la LED RGB en sortie
        pinMode(11, OUTPUT);  // Configurer la broche rouge de la LED RGB en sortie
    }

    void loop() {
        // Code √† ex√©cuter en boucle :
    }

4. Maintenant, dans la fonction ``void loop()``, r√©glez la broche rouge de la LED RGB sur ``HIGH``, et les deux autres broches sur ``LOW``.

.. note::

    √âtant donn√© que nous utilisons les broches PWM 9, 10 et 11, vous avez la possibilit√© d'utiliser soit ``digitalWrite()``, soit ``analogWrite()`` pour d√©finir un niveau haut ou bas.
    
    Pour cette le√ßon, comme nous d√©finissons simplement les broches sur haut ou bas, nous utiliserons ``digitalWrite()``.

.. code-block:: Arduino
    :emphasize-lines: 10-12

    void setup() {
        // Code √† ex√©cuter une seule fois :
        pinMode(9, OUTPUT);   // Configurer la broche bleue de la LED RGB en sortie
        pinMode(10, OUTPUT);  // Configurer la broche verte de la LED RGB en sortie
        pinMode(11, OUTPUT);  // Configurer la broche rouge de la LED RGB en sortie
    }

    void loop() {
        // Code √† ex√©cuter en boucle :
        digitalWrite(9, LOW);    // √âteindre la broche bleue de la LED RGB
        digitalWrite(10, LOW);   // √âteindre la broche verte de la LED RGB
        digitalWrite(11, HIGH);  // Allumer la broche rouge de la LED RGB
    }

5. Enregistrez le code et cliquez sur ¬´ T√©l√©verser ¬ª pour l'envoyer √† votre Arduino Uno R3. Observons ce qui se passe.

6. Vous verrez la LED RGB s'allumer en rouge. Mais si vous voulez √©galement allumer le vert et le bleu ? Comment devriez-vous modifier le code ?

Copiez maintenant les trois commandes ``digitalWrite()`` deux fois de plus. R√©glez la broche que vous souhaitez afficher sur ``HIGH`` et les autres sur ``LOW``. Chaque couleur doit briller pendant une seconde.

.. code-block:: Arduino
    :emphasize-lines: 14-21

    void setup() {
        // Code √† ex√©cuter une seule fois :
        pinMode(9, OUTPUT);   // Configurer la broche bleue de la LED RGB en sortie
        pinMode(10, OUTPUT);  // Configurer la broche verte de la LED RGB en sortie
        pinMode(11, OUTPUT);  // Configurer la broche rouge de la LED RGB en sortie
    }

    void loop() {
        // Code √† ex√©cuter en boucle :
        digitalWrite(9, LOW);    // √âteindre la broche bleue de la LED RGB
        digitalWrite(10, LOW);   // √âteindre la broche verte de la LED RGB
        digitalWrite(11, HIGH);  // Allumer la broche rouge de la LED RGB
        delay(1000);             // Attendre 1 seconde
        digitalWrite(9, LOW);    // √âteindre la broche bleue de la LED RGB
        digitalWrite(10, HIGH);  // Allumer la broche verte de la LED RGB
        digitalWrite(11, LOW);   // √âteindre la broche rouge de la LED RGB
        delay(1000);             // Attendre 1 seconde
        digitalWrite(9, HIGH);   // Allumer la broche bleue de la LED RGB
        digitalWrite(10, LOW);   // √âteindre la broche verte de la LED RGB
        digitalWrite(11, LOW);   // √âteindre la broche rouge de la LED RGB
        delay(1000);             // Attendre 1 seconde
    }

7. T√©l√©versez √† nouveau le code pour voir les effets. Vous verrez que la LED RGB passe en cycle entre le rouge, le vert et le bleu.

**Questions** :

1. Si vous voulez d'autres couleurs, que devriez-vous faire ? Consultez le sch√©ma ci-dessous et remplissez vos id√©es dans votre manuel.

.. image:: img/12_rgb_mix.png
    :width: 300
    :align: center

.. list-table::
   :widths: 20 20 20 20
   :header-rows: 1

   * - Couleur
     - Broche rouge
     - Broche verte
     - Broche bleue
   * - Rouge
     - *HIGH*
     - *LOW*
     - *LOW*
   * - Vert
     - *LOW*
     - *HIGH*
     - *LOW*
   * - Bleu
     - *LOW*
     - *LOW*
     - *HIGH*
   * - Jaune
     - 
     - 
     - 
   * - Rose
     - 
     - 
     - 
   * - Cyan
     - 
     - 
     - 
   * - Blanc
     - 
     - 
     - 

Cr√©ation du Code - Cr√©er des Fonctions
-------------------------------------------

Vous avez peut-√™tre remarqu√© que pour afficher diff√©rentes couleurs s√©quentiellement sur la LED RGB, vous finissez par √©crire de nombreuses lignes de code similaires. Par exemple, pour montrer sept couleurs diff√©rentes sur la LED RGB, vous √©cririez quelque chose comme ceci :

.. code-block:: Arduino

    void setup() {
        // Code √† ex√©cuter une seule fois :
        pinMode(9, OUTPUT);   // Configurer la broche bleue de la LED RGB en sortie
        pinMode(10, OUTPUT);  // Configurer la broche verte de la LED RGB en sortie
        pinMode(11, OUTPUT);  // Configurer la broche rouge de la LED RGB en sortie
    }

    void loop() {
        // Code √† ex√©cuter en boucle :
        digitalWrite(9, LOW);    // √âteindre la broche bleue de la LED RGB
        digitalWrite(10, LOW);   // √âteindre la broche verte de la LED RGB
        digitalWrite(11, HIGH);  // Allumer la broche rouge de la LED RGB
        delay(1000);             // Attendre 1 seconde
        digitalWrite(9, LOW);    // √âteindre la broche bleue de la LED RGB
        digitalWrite(10, HIGH);  // Allumer la broche verte de la LED RGB
        digitalWrite(11, LOW);   // √âteindre la broche rouge de la LED RGB
        delay(1000);             // Attendre 1 seconde
        digitalWrite(9, HIGH);   // Allumer la broche bleue de la LED RGB
        digitalWrite(10, LOW);   // √âteindre la broche verte de la LED RGB
        digitalWrite(11, LOW);   // √âteindre la broche rouge de la LED RGB
        delay(1000);             // Attendre 1 seconde
        digitalWrite(9, LOW);   // √âteindre la broche bleue de la LED RGB
        digitalWrite(10, HIGH);   // Allumer la broche verte de la LED RGB
        digitalWrite(11, HIGH);   // Allumer la broche rouge de la LED RGB
        delay(1000);             // Attendre 1 seconde
        digitalWrite(9, HIGH);   // Allumer la broche bleue de la LED RGB
        digitalWrite(10, LOW);   // √âteindre la broche verte de la LED RGB
        digitalWrite(11, HIGH);   // Allumer la broche rouge de la LED RGB
        delay(1000);             // Attendre 1 seconde
        digitalWrite(9, HIGH);   // Allumer la broche bleue de la LED RGB
        digitalWrite(10, HIGH);   // Allumer la broche verte de la LED RGB
        digitalWrite(11, LOW);   // √âteindre la broche rouge de la LED RGB
        delay(1000);             // Attendre 1 seconde
        digitalWrite(9, HIGH);   // Allumer la broche bleue de la LED RGB
        digitalWrite(10, HIGH);   // Allumer la broche verte de la LED RGB
        digitalWrite(11, HIGH);   // Allumer la broche rouge de la LED RGB
        delay(1000);             // Attendre 1 seconde
    }

Vous avez peut-√™tre remarqu√© que votre fonction ``void loop()`` est devenue assez longue et que la logique est difficile √† suivre. C'est donc le moment id√©al pour introduire le concept de fonctions.

Tout au long de votre parcours de programmation, vous avez d√©j√† utilis√© des fonctions int√©gr√©es √† Arduino comme ``pinMode()``, ``digitalWrite()``, et ``delay()``. Maintenant, nous allons plonger dans la cr√©ation de fonctions personnalis√©es. Les fonctions personnalis√©es permettent de simplifier votre code, le rendant plus logique et plus facile √† g√©rer.

Pour cr√©er une fonction, il suffit de l'ajouter √† la fin de votre sketch, apr√®s l'accolade de la fonction ``void loop()``. Comme ``void setup()`` et ``void loop()``, les fonctions commencent par ``void`` suivi d'un nom que vous choisissez. Les r√®gles de nommage pour les fonctions sont similaires √† celles pour les variables ou les constantes. Vous pouvez nommer une fonction comme vous le souhaitez, tant que ce n'est pas un mot-cl√© de l'IDE Arduino, et vous encadrez ses instructions entre accolades.

.. code-block:: Arduino
    :emphasize-lines: 9-11

    void setup() {
        ...
    }

    void loop() {
        ...
    }

    void lightRed(){
    
    }

1. √Ä la fin de votre sketch, juste apr√®s l'accolade de la fonction ``void loop()``, nous allons ajouter sept nouvelles fonctions. Chaque fonction contiendra le code pour afficher une couleur sp√©cifique sur la LED RGB.

.. code-block:: Arduino
    :emphasize-lines: 10-22

    void loop() {
        // placez ici le code qui doit s'ex√©cuter en boucle :
        digitalWrite(9, LOW);    // √âteindre la broche bleue de la LED RGB
        digitalWrite(10, LOW);   // √âteindre la broche verte de la LED RGB
        digitalWrite(11, HIGH);  // Allumer la broche rouge de la LED RGB
        delay(1000);             // Attendre 1 seconde
        ...
    }

    void lightRed(){
    
    }

    void lightGreen(){
    
    }

    ...

    void lightWhite(){
    
    }

2. Ensuite, d√©coupez les extraits de code sp√©cifiques aux couleurs de la fonction ``void loop()`` et collez-les dans leurs fonctions respectives. Il ne restera plus que sept appels √† ``delay()`` dans la fonction ``loop()``.

.. code-block:: Arduino

    ...

    void loop() {
        // placez ici le code qui doit s'ex√©cuter en boucle :

        delay(1000);  // Attendre 1 seconde
        delay(1000);  // Attendre 1 seconde
        delay(1000);  // Attendre 1 seconde
        delay(1000);  // Attendre 1 seconde
        delay(1000);  // Attendre 1 seconde
        delay(1000);  // Attendre 1 seconde
        delay(1000);  // Attendre 1 seconde
    }

    void lightRed() {
        digitalWrite(9, LOW);    // √âteindre la broche bleue de la LED RGB
        digitalWrite(10, LOW);   // √âteindre la broche verte de la LED RGB
        digitalWrite(11, HIGH);  // Allumer la broche rouge de la LED RGB
    }
    ...

    void lightWhite() {
        digitalWrite(9, HIGH);   // Allumer la broche bleue de la LED RGB
        digitalWrite(10, HIGH);  // Allumer la broche verte de la LED RGB
        digitalWrite(11, HIGH);  // Allumer la broche rouge de la LED RGB
    }

3. Maintenant que les fonctions sont configur√©es, il est temps de les appeler dans la fonction ``void loop()``. Pour appeler une fonction, √©crivez simplement son nom suivi de deux parenth√®ses et terminez la ligne par un point-virgule.

.. code-block:: Arduino
    :emphasize-lines: 7-22

    void setup() {
        // placez ici le code qui doit s'ex√©cuter une seule fois :
        pinMode(9, OUTPUT);   // Configurer la broche bleue de la LED RGB en sortie
        pinMode(10, OUTPUT);  // Configurer la broche verte de la LED RGB en sortie
        pinMode(11, OUTPUT);  // Configurer la broche rouge de la LED RGB en sortie
    }

    void loop() {
        // placez ici le code qui doit s'ex√©cuter en boucle :
        lightRed();
        delay(1000);  // Attendre 1 seconde
        lightGreen();
        delay(1000);  // Attendre 1 seconde
        lightBlue();
        delay(1000);  // Attendre 1 seconde
        lightYellow();
        delay(1000);  // Attendre 1 seconde
        lightPink();
        delay(1000);  // Attendre 1 seconde
        lightCyan();
        delay(1000);  // Attendre 1 seconde
        lightWhite();
        delay(1000);  // Attendre 1 seconde
    }

    void lightRed() {
        digitalWrite(9, LOW);    // √âteindre la broche bleue de la LED RGB
        digitalWrite(10, LOW);   // √âteindre la broche verte de la LED RGB
        digitalWrite(11, HIGH);  // Allumer la broche rouge de la LED RGB
    }

    void lightGreen() {
        digitalWrite(9, LOW);    // √âteindre la broche bleue de la LED RGB
        digitalWrite(10, HIGH);  // Allumer la broche verte de la LED RGB
        digitalWrite(11, LOW);   // √âteindre la broche rouge de la LED RGB
    }
    void lightBlue() {
        digitalWrite(9, HIGH);  // Allumer la broche bleue de la LED RGB
        digitalWrite(10, LOW);  // √âteindre la broche verte de la LED RGB
        digitalWrite(11, LOW);  // √âteindre la broche rouge de la LED RGB
    }
    void lightYellow() {
        digitalWrite(9, LOW);    // √âteindre la broche bleue de la LED RGB
        digitalWrite(10, HIGH);  // Allumer la broche verte de la LED RGB
        digitalWrite(11, HIGH);  // Allumer la broche rouge de la LED RGB
    }
    void lightPink() {
        digitalWrite(9, HIGH);   // Allumer la broche bleue de la LED RGB
        digitalWrite(10, LOW);   // √âteindre la broche verte de la LED RGB
        digitalWrite(11, HIGH);  // Allumer la broche rouge de la LED RGB
    }
    void lightCyan() {
        digitalWrite(9, HIGH);   // Allumer la broche bleue de la LED RGB
        digitalWrite(10, HIGH);  // Allumer la broche verte de la LED RGB
        digitalWrite(11, LOW);   // √âteindre la broche rouge de la LED RGB
    }
    void lightWhite() {
        digitalWrite(9, HIGH);   // Allumer la broche bleue de la LED RGB
        digitalWrite(10, HIGH);  // Allumer la broche verte de la LED RGB
        digitalWrite(11, HIGH);  // Allumer la broche rouge de la LED RGB
    }

4. Avec toutes les fonctions configur√©es et appel√©es dans la boucle, votre code est maintenant complet. Cliquez sur le bouton "T√©l√©verser" pour transf√©rer votre code sur l'Arduino Uno R3. Vous verrez la LED RGB passer en cycle entre rouge, vert, bleu, jaune, rose, cyan et blanc.

.. note::

    La luminosit√© de la LED RGB peut √™tre assez intense, donc √©vitez de la regarder directement pendant de longues p√©riodes pour √©viter toute fatigue oculaire.

    Vous pourriez √©galement envisager de diffuser la lumi√®re avec un mouchoir ou un mat√©riau d√©poli pour adoucir l'intensit√© lumineuse.

**R√©sum√©**

√Ä travers une s√©rie d'exercices de codage, vous √©crirez des sketches qui changent dynamiquement la couleur de la LED. En commen√ßant par des commandes basiques pour contr√¥ler chaque couleur, vous allez ensuite restructurer votre code en utilisant des fonctions, rendant votre configuration plus modulaire et facile √† maintenir. Cette approche non seulement clarifie le code, mais vous enseigne aussi l'importance des fonctions en programmation.


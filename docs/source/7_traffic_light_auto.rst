.. note::

    ¬°Hola! Bienvenido a la comunidad de entusiastas de SunFounder Raspberry Pi, Arduino y ESP32 en Facebook. √önete para profundizar en Raspberry Pi, Arduino y ESP32 junto con otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte experto**: Soluciona problemas postventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Avances exclusivos**: Obt√©n acceso anticipado a anuncios de nuevos productos y adelantos exclusivos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones festivas y sorteos**: Participa en sorteos y promociones de temporada.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo.


7. ¬°Hagamos un Sem√°foro!
==============================

.. .. image:: img/5_traffic_light_pic.png
..     :width: 400
..     :align: center

¬°Bienvenido a esta lecci√≥n! En esta interesante sesi√≥n, conectaremos conceptos te√≥ricos con la aplicaci√≥n pr√°ctica en electr√≥nica y programaci√≥n. Aprenderemos a convertir pseudoc√≥digo‚Äîuna forma simplificada de lenguaje de programaci√≥n‚Äîen sketches funcionales para Arduino. Este ejercicio simular√° el funcionamiento de un sem√°foro, ofreci√©ndote experiencia pr√°ctica en programaci√≥n y dise√±o de circuitos. Al aprender a interpretar e implementar pseudoc√≥digo, adquirir√°s una comprensi√≥n m√°s profunda de la l√≥gica detr√°s del control de dispositivos electr√≥nicos mediante c√≥digo.

.. raw:: html

    <video muted controls style = "max-width:90%">
        <source src="_static/video/7_traffic_light.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

En esta lecci√≥n aprender√°s a:

* Escribir e interpretar pseudoc√≥digo para planificar la funcionalidad de circuitos electr√≥nicos.
* Convertir pseudoc√≥digo en sketches de Arduino para controlar la simulaci√≥n de sem√°foros.
* Construir y programar un sistema de sem√°foros usando LEDs y una placa Arduino.

Al dominar estas habilidades, estar√°s equipado para dise√±ar, programar y resolver problemas en sistemas electr√≥nicos b√°sicos, allanando el camino hacia proyectos m√°s complejos.

Preparando el Sem√°foro
------------------------------------------

¬°Hola! ¬øListo para crear tu propio sem√°foro con un Arduino? Aqu√≠ tienes lo que necesitamos:

**Componentes necesarios**

.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * LED rojo
     - 1 * LED amarillo
     - 1 * LED verde
   * - |list_uno_r3| 
     - |list_red_led| 
     - |list_yellow_led| 
     - |list_green_led| 
   * - 1 * Cable USB
     - 1 * Protoboard
     - 3 * Resistencias de 220Œ©
     - Cables de conexi√≥n
   * - |list_usb_cable| 
     - |list_breadboard| 
     - |list_220ohm| 
     - |list_wire| 


**Paso a paso**

¬°Vamos a armarlo todo, como si fuera un set de LEGO!

.. image:: img/7_traffic_light.png
    :width: 600
    :align: center

1. Conecta una resistencia de 220Œ© al protoboard. Un extremo debe ir al terminal negativo, y el otro en el orificio 1B.

.. image:: img/7_traffic_light_resistor.png
    :width: 600
    :align: center

2. A√±ade un LED verde al protoboard. El √°nodo del LED (pata larga) debe ir en el orificio 1F. El c√°todo (pata corta) debe ir en el orificio 1E.

.. image:: img/7_traffic_light_green.png
    :width: 600
    :align: center

3. Conecta el LED verde al pin 3 del Arduino Uno R3 con un cable. Inserta un cable en el orificio 1J y conecta el otro extremo en el pin 3 del Arduino Uno R3.

.. image:: img/7_traffic_light_pin3.png
    :width: 600
    :align: center

4. Toma otra resistencia de 220Œ©, conecta un extremo al terminal negativo y el otro extremo al orificio 6B.

.. image:: img/7_traffic_light_yellow_resistor.png
    :width: 600
    :align: center

5. Toma un LED amarillo. El √°nodo del LED (pata larga) debe ir en el orificio 6F. El c√°todo (pata corta) debe ir en el orificio 6E.

.. image:: img/7_traffic_light_yellow.png
    :width: 600
    :align: center

6. Conecta el LED amarillo al pin 4 del Arduino Uno R3.

.. image:: img/7_traffic_light_pin4.png
    :width: 600
    :align: center

7. Conecta el LED rojo de la misma manera; el LED rojo se conecta al pin 5 del Arduino Uno R3.

.. image:: img/7_traffic_light_red.png
    :width: 600
    :align: center

8. ¬°Oops! Casi olvidamos conectar a tierra el circuito. Conecta el lado negativo del protoboard a un pin GND del Arduino Uno R3 con un cable negro. ¬°Ahora est√° todo listo!

.. image:: img/7_traffic_light.png
    :width: 600
    :align: center

.. note::

    Hay tres pines GND en el Arduino Uno R3. Puedes usar cualquiera de ellos; todos funcionan de la misma manera.

¬°Y as√≠ de simple tienes un sem√°foro completo! Cada luz de color es controlada por su propio interruptor en el R3, lista para indicar a los autos cu√°ndo detenerse, esperar o avanzar. ¬øNo es incre√≠ble construir algo que funciona como un sem√°foro real? ¬°Buen trabajo!

Escribiendo Pseudoc√≥digo para un Sem√°foro
----------------------------------------------

Es hora de darle un prop√≥sito a tus LEDs. En esta actividad, los programar√°s para que funcionen como un sem√°foro, controlando el flujo de tr√°fico en una intersecci√≥n concurrida.

Los sem√°foros requieren un control preciso para cambiar entre los tres colores en una secuencia estricta, lo que lo convierte en un proyecto ideal para adentrarse en la programaci√≥n de Arduino. Para perfeccionar nuestro sem√°foro, debemos dar instrucciones claras al Arduino sobre sus tareas.

La comunicaci√≥n entre humanos implica escuchar, hablar, leer, escribir, gesticular o hacer expresiones faciales. La comunicaci√≥n con microcontroladores (como el que est√° en tu placa Arduino) implica escribir c√≥digo.

No podemos simplemente decirle al Arduino que "haga un sem√°foro" en lenguaje natural. Sin embargo, podemos usar lenguaje natural para escribir un "pseudoc√≥digo" que nos ayude a desarrollar el c√≥digo real para Arduino.

.. note::
    
    No hay respuestas correctas o incorrectas al escribir pseudoc√≥digo. Cuanto m√°s detallado sea tu pseudoc√≥digo, m√°s f√°cil ser√° traducirlo en un programa funcional.

Piensa en lo que debe suceder para que tu circuito funcione como un sem√°foro. En el espacio proporcionado en tu registro, escribe el pseudoc√≥digo que describa c√≥mo funcionar√° tu sem√°foro. Usa lenguaje sencillo.

Aqu√≠ tienes algunas preguntas orientadoras para tu pseudoc√≥digo:

* ¬øDeben estar encendidas dos o m√°s luces al mismo tiempo?
* ¬øCu√°l es el orden de las luces?
* ¬øQu√© pasa con las otras luces cuando una est√° encendida?
* ¬øQu√© sucede despu√©s de que la tercera luz se apaga?
* ¬øCu√°nto tiempo debe permanecer encendida cada luz?

Aqu√≠ tienes un par de ejemplos de pseudoc√≥digo:

.. code-block::

    1) Set all LED pins to output.
    2) Start main loop.
    a) Turn off all lights.
    b) Turn on green light for 10 seconds.
    c) Turn off all lights.
    d) Turn on yellow light for 3 seconds.
    e) Turn off all lights.
    f) Turn on red light for 10 seconds.
    3) Return to the start of the loop.

.. code-block::

    Setup:
        Define all LED pins as output
    Main Loop:
        Turn on green light
        Turn off red and yellow lights
        Wait 10 seconds
        Turn on yellow light
        Turn off red and green lights
        Wait 3 seconds
        Turn on red light
        Turn off green and yellow lights
        Wait 10 seconds

El pseudoc√≥digo no tiene un formato estricto, lo que te permite aclarar tus pensamientos y organizarlos de manera l√≥gica. Este orden l√≥gico se llama algoritmo.
Usas algoritmos todos los d√≠as, quiz√°s sin darte cuenta. Piensa en un algoritmo como una receta; en programaci√≥n, los ingredientes son las palabras clave y los comandos, y los pasos de cocci√≥n son el algoritmo.
Un algoritmo es un conjunto de pasos o instrucciones. Cuando un algoritmo se traduce de pseudoc√≥digo a lenguaje de programaci√≥n de Arduino, le indica a la placa Arduino exactamente qu√© hacer y cu√°ndo.

.. note::
    
    Usar notas adhesivas o tarjetas puede ser √∫til al escribir pseudoc√≥digo. Coloca cada paso de tu algoritmo en una nota separada. De esta manera, puedes reorganizar, insertar o eliminar pasos f√°cilmente.


Transforma el Pseudoc√≥digo en un Sketch para Arduino
--------------------------------------------------------

Es hora de refinar el c√≥digo que has escrito y agregar los comandos ``digitalWrite()`` y ``delay()`` adicionales seg√∫n sea necesario. Aqu√≠ tienes una gu√≠a para estructurar tu c√≥digo: tu funci√≥n ``void loop()`` debe encapsular segmentos separados para los LEDs verde, amarillo y rojo, cada uno seguido por un per√≠odo de retraso √∫nico. No todos los retrasos deben ser de la misma duraci√≥n. Actualiza los comentarios de tu c√≥digo para que quede claro lo que logra cada l√≠nea.

1. Abre el sketch que guardaste antes, ``Lesson6_Blink_LED``. Haz clic en "Guardar como..." en el men√∫ "Archivo" y ren√≥mbralo a ``Lesson7_Traffic_Light``. Haz clic en "Guardar".

2. Ahora, seg√∫n nuestro pseudoc√≥digo, configura los tres pines como salida en el ``void setup()``. Copia el comando ``pinMode()`` dos veces, p√©galo a continuaci√≥n y ajusta los n√∫meros de los pines para cada uno.

    .. code-block:: Arduino
        :emphasize-lines: 4,5

        void setup() {
            // C√≥digo de configuraci√≥n que se ejecuta una vez:
            pinMode(3, OUTPUT); // configurar el pin 3 como salida
            pinMode(4, OUTPUT); // configurar el pin 4 como salida
            pinMode(5, OUTPUT); // configurar el pin 5 como salida
        }

3. En ``void loop()``, primero enciende el LED verde y apaga los otros dos LEDs. As√≠ que, copia los comandos ``digitalWrite()`` dos veces, modifica los n√∫meros de los pines a 4 y 5, cambia ``HIGH`` a ``LOW`` para los LEDs que quieras apagar y actualiza los comentarios para que se ajusten al escenario actual. El c√≥digo modificado es el siguiente:

    .. code-block:: Arduino
        :emphasize-lines: 4,5

        void loop() {
            // El c√≥digo principal que se ejecuta repetidamente:
            digitalWrite(3, HIGH);  // Encender el LED en el pin 3
            digitalWrite(4, LOW);   // Apagar el LED en el pin 4
            digitalWrite(5, LOW);   // Apagar el LED en el pin 5
            delay(3000);           // Esperar 3 segundos
        }
4. Quiz√°s quieras que el LED verde permanezca encendido por m√°s tiempo. En nuestro sistema de tr√°fico real, podr√≠a estar encendido alrededor de un minuto, pero aqu√≠ lo simularemos con 10 segundos.

    .. code-block:: Arduino
        :emphasize-lines: 6

        void loop() {
            // El c√≥digo principal que se ejecuta repetidamente:
            digitalWrite(3, HIGH);  // Encender el LED en el pin 3
            digitalWrite(4, LOW);   // Apagar el LED en el pin 4
            digitalWrite(5, LOW);   // Apagar el LED en el pin 5
            delay(10000);           // Esperar 10 segundos
        }

5. Ahora deja que el LED amarillo se encienda y apaga los otros dos LEDs. Nuevamente, copia y pega las 4 l√≠neas de ``void loop()``, configurando el pin 4 en HIGH y los dem√°s en LOW. Cambia el retraso para el LED amarillo a 3 segundos.

    .. code-block:: Arduino
        :emphasize-lines: 7-10

        void loop() {
            // El c√≥digo principal que se ejecuta repetidamente:
            digitalWrite(3, HIGH);  // Encender el LED en el pin 3
            digitalWrite(4, LOW);   // Apagar el LED en el pin 4
            digitalWrite(5, LOW);   // Apagar el LED en el pin 5
            delay(10000);           // Esperar 10 segundos
            digitalWrite(3, LOW);   // Apagar el LED en el pin 3
            digitalWrite(4, HIGH);  // Encender el LED en el pin 4
            digitalWrite(5, LOW);   // Apagar el LED en el pin 5
            delay(3000);            // Esperar 3 segundos
        }

6. Finalmente, deja que el LED rojo se encienda por 10 segundos, apagando los otros dos LEDs. El c√≥digo completo es el siguiente:

    .. code-block:: Arduino

        void setup() {
            // C√≥digo de configuraci√≥n que se ejecuta una vez:
            pinMode(3, OUTPUT); // configurar el pin 3 como salida
            pinMode(4, OUTPUT); // configurar el pin 4 como salida
            pinMode(5, OUTPUT); // configurar el pin 5 como salida
        }
        
        void loop() {
            // El c√≥digo principal que se ejecuta repetidamente:
            digitalWrite(3, HIGH);  // Encender el LED en el pin 3
            digitalWrite(4, LOW);   // Apagar el LED en el pin 4
            digitalWrite(5, LOW);   // Apagar el LED en el pin 5
            delay(10000);           // Esperar 10 segundos
            digitalWrite(3, LOW);   // Apagar el LED en el pin 3
            digitalWrite(4, HIGH);  // Encender el LED en el pin 4
            digitalWrite(5, LOW);   // Apagar el LED en el pin 5
            delay(3000);            // Esperar 3 segundos
            digitalWrite(3, LOW);   // Apagar el LED en el pin 3
            digitalWrite(4, LOW);   // Apagar el LED en el pin 4
            digitalWrite(5, HIGH);  // Encender el LED en el pin 5
            delay(10000);           // Esperar 10 segundos
        }

**Pregunta**

Observa los cruces de calles cerca de tu casa. ¬øCu√°ntos sem√°foros suele haber? ¬øC√≥mo se coordinan entre ellos?

**Resumen**

¬°Felicitaciones por completar la Lecci√≥n 7! Has logrado traducir pseudoc√≥digo en un sistema de sem√°foro funcional controlado por Arduino. Aqu√≠ tienes un breve resumen de lo que lograste:

* Dominio del Pseudoc√≥digo: Aprendiste a usar pseudoc√≥digo para planificar el funcionamiento de sistemas electr√≥nicos, mejorando tus habilidades de pensamiento l√≥gico y planificaci√≥n.
* Del Pseudoc√≥digo al C√≥digo Real: Experimentaste c√≥mo un enfoque estructurado en pseudoc√≥digo conduce a una programaci√≥n efectiva y precisa en Arduino.
* Aplicaci√≥n Pr√°ctica: Al ensamblar y programar un sistema de sem√°foro, demostraste una aplicaci√≥n pr√°ctica de tus conocimientos, mostrando c√≥mo el software controla directamente el hardware.

Esta lecci√≥n ha mejorado tanto tus habilidades t√©cnicas como tu capacidad de an√°lisis, prepar√°ndote para proyectos m√°s complejos en electr√≥nica y programaci√≥n. ¬°Sigue construyendo sobre estas habilidades para desbloquear nuevas posibilidades en la integraci√≥n tecnol√≥gica!

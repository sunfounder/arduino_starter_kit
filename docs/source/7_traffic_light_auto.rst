.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder des passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profond√©ment dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez et partagez** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et √† des promotions sp√©ciales.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !


7. Construisons un feu de signalisation !
============================================


.. .. image:: img/5_traffic_light_pic.png
..     :width: 400
..     :align: center

Bienvenue dans cette le√ßon captivante qui fait le lien entre les concepts th√©oriques et leur application pratique en √©lectronique et en programmation. Nous allons explorer le processus de conversion d'un pseudo-code ‚Äî une forme simplifi√©e de langage de programmation ‚Äî en sketchs Arduino fonctionnels. Cet exercice simulera le fonctionnement des feux de signalisation, vous offrant une exp√©rience pratique en programmation et en conception de circuits. En apprenant √† interpr√©ter et √† impl√©menter un pseudo-code, vous approfondirez vos connaissances de la logique qui r√©git le contr√¥le des dispositifs √©lectroniques par du code.

.. raw:: html

    <video muted controls style = "max-width:90%">
        <source src="_static/video/7_traffic_light.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

Dans cette le√ßon, vous apprendrez √† :

* √âcrire et interpr√©ter un pseudo-code pour planifier la fonctionnalit√© d'un circuit √©lectronique.
* Convertir un pseudo-code en sketchs Arduino pour contr√¥ler une simulation de feux de signalisation.
* Construire et programmer un syst√®me de feux de signalisation utilisant des LEDs et une carte Arduino.

En ma√Ætrisant ces comp√©tences, vous serez en mesure de concevoir, programmer et r√©soudre les probl√®mes de syst√®mes √©lectroniques de base, ouvrant la voie √† des projets plus complexes.

Pr√©paration du feu de signalisation
----------------------------------------
Pr√™t √† cr√©er votre propre feu de signalisation avec un Arduino ? Voici ce dont nous avons besoin :

**Composants n√©cessaires**

.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * LED rouge
     - 1 * LED jaune
     - 1 * LED verte
   * - |list_uno_r3| 
     - |list_red_led| 
     - |list_yellow_led| 
     - |list_green_led| 
   * - 1 * C√¢ble USB
     - 1 * Plaque d'essai
     - 3 * R√©sistance de 220Œ©
     - C√¢bles de connexion
   * - |list_usb_cable| 
     - |list_breadboard| 
     - |list_220ohm| 
     - |list_wire| 



**√âtapes de construction**

Mettons tout en place, comme si vous construisiez un ensemble LEGO !

.. image:: img/7_traffic_light.png
    :width: 600
    :align: center

1. Connectez une r√©sistance de 220Œ© √† la plaque d'essai. Une extr√©mit√© doit √™tre dans la borne n√©gative, et l'autre dans le trou 1B.

.. image:: img/7_traffic_light_resistor.png
    :width: 600
    :align: center

2. Ajoutez une LED verte √† la plaque d'essai. L'anode (longue patte) de la LED doit √™tre dans le trou 1F. La cathode (courte patte) doit √™tre dans le trou 1E.

.. image:: img/7_traffic_light_green.png
    :width: 600
    :align: center

3. Connectez la LED verte √† la broche 3 de l'Arduino Uno R3 √† l'aide d'un c√¢ble. Ins√©rez un c√¢ble de connexion dans le trou 1J et l'autre extr√©mit√© dans la broche 3 de l'Arduino Uno R3.

.. image:: img/7_traffic_light_pin3.png
    :width: 600
    :align: center

4. Prenez une autre r√©sistance de 220Œ©, connectez une extr√©mit√© √† la borne n√©gative et l'autre extr√©mit√© au trou 6B.

.. image:: img/7_traffic_light_yellow_resistor.png
    :width: 600
    :align: center

5. Prenez une LED jaune. L'anode (longue patte) de la LED doit √™tre dans le trou 6F. La cathode (courte patte) doit √™tre dans le trou 6E.

.. image:: img/7_traffic_light_yellow.png
    :width: 600
    :align: center

6. Connectez la LED jaune √† la broche 4 de l'Arduino Uno R3.

.. image:: img/7_traffic_light_pin4.png
    :width: 600
    :align: center

7. Connectez la LED rouge de la m√™me mani√®re, elle est reli√©e √† la broche 5 de l'Arduino Uno R3.

.. image:: img/7_traffic_light_red.png
    :width: 600
    :align: center

8. Oups ! Nous avons presque oubli√© de mettre le circuit √† la masse. Connectez le c√¥t√© n√©gatif de la plaque d'essai √† une broche GND de l'Arduino Uno R3 √† l'aide d'un fil noir. Maintenant, tout est pr√™t !

.. image:: img/7_traffic_light.png
    :width: 600
    :align: center

.. note::

    Il y a trois broches GND sur l'Arduino Uno R3. Vous pouvez utiliser n'importe laquelle d'entre elles ; elles fonctionnent toutes de la m√™me mani√®re.

Et voil√†, vous avez un syst√®me complet de feux de signalisation ! Chaque lumi√®re color√©e est contr√¥l√©e par son propre interrupteur sur l'Arduino R3, pr√™te √† indiquer aux voitures quand s'arr√™ter, attendre ou avancer. N'est-ce pas g√©nial de construire quelque chose qui fonctionne comme un vrai feu de signalisation ? Super travail !

√âcriture d'un pseudo-code pour un feu de signalisation
-----------------------------------------------------------

Il est temps de donner une utilit√© √† vos LEDs. Dans cette activit√©, vous allez les programmer pour qu'elles fonctionnent comme un feu de signalisation, r√©gulant le flux de trafic √† une intersection anim√©e.

Les feux de signalisation n√©cessitent un contr√¥le pr√©cis pour passer d'une couleur √† l'autre dans un ordre strict, ce qui en fait un projet id√©al pour plonger dans la programmation Arduino. Pour perfectionner notre feu de signalisation, nous devons donner des instructions claires √† l'Arduino.

La communication entre humains implique l'√©coute, la parole, la lecture, l'√©criture, les gestes ou les expressions faciales. Communiquer avec des microcontr√¥leurs (comme celui de votre carte Arduino) implique d'√©crire du code.

Nous ne pouvons pas simplement dire √† l'Arduino de "faire un feu de signalisation" en langage naturel. Cependant, nous pouvons utiliser un langage naturel pour √©crire un "pseudo-code" qui aidera au d√©veloppement du code Arduino r√©el.

.. note::
    
    Il n'existe pas de bonnes ou mauvaises r√©ponses dans l'√©criture de pseudo-code. Plus votre pseudo-code est d√©taill√©, plus il sera facile de le traduire en programme fonctionnel.


R√©fl√©chissez √† ce qui doit se passer pour que votre circuit fonctionne comme un feu de signalisation. Dans l'espace pr√©vu dans votre journal, √©crivez le pseudo-code d√©crivant le fonctionnement de votre feu. Utilisez un langage simple.

Voici quelques questions pour guider votre pseudo-code :

* Deux lumi√®res ou plus doivent-elles √™tre allum√©es en m√™me temps ?
* Quel est l'ordre des lumi√®res ?
* Que se passe-t-il pour les autres lumi√®res lorsqu'une est allum√©e ?
* Que se passe-t-il apr√®s l'extinction de la troisi√®me lumi√®re ?
* Combien de temps chaque lumi√®re doit-elle rester allum√©e ?

Voici quelques exemples de pseudo-code :

.. code-block::

    1) D√©finir toutes les broches des LEDs en sortie.
    2) D√©marrer la boucle principale.
    a) √âteindre toutes les lumi√®res.
    b) Allumer la lumi√®re verte pendant 10 secondes.
    c) √âteindre toutes les lumi√®res.
    d) Allumer la lumi√®re jaune pendant 3 secondes.
    e) √âteindre toutes les lumi√®res.
    f) Allumer la lumi√®re rouge pendant 10 secondes.
    3) Revenir au d√©but de la boucle.

.. code-block::

    Configuration :
        D√©finir toutes les broches des LEDs en sortie
    Boucle principale :
        Allumer la lumi√®re verte
        √âteindre les lumi√®res rouge et jaune
        Attendre 10 secondes
        Allumer la lumi√®re jaune
        √âteindre les lumi√®res rouge et verte
        Attendre 3 secondes
        Allumer la lumi√®re rouge
        √âteindre les lumi√®res verte et jaune
        Attendre 10 secondes

Le pseudo-code n'a pas de format strict, ce qui vous permet de clarifier vos id√©es et de les organiser logiquement. Cet ordre logique est appel√© algorithme. Vous utilisez des algorithmes chaque jour, peut-√™tre sans vous en rendre compte. Pensez √† un algorithme comme √† une recette ; en programmation, les ingr√©dients sont les mots-cl√©s et les commandes, et les √©tapes de pr√©paration sont l'algorithme.
Un algorithme est un ensemble d'√©tapes ou d'instructions. Lorsqu'un algorithme est traduit du pseudo-code en langage de programmation Arduino, il donne des instructions pr√©cises √† la carte Arduino sur ce qu'il faut faire et quand le faire.

.. note::
    
    Utiliser des notes autocollantes ou des fiches peut √™tre utile lors de l'√©criture de pseudo-code. Placez chaque √©tape de votre algorithme sur une note distincte. Ainsi, vous pouvez facilement r√©organiser, ins√©rer ou supprimer des √©tapes dans votre algorithme.


Transformer le pseudo-code en un sketch Arduino
----------------------------------------------------

Il est temps d'affiner le code que vous avez √©crit et d'ajouter des commandes suppl√©mentaires ``digitalWrite()`` et ``delay()`` si n√©cessaire. Voici un guide pour structurer votre code : votre fonction ``void loop()`` doit encapsuler des segments distincts pour les LEDs verte, jaune et rouge, chacun suivi d'une p√©riode de d√©lai unique. Tous les d√©lais n'ont pas besoin d'√™tre de la m√™me dur√©e. Mettez √† jour les commentaires de votre code pour clarifier ce que chaque ligne r√©alise.

1. Ouvrez le sketch que vous avez sauvegard√© pr√©c√©demment, ``Lesson6_Blink_LED``. Cliquez sur ‚ÄúEnregistrer sous...‚Äù dans le menu ‚ÄúFichier‚Äù et renommez-le en ``Lesson7_Traffic_Light``. Cliquez sur "Enregistrer".

2. Maintenant, selon notre pseudo-code, d√©finissez toutes les trois broches en sortie dans le ``void setup()``. Copiez la commande ``pinMode()`` deux fois, collez-la en dessous et ajustez les num√©ros de broche pour chacune.

    .. code-block:: Arduino
        :emphasize-lines: 4,5

        void setup() {
            // Code de configuration ici, ex√©cut√© une seule fois :
            pinMode(3, OUTPUT);  // d√©finir la broche 3 comme sortie
            pinMode(4, OUTPUT);  // d√©finir la broche 4 comme sortie
            pinMode(5, OUTPUT);  // d√©finir la broche 5 comme sortie
        }

3. Dans ``void loop()``, allumez d'abord la LED verte et √©teignez les deux autres LEDs. Ainsi, copiez deux fois les commandes ``digitalWrite()`` et modifiez les num√©ros de broche en 4 et 5, changez ``HIGH`` en ``LOW`` pour les LEDs que vous souhaitez √©teindre, et mettez √† jour les commentaires pour correspondre au sc√©nario actuel. Le code modifi√© est le suivant :

    .. code-block:: Arduino
        :emphasize-lines: 4,5

        void loop() {
            // Code principal, ex√©cut√© en boucle :
            digitalWrite(3, HIGH);  // Allumer la LED sur la broche 3
            digitalWrite(4, LOW);   // √âteindre la LED sur la broche 4
            digitalWrite(5, LOW);   // √âteindre la LED sur la broche 5
            delay(3000);           // Attendre 3 secondes
        }

4. Vous pourriez vouloir que la LED verte reste allum√©e plus longtemps. Dans notre syst√®me de circulation, cela pourrait durer environ une minute, mais ici nous allons simuler cela avec 10 secondes.

    .. code-block:: Arduino
        :emphasize-lines: 6

        void loop() {
            // Code principal, ex√©cut√© en boucle :
            digitalWrite(3, HIGH);  // Allumer la LED sur la broche 3
            digitalWrite(4, LOW);   // √âteindre la LED sur la broche 4
            digitalWrite(5, LOW);   // √âteindre la LED sur la broche 5
            delay(10000);           // Attendre 10 secondes
        }

5. Allumez maintenant la LED jaune, et √©teignez les deux autres. Encore une fois, copiez et collez les 4 lignes de ``void loop()``, en r√©glant la broche 4 sur HIGH et les autres sur LOW. Changez le d√©lai pour la LED jaune √† 3 secondes.

    .. code-block:: Arduino
        :emphasize-lines: 7-10

        void loop() {
            // Code principal, ex√©cut√© en boucle :
            digitalWrite(3, HIGH);  // Allumer la LED sur la broche 3
            digitalWrite(4, LOW);   // √âteindre la LED sur la broche 4
            digitalWrite(5, LOW);   // √âteindre la LED sur la broche 5
            delay(10000);           // Attendre 10 secondes
            digitalWrite(3, LOW);   // √âteindre la LED sur la broche 3
            digitalWrite(4, HIGH);  // Allumer la LED sur la broche 4
            digitalWrite(5, LOW);   // √âteindre la LED sur la broche 5
            delay(3000);            // Attendre 3 secondes
        }

6. Enfin, allumez la LED rouge pendant 10 secondes, en √©teignant les deux autres LEDs. Voici votre code complet :

    .. code-block:: Arduino

        void setup() {
            // Code de configuration ici, ex√©cut√© une seule fois :
            pinMode(3, OUTPUT);  // d√©finir la broche 3 comme sortie
            pinMode(4, OUTPUT);  // d√©finir la broche 4 comme sortie
            pinMode(5, OUTPUT);  // d√©finir la broche 5 comme sortie
        }
        
        void loop() {
            // Code principal, ex√©cut√© en boucle :
            digitalWrite(3, HIGH);  // Allumer la LED sur la broche 3
            digitalWrite(4, LOW);   // √âteindre la LED sur la broche 4
            digitalWrite(5, LOW);   // √âteindre la LED sur la broche 5
            delay(10000);           // Attendre 10 secondes
            digitalWrite(3, LOW);   // √âteindre la LED sur la broche 3
            digitalWrite(4, HIGH);  // Allumer la LED sur la broche 4
            digitalWrite(5, LOW);   // √âteindre la LED sur la broche 5
            delay(3000);            // Attendre 3 secondes
            digitalWrite(3, LOW);   // √âteindre la LED sur la broche 3
            digitalWrite(4, LOW);   // √âteindre la LED sur la broche 4
            digitalWrite(5, HIGH);  // Allumer la LED sur la broche 5
            delay(10000);           // Attendre 10 secondes
        }

**Question**

Observez les intersections autour de chez vous. Combien de feux de signalisation y a-t-il en g√©n√©ral ? Comment se coordonnent-ils entre eux ?

**R√©sum√©**

F√©licitations pour avoir termin√© la le√ßon 7 ! Vous avez r√©ussi √† traduire un pseudo-code en un syst√®me de feux de signalisation contr√¥l√© par Arduino enti√®rement fonctionnel. Voici un bref r√©capitulatif de vos r√©alisations :

* Ma√Ætrise du pseudo-code : Vous avez appris √† utiliser le pseudo-code pour d√©finir le fonctionnement des syst√®mes √©lectroniques, am√©liorant ainsi vos comp√©tences en logique et en planification.
* Du pseudo-code au code r√©el : Vous avez exp√©riment√© comment une approche structur√©e en pseudo-code conduit √† une programmation Arduino efficace et pr√©cise.
* Application pratique : En assemblant et en programmant un syst√®me de feux de signalisation, vous avez d√©montr√© l'application pratique de vos connaissances, montrant comment le logiciel contr√¥le directement le mat√©riel.

Cette le√ßon a affin√© vos comp√©tences techniques et votre r√©flexion analytique, vous pr√©parant √† des projets plus complexes en √©lectronique et en programmation. Continuez √† d√©velopper ces comp√©tences pour d√©bloquer encore plus de possibilit√©s dans l'int√©gration des technologies !


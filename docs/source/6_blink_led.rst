
.. note::

    ¬°Hola! Bienvenidos a la comunidad de entusiastas de SunFounder Raspberry Pi & Arduino & ESP32 en Facebook. Sum√©rgete en el mundo de Raspberry Pi, Arduino y ESP32 con otros entusiastas.

    **¬øPor qu√© unirte?**

    - **Soporte experto**: Resuelve problemas postventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Vistas previas exclusivas**: Obt√©n acceso anticipado a anuncios de nuevos productos y adelantos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones festivas y sorteos**: Participa en sorteos y promociones especiales.

    üëâ ¬øListo para explorar y crear con nosotros? ¬°Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo!


6. Parpadeo del LED
======================
¬°Bienvenido a esta lecci√≥n! Aprender√°s a manipular los pines digitales del Arduino Uno R3 para controlar un LED program√°ticamente, encendi√©ndolo y apag√°ndolo sin intervenci√≥n manual, una habilidad fundamental tanto para aplicaciones dom√©sticas como industriales.

.. raw:: html

    <video muted controls style = "max-width:90%">
        <source src="_static/video/6_blink_led.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

En esta lecci√≥n, aprender√°s a:

* Crear y guardar sketches usando el IDE de Arduino.
* Usar las funciones ``pinMode()`` y ``digitalWrite()`` para controlar elementos del circuito.
* Cargar sketches en el Arduino Uno R3 y comprender sus efectos en tiempo real.
* Implementar ``delay()`` en los sketches para gestionar el comportamiento del circuito.

Al final de esta lecci√≥n, ser√°s capaz de construir un circuito que no solo encienda un LED, sino que tambi√©n lo haga parpadear en intervalos que establezcas, d√°ndote una comprensi√≥n b√°sica de c√≥mo el software interact√∫a con el hardware.

Construyendo el Circuito
--------------------------------

**Componentes necesarios**


.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * LED rojo
     - 1 * Resistor de 220Œ©
     - Cables de puente
   * - |list_uno_r3| 
     - |list_red_led| 
     - |list_220ohm| 
     - |list_wire| 
   * - 1 * Cable USB
     - 1 * Protoboard
     - 1 * Mult√≠metro
     -   
   * - |list_usb_cable| 
     - |list_breadboard| 
     - |list_meter|
     - 

**Pasos para armar**

Toma el circuito construido en :ref:`2_first_circuit`, y cambia el cable del pin 5V al pin 3, como se muestra en la imagen a continuaci√≥n.

.. image:: img/6_led_circuit.png
    :width: 600
    :align: center

Si desmontaste el circuito anterior, puedes reconstruirlo siguiendo estos pasos:

1. Conecta el resistor de 220 ohmios al protoboard. Un extremo debe estar en el terminal negativo y el otro en el agujero 1B.

.. image:: img/2_connect_resistor.png
    :width: 300
    :align: center

2. A√±ade un LED rojo al protoboard. El √°nodo del LED (la pata larga) debe estar en el agujero 1F. El c√°todo (la pata corta) debe estar en el agujero 1E. A veces es dif√≠cil distinguir el √°nodo del c√°todo por la longitud de las patas. Recuerda que el lado del c√°todo del LED tambi√©n tiene un borde plano en la lente de color, mientras que el √°nodo tiene un borde redondeado.

.. image:: img/2_connect_led.png
    :width: 300
    :align: center

3. Usa un cable de puente corto para conectar el LED a la fuente de alimentaci√≥n. Un extremo del cable debe estar en el agujero 1J y el otro en el terminal positivo.

.. image:: img/2_connect_wire.png
    :width: 300
    :align: center

4. Conecta el terminal positivo del protoboard al pin 3 del Arduino Uno R3.

.. image:: img/6_led_circuit_3.png
    :width: 600
    :align: center

5. Conecta el terminal negativo del protoboard a uno de los pines de tierra (GND) del Arduino Uno R3.

.. image:: img/6_led_circuit.png
    :width: 600
    :align: center


Dando Vida al LED
-----------------------------

¬°Es hora del espect√°culo para el LED! En lugar de sumergirnos directamente en el ejemplo "Blink" del Arduino, vamos a comenzar desde cero y crear un nuevo sketch. ¬°Vamos a ello!

**1. Crear y Guardar un Sketch**

1. Abre el IDE de Arduino. Ve al men√∫ ‚ÄúArchivo‚Äù y selecciona ‚ÄúNuevo Sketch‚Äù para empezar desde cero. Puedes cerrar otras ventanas de sketches que puedan estar abiertas.

    .. image:: img/6_blink_ide_new.png
        :align: center


2. Organiza la ventana del IDE de Arduino junto con este tutorial en l√≠nea para ver ambas al mismo tiempo. Puede que todo se vea un poco peque√±o, pero es mejor que alternar entre ventanas.

    .. image:: img/6_blink_ide_tutorials.png


3. Es momento de guardar tu sketch. Haz clic en ‚ÄúGuardar‚Äù en el men√∫ ‚ÄúArchivo‚Äù o presiona ``Ctrl + S``.

    .. image:: img/6_blink_ide_save.png


4. Puedes guardar tu sketch en la ubicaci√≥n predeterminada o en otro lugar. Nombra tu sketch con algo significativo, como ``Leccion6_Encender_LED`` y haz clic en ‚ÄúGuardar‚Äù.

    * Nombra tu sketch seg√∫n su funci√≥n para encontrarlo f√°cilmente m√°s tarde.
    * Los nombres de los sketches en Arduino no pueden tener espacios.
    * Al realizar cambios importantes, considera guardar como una nueva versi√≥n (por ejemplo, V1) para crear una copia de seguridad.
    
    .. image:: img/6_blink_ide_name.png


5. Tu nuevo sketch tiene dos partes principales, ``void setup()`` y ``void loop()``, que son funciones utilizadas en todos los sketches de Arduino.

    * ``void setup()`` se ejecuta una vez cuando comienza el programa y establece las condiciones iniciales.
    * ``void loop()`` se ejecuta repetidamente, ejecutando acciones continuas.
    * Coloca los comandos para cada funci√≥n dentro de sus llaves ``{}``.
    * Cualquier l√≠nea que comience con ``//`` es un comentario. Estos son para tus notas y no afectar√°n la ejecuci√≥n del c√≥digo.

    .. code-block:: Arduino

        void setup() {
        // C√≥digo de configuraci√≥n aqu√≠, para ejecutarse una vez:

        }

        void loop() {
        // C√≥digo principal aqu√≠, para ejecutarse repetidamente:

        }

**2. Selecci√≥n de Placa y Puerto**

1. Conecta tu Arduino Uno R3 a la computadora con un cable USB. Ver√°s que la luz de encendido del Arduino se enciende.

    .. image:: img/1_connect_uno_pc.jpg
        :width: 600
        :align: center


2. Indica al IDE que estamos usando un **Arduino Uno**. Ve a **Herramientas** -> **Placa** -> **Arduino AVR Boards** -> **Arduino Uno**.

    .. image:: img/6_blink_ide_board.png
        :width: 600
        :align: center



3. A continuaci√≥n, en el IDE de Arduino, selecciona el puerto al que est√° conectado tu Arduino.

    .. note::

        * Una vez que se selecciona un puerto, el IDE de Arduino deber√≠a recordarlo cada vez que el Arduino se conecte a trav√©s de USB.
        * Si se conecta una placa de Arduino diferente, es posible que debas elegir un nuevo puerto.
        * Siempre verifica el puerto primero si hay problemas de conexi√≥n.

    .. image:: img/6_blink_ide_port.png
        :width: 600
        :align: center

**3. Escribiendo el C√≥digo**


1. En nuestro proyecto, utilizamos el pin digital 3 de la placa para controlar un LED. Cada pin puede funcionar como salida, enviando 5 voltios, o como entrada, leyendo el voltaje entrante. Para configurar el LED, establecemos el pin como salida usando la funci√≥n ``pinMode(pin, mode)``.

Vamos a analizar la sintaxis de ``pinMode()``.

    * ``pinMode(pin, mode)``: Configura un pin espec√≠fico como ``INPUT`` o ``OUTPUT``.

    **Par√°metros**
        - ``pin``: el n√∫mero del pin que deseas configurar.
        - ``mode``: ``INPUT``, ``OUTPUT`` o ``INPUT_PULLUP``.

    **Retorno**
        Ninguno.
    
2. Ahora, es momento de agregar nuestra primera l√≠nea de c√≥digo en la funci√≥n ``void setup()``.
        
    .. note::

        - La codificaci√≥n en Arduino es sensible a may√∫sculas y min√∫sculas. Aseg√∫rate de escribir las funciones exactamente como son.
        - Observa que el comando termina con un punto y coma. En el IDE de Arduino, todos los comandos deben terminar con uno.
        - Los comentarios en el c√≥digo son √∫tiles para recordarte qu√© hace una l√≠nea o secci√≥n del c√≥digo.

    .. code-block:: Arduino
        :emphasize-lines: 3

        void setup() {
            // C√≥digo de configuraci√≥n aqu√≠, para ejecutarse una vez:
            pinMode(3,OUTPUT); // configurar el pin 3 como salida
        }
    
        void loop() {
        // Escribe tu c√≥digo principal aqu√≠, para ejecutarse repetidamente:

        }



**4. Verificando el C√≥digo**

Antes de activar nuestro LED, verificaremos el c√≥digo. Esto comprueba si el IDE de Arduino puede entender y compilar tus comandos en lenguaje de m√°quina.

1. Para verificar tu c√≥digo, haz clic en el bot√≥n de **verificaci√≥n** en la esquina superior izquierda de la ventana.

    .. image:: img/6_blink_ide_verify.png
        :width: 600
        :align: center


2. Si tu c√≥digo es legible por la m√°quina, un mensaje en la parte inferior indicar√° que el c√≥digo ha sido compilado con √©xito. Esta √°rea tambi√©n muestra cu√°nto espacio de almacenamiento utiliza tu programa.

    .. image:: img/6_blink_ide_verify_done.png
        :width: 600
        :align: center


3. Si hay un error en tu c√≥digo, ver√°s un mensaje de error en color naranja. El IDE suele resaltar d√≥nde podr√≠a estar el problema, generalmente cerca de la l√≠nea resaltada. Por ejemplo, un error por falta de punto y coma resaltar√° la l√≠nea inmediatamente despu√©s del error.

    .. image:: img/6_blink_ide_verify_error.png
        :width: 600
        :align: center


4. Cuando encuentres errores, es momento de depurar: encontrar y corregir los errores en tu c√≥digo. Revisa los problemas comunes como:

    - ¬øEst√° la ``M`` en ``pinMode`` en may√∫scula?
    - ¬øEscribiste ``OUTPUT`` con todas las letras en may√∫sculas?
    - ¬øTienes tanto par√©ntesis de apertura como de cierre en tu funci√≥n ``pinMode``?
    - ¬øTerminaste tu funci√≥n ``pinMode`` con un punto y coma?
    - ¬øEst√° toda la ortograf√≠a correcta? Si encuentras errores, corr√≠gelos y verifica tu c√≥digo de nuevo. Sigue depurando hasta que tu sketch est√© libre de errores.

El IDE de Arduino deja de compilar en el primer error, por lo que puede que tengas que verificar varias veces para corregir m√∫ltiples errores. Verificar tu c√≥digo regularmente es una buena pr√°ctica.

Depurar es una gran parte de la programaci√≥n. Los programadores profesionales a menudo pasan m√°s tiempo depurando que escribiendo nuevo c√≥digo. Los errores son normales, as√≠ que no te desanimes. Convertirse en un buen solucionador de problemas es clave para ser un gran programador.

**5. Continuando con la Escritura del Sketch**

1. Ahora est√°s listo para comenzar con la funci√≥n ``void loop()``. Aqu√≠ es donde ocurre la acci√≥n principal de tu sketch o programa. Para encender el LED conectado al Arduino Uno R3, necesitamos proporcionar voltaje al circuito usando ``digitalWrite()``.

    * ``digitalWrite(pin, value)``: Env√≠a una se√±al ``HIGH`` (5V) o ``LOW`` (0V) a un pin digital, cambiando el estado operativo del componente.

    **Par√°metros**
        - ``pin``: el n√∫mero del pin de Arduino.
        - ``value``: ``HIGH`` o ``LOW``.
    
    **Retorno**
        Ninguno.

5. Debajo del comentario en la funci√≥n ``void loop()``, escribe un comando para encender el LED conectado al pin 3. No olvides terminar el comando con un punto y coma. Verifica y depura tu c√≥digo si es necesario.

    .. code-block:: Arduino
        :emphasize-lines: 8

        void setup() {
            // C√≥digo de configuraci√≥n aqu√≠, para ejecutarse una vez:
            pinMode(3, OUTPUT);  // configurar el pin 3 como salida
        }

        void loop() {
            // Escribe tu c√≥digo principal aqu√≠, para ejecutarse repetidamente:
            digitalWrite(3, HIGH);
        }

6. Despu√©s del comando ``digitalWrite()``, agrega un comentario explicando qu√© hace esta l√≠nea. Por ejemplo:

    .. code-block:: Arduino
        :emphasize-lines: 8

        void setup() {
            // C√≥digo de configuraci√≥n, se ejecuta una vez: 
            pinMode(3, OUTPUT);  // configura el pin 3 como salida
        }

        void loop() {
            // C√≥digo principal, se ejecuta repetidamente:
            digitalWrite(3, HIGH);  // Enciende el LED en el pin 3
        }


**6. Cargando el C√≥digo**

Con tu c√≥digo sin errores y verificado, es momento de cargarlo en el Arduino Uno R3 y ver c√≥mo tu LED cobra vida.

1. En el IDE, haz clic en el bot√≥n ‚ÄúSubir‚Äù. La computadora compilar√° el c√≥digo y luego lo transferir√° al Arduino Uno R3. Durante la transferencia, deber√≠as ver algunas luces parpadear en la placa, lo que indica la comunicaci√≥n con la computadora.

.. image:: img/6_blink_ide_upload.png
    :width: 600
    :align: center

2. El mensaje ‚ÄúCarga completada‚Äù significa que tu c√≥digo no tiene problemas y que has seleccionado la placa y el puerto correctos.

.. image:: img/6_blink_ide_upload_done.png
    :width: 600
    :align: center


3. Una vez que la transferencia est√© completa, el c√≥digo se ejecutar√° y deber√≠as ver el LED en la placa de pruebas encenderse.


**7. Midiendo el Voltaje a Trav√©s del LED**

Vamos a usar un mult√≠metro para medir el voltaje en el pin 3 y comprender qu√© significa el estado ``HIGH`` en el c√≥digo.

1. Ajusta el mult√≠metro en la configuraci√≥n de 20 voltios en corriente continua (DC).

.. image:: img/multimeter_dc_20v.png
    :width: 300
    :align: center

2. Comienza midiendo el voltaje en el Pin 3. Toca el cable de prueba rojo del mult√≠metro al Pin 3 y el cable negro al GND.

.. image:: img/6_blink_wiring_measure_high.png
    :width: 600
    :align: center

3. Registra el voltaje medido en la tabla para el Pin 3 bajo la fila etiquetada como "HIGH".

.. list-table::
   :widths: 25 25
   :header-rows: 1

   * - Estado
     - Voltaje Pin 3
   * - HIGH
     - *‚âà4.95 voltios*
   * - LOW
     - 


4. Despu√©s de medir, recuerda apagar el mult√≠metro configur√°ndolo en la posici√≥n "OFF".

Nuestras mediciones revelan que el voltaje en los tres pines es cercano a 5V. Esto indica que al configurar un pin en ``HIGH`` en el c√≥digo, el voltaje de salida en ese pin es cercano a 5V.

El voltaje del pin en el Arduino R3 es de 5V, por lo que al establecerlo en ``HIGH`` alcanza cerca de 5V. Sin embargo, algunas placas funcionan a 3.3V, lo que significa que su estado ``HIGH`` estar√≠a cerca de 3.3V.


Hacer Parpadear el LED
------------------------------
Ahora que tu LED est√° encendido, es hora de hacer que parpadee.

1. Abre el sketch que guardaste anteriormente, ``Lesson6_Light_up_LED``. Haz clic en ‚ÄúGuardar como...‚Äù en el men√∫ ‚ÄúArchivo‚Äù y ren√≥mbralo como ``Lesson6_Blink_LED``. Haz clic en "Guardar".

2. En la funci√≥n ``void loop()`` de tu sketch, copia los comandos ``digitalWrite()`` y p√©galos despu√©s de los originales. Para hacer que el LED parpadee, primero lo encendiste; ahora establece su estado en ``LOW`` para apagarlo.

    .. note::
       * Copiar y pegar puede ser el mejor aliado de un programador. Replica una secci√≥n limpia de c√≥digo en una nueva posici√≥n y ajusta sus par√°metros para una ejecuci√≥n r√°pida y limpia.
       * Recuerda actualizar los comentarios para que coincidan mejor con la acci√≥n realizada.
       * Usa ``Ctrl+T`` para formatear tu c√≥digo de manera ordenada con un solo clic, haci√©ndolo m√°s legible y amigable.

    .. code-block:: Arduino
       :emphasize-lines: 8,9

       void setup() {
            // C√≥digo de configuraci√≥n, se ejecuta una vez:
            pinMode(3, OUTPUT);  // configura el pin 3 como salida
       }

       void loop() {
            // C√≥digo principal, se ejecuta repetidamente:
            digitalWrite(3, HIGH);  // Enciende el LED en el pin 3   
            digitalWrite(3, LOW);  // Apaga el LED en el pin 3
       }
3. Presiona el bot√≥n ‚ÄúSubir‚Äù para transferir el sketch al Arduino Uno R3. Despu√©s de la transferencia, es posible que notes que el LED no parpadea, o parpadea tan r√°pido que es imperceptible.

4. Para observar visualmente el parpadeo, puedes usar el comando ``delay()`` para hacer que el Arduino Uno R3 espere el tiempo que especifiques, en milisegundos.

    * ``delay(ms)``: Pausa el programa durante la cantidad de tiempo (en milisegundos) especificada como par√°metro. (Hay 1000 milisegundos en un segundo).

    **Par√°metros**
        - ``ms``: el n√∫mero de milisegundos que pausar√°. Tipos de datos permitidos: unsigned long.

    **Devuelve**
        Nada

5. Ahora, incluye el comando ``delay(time)`` despu√©s de cada conjunto de comandos de ENCENDIDO y APAGADO, configurando el tiempo de espera en 3000 milisegundos (3 segundos). Puedes ajustar esta duraci√≥n para hacer que el LED parpadee m√°s r√°pido o m√°s lento.

    .. note::

        Durante este retraso, el Arduino Uno R3 no puede realizar ninguna tarea ni ejecutar otros comandos hasta que termine el retraso.

    .. code-block:: Arduino
       :emphasize-lines: 10,11

       void setup() {
            // C√≥digo de configuraci√≥n, se ejecuta una vez:
            pinMode(3, OUTPUT);  // configura el pin 3 como salida
       }

       void loop() {
            // C√≥digo principal, se ejecuta repetidamente:
            digitalWrite(3, HIGH);  // Enciende el LED en el pin 3
            delay(3000); // Espera 3 segundos   
            digitalWrite(3, LOW);  // Apaga el LED en el pin 3
            delay(3000); // Espera 3 segundos
       }

6. Sube tu sketch al Arduino Uno R3. Despu√©s de la carga, tu LED deber√≠a parpadear con un intervalo de 3 segundos.

7. Confirma que todo est√° funcionando como se espera y luego guarda tu sketch.

8. Usemos un mult√≠metro para medir el voltaje en tres pines y entender qu√© significa realmente el estado ``LOW`` en el c√≥digo. Ajusta el mult√≠metro a la configuraci√≥n de 20 voltios en corriente continua (DC).

.. image:: img/multimeter_dc_20v.png
    :width: 300
    :align: center

9. Comienza midiendo el voltaje en el Pin 3. Toca el cable de prueba rojo del mult√≠metro al Pin 3 y el cable negro a GND.

.. image:: img/6_blink_wiring_measure_high.png
    :width: 600
    :align: center

10. Con los tres LED apagados, registra el voltaje medido para el Pin 3 en la fila "LOW" de tu tabla.

.. list-table::
   :widths: 25 25
   :header-rows: 1

   * - Estado
     - Voltaje Pin 3 
   * - HIGH
     - *‚âà4.95 voltios*
   * - LOW
     - *0.00 voltios*

A trav√©s de nuestras mediciones, descubrimos que cuando los LED est√°n apagados, el voltaje en el Pin 3 cae a 0V. Esto demuestra que en nuestro c√≥digo, establecer un pin en "LOW" reduce efectivamente el voltaje de salida en ese pin a 0V, apagando el LED conectado. Este principio nos permite controlar los estados de encendido y apagado de los LED con un tiempo preciso, imitando el funcionamiento de un sem√°foro.

**Pregunta**

Sube el c√≥digo anterior y ver√°s que el LED parpadea repetidamente con un intervalo de 3 segundos. Si solo quieres que se encienda y apague una vez, ¬øqu√© deber√≠as hacer?

**Resumen**

¬°Felicitaciones por completar esta lecci√≥n! Lograste programar un LED para que parpadee usando el Arduino Uno R3. Esta lecci√≥n sirvi√≥ como introducci√≥n a la escritura y carga de sketches en Arduino, la configuraci√≥n de modos de pines y la manipulaci√≥n de salidas para lograr respuestas el√©ctricas deseadas. A trav√©s de la construcci√≥n del circuito y la programaci√≥n del Arduino Uno R3, obtuviste valiosas ideas sobre la interacci√≥n entre los comandos de software y los comportamientos del hardware f√≠sico.

¬°Tu capacidad para controlar un LED es solo el comienzo! Imagina lo que puedes lograr a medida que ampl√≠es estos conceptos b√°sicos.

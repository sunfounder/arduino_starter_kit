.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profond√©ment dans l'univers du Raspberry Pi, de l'Arduino et de l'ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez vos probl√®mes apr√®s-vente et relevez vos d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez et partagez** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et √† des promotions sp√©ciales.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !


6. Faire clignoter une LED
===============================
Bienvenue dans cette le√ßon ! Vous apprendrez √† manipuler les broches num√©riques de l'Arduino Uno R3 pour contr√¥ler une LED de mani√®re programm√©e, en l'allumant et l'√©teignant automatiquement, une comp√©tence essentielle tant dans les applications domestiques qu'industrielles.

.. raw:: html

    <video muted controls style = "max-width:90%">
        <source src="_static/video/6_blink_led.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

Dans cette le√ßon, vous allez apprendre √† :

* Cr√©er et sauvegarder des sketches en utilisant l'IDE Arduino.
* Utiliser les fonctions ``pinMode()`` et ``digitalWrite()`` pour contr√¥ler des √©l√©ments de circuit.
* T√©l√©charger des sketches sur l'Arduino Uno R3 et comprendre leurs effets en temps r√©el.
* Impl√©menter ``delay()`` dans les sketches pour g√©rer les comportements du circuit.

√Ä la fin de cette le√ßon, vous serez capable de construire un circuit qui non seulement allume une LED, mais la fait aussi clignoter √† des intervalles que vous d√©finissez, vous offrant ainsi une compr√©hension de base de l'interaction entre le logiciel et le mat√©riel.

Construction du circuit
----------------------------

**Composants n√©cessaires**


.. list-table:: 
   :widths: 25 25 25 25
   :header-rows: 0

   * - 1 * Arduino Uno R3
     - 1 * LED rouge
     - 1 * R√©sistance de 220Œ©
     - C√¢bles de connexion
   * - |list_uno_r3| 
     - |list_red_led| 
     - |list_220ohm| 
     - |list_wire| 
   * - 1 * C√¢ble USB
     - 1 * Plaque d'essai
     - 1 * Multim√®tre
     -   
   * - |list_usb_cable| 
     - |list_breadboard| 
     - |list_meter|
     - 

**√âtapes de construction**

Prenez le circuit construit dans :ref:`2_first_circuit` et d√©placez le fil de la borne 5V vers la broche 3, comme indiqu√© sur l'image ci-dessous.

.. image:: img/6_led_circuit.png
    :width: 600
    :align: center

Si vous avez d√©mont√© le circuit pr√©c√©dent, vous pouvez le reconstruire en suivant ces √©tapes :

1. Connectez la r√©sistance de 220 ohms √† la plaque d'essai. Un fil doit √™tre dans le terminal n√©gatif, et l'autre dans le trou 1B.

.. image:: img/2_connect_resistor.png
    :width: 300
    :align: center

2. Ajoutez une LED rouge √† la plaque d'essai. L'anode de la LED (longue patte) doit √™tre dans le trou 1F et la cathode (courte patte) dans le trou 1E. Parfois, il est difficile de distinguer l'anode de la cathode par la longueur des pattes. Rappelez-vous, le c√¥t√© cathode de la LED a √©galement un bord plat sur la lentille color√©e, tandis que l'anode a un bord arrondi.

.. image:: img/2_connect_led.png
    :width: 300
    :align: center

3. Utilisez un court c√¢ble de connexion pour relier la LED √† la source d'alimentation. Une extr√©mit√© du c√¢ble doit √™tre dans le trou 1J et l'autre dans le terminal positif.

.. image:: img/2_connect_wire.png
    :width: 300
    :align: center

4. Connectez le terminal positif de la plaque d'essai √† la broche 3 de l'Arduino Uno R3.

.. image:: img/6_led_circuit_3.png
    :width: 600
    :align: center

5. Reliez le terminal n√©gatif de la plaque d'essai √† l'une des broches de masse ("GND") de l'Arduino Uno R3.

.. image:: img/6_led_circuit.png
    :width: 600
    :align: center


Animer la LED
-----------------------------

√áa y est, il est temps de donner vie √† la LED ! Au lieu de se plonger directement dans l'exemple Blink d'Arduino, nous allons partir de z√©ro et cr√©er un tout nouveau sketch. Allons-y !

**1. Cr√©er et sauvegarder un sketch**

1. Lancez l'IDE Arduino. Allez dans le menu ‚ÄúFichier‚Äù et cliquez sur ‚ÄúNouveau sketch‚Äù pour commencer √† neuf. Vous pouvez fermer les autres fen√™tres de sketch qui pourraient √™tre ouvertes.

    .. image:: img/6_blink_ide_new.png
        :align: center

2. Organisez la fen√™tre de l'IDE Arduino c√¥te √† c√¥te avec ce tutoriel en ligne, afin de voir les deux √† la fois. Les √©l√©ments peuvent sembler petits, mais cela vous √©vitera de devoir passer d'une fen√™tre √† l'autre.

    .. image:: img/6_blink_ide_tutorials.png


3. Il est temps de sauvegarder votre sketch. Cliquez sur ‚ÄúSauvegarder‚Äù dans le menu ‚ÄúFichier‚Äù ou appuyez sur ``Ctrl + S``.

    .. image:: img/6_blink_ide_save.png


4. Vous pouvez sauvegarder votre sketch √† l'emplacement par d√©faut ou √† un autre endroit. Donnez √† votre sketch un nom significatif, tel que ``Le√ßon6_Allumer_LED``, puis cliquez sur ‚ÄúSauvegarder‚Äù.

    * Nommez votre sketch d'apr√®s sa fonction pour le retrouver facilement plus tard.
    * Les noms de fichiers de sketchs Arduino ne peuvent pas contenir d'espaces.
    * Lorsque vous enregistrez des modifications importantes, pensez √† enregistrer sous une nouvelle version (par ex., V1) pour avoir une sauvegarde.
    
    .. image:: img/6_blink_ide_name.png


5. Votre nouveau sketch se compose de deux parties principales, ``void setup()`` et ``void loop()``, qui sont des fonctions utilis√©es dans tous les sketches Arduino.

    * ``void setup()`` s'ex√©cute une fois au d√©marrage du programme pour d√©finir les conditions initiales.
    * ``void loop()`` s'ex√©cute en continu, r√©alisant les actions r√©p√©titives.
    * Placez les commandes pour chaque fonction entre ses accolades ``{}``.
    * Toute ligne commen√ßant par ``//`` est un commentaire. Ce sont des notes pour vous et elles n'affecteront pas l'ex√©cution du code.

    .. code-block:: Arduino

        void setup() {
        // Configuration du code ici, ex√©cut√© une fois :

        }

        void loop() {
        // Placez votre code principal ici, qui sera ex√©cut√© en boucle :

        }

**2. Choisir la carte et le port**

1. Connectez votre Arduino Uno R3 √† l'ordinateur avec un c√¢ble USB. Vous verrez la lumi√®re de mise sous tension s'allumer sur l'Arduino.

    .. image:: img/1_connect_uno_pc.jpg
        :width: 600
        :align: center


2. Indiquez √† l'IDE que vous utilisez une **Arduino Uno**. Allez dans **Outils** -> **Carte** -> **Cartes Arduino AVR** -> **Arduino Uno**.

    .. image:: img/6_blink_ide_board.png
        :width: 600
        :align: center


3. Ensuite, dans l'IDE Arduino, choisissez le port auquel votre Arduino est connect√©.

    .. note::

        * Une fois qu'un port est s√©lectionn√©, l'IDE Arduino devrait s'y connecter par d√©faut chaque fois que l'Arduino est branch√© via USB.
        * Si une autre carte Arduino est connect√©e, il vous faudra peut-√™tre choisir un nouveau port.
        * V√©rifiez toujours le port en premier en cas de probl√®me de connexion.

    .. image:: img/6_blink_ide_port.png
        :width: 600
        :align: center

**3. √âcrire le code**


1. Dans notre projet, nous utilisons la broche num√©rique 3 sur la carte pour contr√¥ler une LED. Chaque broche peut fonctionner soit en tant que sortie, envoyant 5 volts, soit en tant qu'entr√©e, lisant la tension entrante. Pour configurer la LED, nous d√©finissons la broche en sortie avec la fonction ``pinMode(pin, mode)``.
    
Voyons la syntaxe de ``pinMode()``.

    * ``pinMode(pin, mode)`` : D√©finit une broche sp√©cifique en tant qu'``INPUT`` ou ``OUTPUT``.

    **Param√®tres**
        - ``pin`` : le num√©ro de la broche que vous souhaitez configurer.
        - ``mode`` : ``INPUT``, ``OUTPUT`` ou ``INPUT_PULLUP``.

    **Retourne**
        Rien
    
2. Il est maintenant temps d'ajouter notre premi√®re ligne de code dans la fonction ``void setup()``.
        
    .. note::

        - Le codage Arduino est sensible √† la casse. Assurez-vous d'√©crire les fonctions exactement comme elles sont.
        - Remarquez que la commande se termine par un point-virgule. Dans l'IDE Arduino, chaque commande doit se terminer par un point-virgule.
        - Les commentaires dans le code sont utiles pour vous rappeler ce que fait une ligne ou une section du code.

    .. code-block:: Arduino
        :emphasize-lines: 3

        void setup() {
            // Code de configuration ici, ex√©cut√© une seule fois :
            pinMode(3,OUTPUT); // d√©finir la broche 3 comme sortie
        }
    
        void loop() {
        // Placez ici votre code principal, ex√©cut√© en boucle :

        }

**4. V√©rifier le code**

Avant d'activer nos feux de signalisation, nous allons v√©rifier le code. Cela permet de s'assurer que l'IDE Arduino peut comprendre et compiler vos commandes en langage machine.

1. Pour v√©rifier votre code, cliquez sur le bouton **cocher** dans le coin sup√©rieur gauche de la fen√™tre.

    .. image:: img/6_blink_ide_verify.png
        :width: 600
        :align: center


2. Si votre code est lisible par la machine, un message en bas indiquera que le code a √©t√© compil√© avec succ√®s. Cette zone montre √©galement l'espace de stockage utilis√© par votre programme.

    .. image:: img/6_blink_ide_verify_done.png
        :width: 600
        :align: center


3. Si votre code contient une erreur, vous verrez un message d'erreur orange. L'IDE met souvent en √©vidence l'endroit o√π se trouve le probl√®me, g√©n√©ralement pr√®s de la ligne en surbrillance. Par exemple, une erreur due √† un point-virgule manquant mettra en √©vidence la ligne juste apr√®s l'erreur.

    .. image:: img/6_blink_ide_verify_error.png
        :width: 600
        :align: center


4. Lorsque vous rencontrez des erreurs, il est temps de d√©boguer ‚Äî c'est-√†-dire de trouver et corriger les erreurs dans votre code. V√©rifiez les probl√®mes courants tels que :

    - Le ``M`` de ``pinMode`` est-il en majuscule ?
    - Avez-vous utilis√© toutes les lettres en majuscules pour ``OUTPUT`` ?
    - Avez-vous √† la fois une parenth√®se ouvrante et fermante dans votre fonction ``pinMode`` ?
    - Avez-vous termin√© votre fonction ``pinMode`` par un point-virgule ?
    - L'orthographe est-elle correcte ? Si vous trouvez des erreurs, corrigez-les et v√©rifiez √† nouveau votre code. Continuez √† d√©boguer jusqu'√† ce que votre sketch soit sans erreur.

L'IDE Arduino cesse de compiler √† la premi√®re erreur, vous devrez peut-√™tre v√©rifier plusieurs fois pour corriger plusieurs erreurs. V√©rifier r√©guli√®rement votre code est une bonne habitude.

Le d√©bogage est une grande partie de la programmation. Les programmeurs professionnels passent souvent plus de temps √† d√©boguer qu'√† √©crire du nouveau code. Les erreurs sont normales, donc ne vous d√©couragez pas. Devenir un bon r√©solveur de probl√®mes est essentiel pour √™tre un excellent programmeur.

**5. Continuer √† √©crire le sketch**

1. Vous √™tes maintenant pr√™t √† commencer la fonction ``void loop()``. C'est ici que se d√©roule l'action principale de votre sketch ou programme. Pour allumer la LED connect√©e √† l'Arduino Uno R3, nous devons fournir de la tension au circuit en utilisant ``digitalWrite()``.

    * ``digitalWrite(pin, value)`` : Envoie un signal ``HIGH`` (5V) ou ``LOW`` (0V) √† une broche num√©rique, modifiant l'√©tat de fonctionnement du composant.

    **Param√®tres**
        - ``pin`` : le num√©ro de la broche de l'Arduino.
        - ``value`` : ``HIGH`` ou ``LOW``.
    
    **Retourne**
        Rien

5. Sous le commentaire dans la fonction ``void loop()``, √©crivez une commande pour allumer la LED connect√©e √† la broche 3. N'oubliez pas de terminer la commande par un point-virgule. V√©rifiez et d√©boguez votre code si n√©cessaire.

    .. code-block:: Arduino
        :emphasize-lines: 8

        void setup() {
            // Code de configuration ici, ex√©cut√© une seule fois :
            pinMode(3, OUTPUT);  // d√©finir la broche 3 comme sortie
        }

        void loop() {
            // Placez ici votre code principal, ex√©cut√© en boucle :
            digitalWrite(3, HIGH);
        }

6. Apr√®s la commande ``digitalWrite()``, ajoutez un commentaire expliquant ce que fait cette ligne. Par exemple :

    .. code-block:: Arduino
        :emphasize-lines: 8

        void setup() {
            // Code de configuration ici, ex√©cut√© une seule fois : 
            pinMode(3, OUTPUT);  // d√©finir la broche 3 comme sortie
        }

        void loop() {
            // Placez ici votre code principal, ex√©cut√© en boucle :
            digitalWrite(3, HIGH);  // Allumer la LED sur la broche 3
        }

**6. T√©l√©verser le code**

Une fois que votre code est v√©rifi√© et sans erreur, il est temps de le t√©l√©verser sur l'Arduino Uno R3 et de voir votre feu de signalisation s'animer.

1. Dans l'IDE, cliquez sur le bouton "T√©l√©verser". L'ordinateur va compiler le code, puis le transf√©rer vers l'Arduino Uno R3. Pendant le transfert, vous devriez voir des lumi√®res clignoter sur la carte, indiquant la communication avec l'ordinateur.

.. image:: img/6_blink_ide_upload.png
    :width: 600
    :align: center

2. Un message "T√©l√©versement termin√©" signifie que votre code ne contient pas de probl√®me et que vous avez s√©lectionn√© la bonne carte et le bon port.

.. image:: img/6_blink_ide_upload_done.png
    :width: 600
    :align: center


3. Une fois le transfert termin√©, le code s'ex√©cutera et vous devriez voir la LED sur la plaque d'essai s'allumer.

**7. Mesurer la tension aux bornes de la LED**

Utilisons un multim√®tre pour mesurer la tension √† la broche 3 et comprendre ce que signifie r√©ellement l'√©tat ``HIGH`` dans le code.

1. R√©glez le multim√®tre sur la position 20 volts en courant continu (DC).

.. image:: img/multimeter_dc_20v.png
    :width: 300
    :align: center

2. Commencez par mesurer la tension √† la broche 3. Touchez la sonde rouge du multim√®tre √† la broche 3 et la sonde noire √† la masse (GND).

.. image:: img/6_blink_wiring_measure_high.png
    :width: 600
    :align: center

3. Notez la tension mesur√©e dans le tableau pour la broche 3 sous la ligne intitul√©e "HIGH".

.. list-table::
   :widths: 25 25
   :header-rows: 1

   * - √âtat
     - Tension broche 3
   * - HIGH
     - *‚âà4.95 volts*
   * - LOW
     - 


4. Apr√®s avoir mesur√©, pensez √† √©teindre le multim√®tre en le r√©glant sur la position "OFF".

Nos mesures montrent que la tension sur la broche 3 est proche de 5V. Cela indique que d√©finir une broche √† ``HIGH`` dans le code signifie que la tension de sortie √† cette broche est proche de 5V.

La tension des broches du R3 est de 5V, donc en les r√©glant sur ``HIGH``, elle atteint presque 5V. Cependant, certaines cartes fonctionnent √† 3.3V, ce qui signifie que leur √©tat ``HIGH`` serait proche de 3.3V.

Faire clignoter la LED
------------------------------
Maintenant que votre LED est allum√©e, il est temps de la faire clignoter.

1. Ouvrez le sketch que vous avez sauvegard√© pr√©c√©demment, ``Lesson6_Light_up_LED``. Cliquez sur ‚ÄúEnregistrer sous...‚Äù dans le menu ‚ÄúFichier‚Äù, et renommez-le en ``Lesson6_Blink_LED``. Cliquez sur "Enregistrer".

2. Dans la fonction ``void loop()`` de votre sketch, copiez les commandes ``digitalWrite()`` et collez-les apr√®s les lignes originales. Pour faire clignoter la LED, vous l'avez allum√©e pr√©c√©demment ; maintenant, d√©finissez son √©tat sur ``LOW`` pour l'√©teindre.

    .. note::
       * Copier et coller peut √™tre un alli√© pr√©cieux pour un programmeur. Reproduisez une section de code propre √† un nouvel emplacement et ajustez ses param√®tres pour une ex√©cution rapide et efficace.
       * N'oubliez pas de mettre √† jour les commentaires pour mieux correspondre √† l'action effectu√©e.
       * Utilisez ``Ctrl+T`` pour formater votre code proprement en un seul clic, le rendant plus lisible et convivial.

    .. code-block:: Arduino
       :emphasize-lines: 8,9

       void setup() {
            // Code de configuration ici, ex√©cut√© une seule fois :
            pinMode(3, OUTPUT);  // d√©finir la broche 3 comme sortie
       }

       void loop() {
            // Placez ici votre code principal, ex√©cut√© en boucle :
            digitalWrite(3, HIGH);  // Allumer la LED sur la broche 3   
            digitalWrite(3, LOW);  // √âteindre la LED sur la broche 3
       }

3. Appuyez sur le bouton "T√©l√©verser" pour transf√©rer le sketch vers l'Arduino Uno R3. Apr√®s le transfert, vous remarquerez peut-√™tre que la LED ne clignote pas, ou qu'elle clignote si rapidement que cela en devient imperceptible.

4. Pour observer visuellement le clignotement, vous pouvez utiliser la commande ``delay()`` afin de faire attendre l'Arduino Uno R3 pendant une dur√©e que vous sp√©cifiez, en millisecondes.

    * ``delay(ms)`` : Met le programme en pause pendant le temps sp√©cifi√© (en millisecondes) pass√© en param√®tre. (Il y a 1000 millisecondes dans une seconde.)

    **Param√®tres**
        - ``ms`` : le nombre de millisecondes √† attendre. Types de donn√©es accept√©s : unsigned long.

    **Retourne**
        Rien

5. Maintenant, incluez la commande ``delay(time)`` apr√®s chaque commande ON et OFF, en r√©glant le temps d'attente √† 3000 millisecondes (3 secondes). Vous pouvez ajuster cette dur√©e pour que la LED clignote plus rapidement ou plus lentement.

    .. note::

        Pendant ce d√©lai, l'Arduino Uno R3 ne peut ex√©cuter aucune autre t√¢che ou commande jusqu'√† la fin du d√©lai.
        
    .. code-block:: Arduino
       :emphasize-lines: 10,11

       void setup() {
            // Code de configuration ici, ex√©cut√© une seule fois :
            pinMode(3, OUTPUT);  // d√©finir la broche 3 comme sortie
       }

       void loop() {
            // Placez ici votre code principal, ex√©cut√© en boucle :
            digitalWrite(3, HIGH);  // Allumer la LED sur la broche 3
            delay(3000);  // Attendre 3 secondes   
            digitalWrite(3, LOW);  // √âteindre la LED sur la broche 3
            delay(3000);  // Attendre 3 secondes
       }

6. T√©l√©versez votre sketch sur l'Arduino Uno R3. Une fois termin√©, votre LED devrait clignoter toutes les 3 secondes.

7. V√©rifiez que tout fonctionne comme pr√©vu, puis sauvegardez votre sketch.

8. Utilisons maintenant un multim√®tre pour mesurer la tension sur trois broches et comprendre ce que signifie l'√©tat ``LOW`` dans le code. R√©glez le multim√®tre sur la position 20 volts en courant continu.

.. image:: img/multimeter_dc_20v.png
    :width: 300
    :align: center

9. Commencez par mesurer la tension √† la broche 3. Touchez la sonde rouge du multim√®tre √† la broche 3 et la sonde noire √† GND.

.. image:: img/6_blink_wiring_measure_high.png
    :width: 600
    :align: center

10. Avec les trois LED √©teintes, notez la tension mesur√©e pour la broche 3 dans la ligne "LOW" de votre tableau.

.. list-table::
   :widths: 25 25
   :header-rows: 1

   * - √âtat
     - Tension broche 3 
   * - HIGH
     - *‚âà4.95 volts*
   * - LOW
     - *0.00 volts*

Gr√¢ce √† nos mesures, nous avons constat√© que lorsque les LED sont √©teintes, la tension √† la broche 3 chute √† 0V. Cela montre que dans notre code, d√©finir une broche √† "LOW" r√©duit effectivement la tension de sortie √† 0V, √©teignant ainsi la LED connect√©e. Ce principe nous permet de contr√¥ler les √©tats ON et OFF des LED avec un timing pr√©cis, imitant le fonctionnement d'un feu de signalisation.

**Question**

T√©l√©versez le code ci-dessus, et vous constaterez que la LED clignote √† intervalles de 3 secondes. Si vous voulez qu'elle s'allume et s'√©teigne une seule fois, que devriez-vous faire ?


**R√©sum√©**

F√©licitations pour avoir compl√©t√© cette le√ßon, o√π vous avez r√©ussi √† programmer une LED pour clignoter √† l'aide de l'Arduino Uno R3. Cette le√ßon vous a introduit √† l'√©criture et au t√©l√©versement de sketches Arduino, √† la d√©finition des modes de broche, et √† la manipulation des sorties pour obtenir des r√©ponses √©lectriques souhait√©es. En construisant le circuit et en programmant l'Arduino Uno R3, vous avez acquis des connaissances pr√©cieuses sur l'interaction entre les commandes logicielles et les comportements mat√©riels physiques.

Votre capacit√© √† contr√¥ler une LED n'est que le d√©but ‚Äî imaginez ce que vous pouvez accomplir en d√©veloppant ces bases !
